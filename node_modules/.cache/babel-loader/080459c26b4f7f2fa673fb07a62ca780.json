{"ast":null,"code":"const boardCalc = {\n  indexToX: index => index.toString().charAt(0),\n  indexToY: index => index.toString().charAt(1),\n  xyToIndex: (x, y) => parseInt(x.toString() + y.toString()),\n  getAdjacentIndexes: index => {\n    const x = boardCalc.indexToX(index);\n    const y = boardCalc.indexToY(index);\n    const adjacent = [];\n\n    if (x > 1) {\n      adjacent.push(boardCalc.xyToIndex(x - 1, y));\n    }\n\n    ;\n\n    if (x < 4) {\n      adjacent.push(boardCalc.xyToIndex(x + 1, y));\n    }\n\n    ;\n\n    if (y > 1) {\n      adjacent.push(boardCalc.xyToIndex(x, y - 1));\n    }\n\n    ;\n\n    if (y > 4) {\n      adjacent.push(boardCalc.xyToIndex(x, y + 1));\n    }\n\n    ;\n    return adjacent;\n  },\n  findBuildings: (board, buildingTitle) => board.indexes.filter(index => board[index].title === buildingTitle),\n  getAdjacentWithType: (board, index, type) => boardCalc.getAdjacentIndexes(index).filter(i => board[i].type === type)\n};\nexport const calcScore = {\n  Cottage: board => {\n    return \"Cottage\";\n  },\n  Chapel: board => {\n    return \"Chapel\";\n  },\n  Farm: () => {\n    return 0;\n  },\n  Tavern: board => {\n    return \"Tavern\";\n  },\n  Well: board => {\n    let score = 0;\n    boardCalc.findBuildings(board, \"Well\").forEach(wellIndex => {\n      console.log(wellIndex);\n      score += boardCalc.getAdjacentWithType(board, wellIndex, 1).length;\n    });\n    return score;\n  },\n  Theatr: board => {\n    return \"Theatr\";\n  },\n  Factory: board => {\n    return \"Factory\";\n  }\n}; //simple case\n\nexport const calcFedCottage = (board, buildings) => {\n  const cottageNum = boardCalc.findBuildings(board, \"Cottage\").length;\n  const needFood = cottageNum * buildings[0].toBeFed;\n  const producedFood = boardCalc.findBuildings(board, buildings[2]).length * buildings[2].canFeeds;\n\n  if (needFood > producedFood) {\n    return Math.floor(producedFood / buildings[0].toBeFed);\n  }\n\n  ;\n  return cottageNum;\n};","map":{"version":3,"sources":["D:\\Pro\\React\\tlt\\src\\components\\Buildings\\scoring.js"],"names":["boardCalc","indexToX","index","toString","charAt","indexToY","xyToIndex","x","y","parseInt","getAdjacentIndexes","adjacent","push","findBuildings","board","buildingTitle","indexes","filter","title","getAdjacentWithType","type","i","calcScore","Cottage","Chapel","Farm","Tavern","Well","score","forEach","wellIndex","console","log","length","Theatr","Factory","calcFedCottage","buildings","cottageNum","needFood","toBeFed","producedFood","canFeeds","Math","floor"],"mappings":"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","sourcesContent":["const boardCalc = {\r\n\r\n    indexToX: index => index.toString().charAt(0),\r\n    indexToY: index => index.toString().charAt(1),\r\n    xyToIndex: (x, y) => parseInt(x.toString() + y.toString()),\r\n\r\n    getAdjacentIndexes: index => {\r\n        const x = boardCalc.indexToX(index);\r\n        const y = boardCalc.indexToY(index);\r\n        const adjacent = [];\r\n        if (x > 1) { adjacent.push(boardCalc.xyToIndex(x - 1, y)) };\r\n        if (x < 4) { adjacent.push(boardCalc.xyToIndex(x + 1, y)) };\r\n        if (y > 1) { adjacent.push(boardCalc.xyToIndex(x, y - 1)) };\r\n        if (y > 4) { adjacent.push(boardCalc.xyToIndex(x, y + 1)) };\r\n        return adjacent;\r\n    },\r\n\r\n    findBuildings: (board, buildingTitle) => board.indexes.filter(index => board[index].title === buildingTitle),\r\n\r\n    getAdjacentWithType: (board, index, type) => boardCalc.getAdjacentIndexes(index).filter(i => board[i].type === type),\r\n};\r\n\r\n\r\nexport const calcScore = {\r\n\r\n    Cottage: board => { return \"Cottage\" },\r\n    Chapel: board => { return \"Chapel\" },\r\n    Farm: () => { return 0 },\r\n    Tavern: board => { return \"Tavern\" },\r\n\r\n    Well: board => {\r\n        let score = 0;\r\n        boardCalc.findBuildings(board, \"Well\").forEach(wellIndex => {\r\n            console.log(wellIndex)\r\n            score += boardCalc.getAdjacentWithType(board, wellIndex, 1).length\r\n        });\r\n        return score;\r\n    },\r\n\r\n    Theatr: board => { return \"Theatr\" },\r\n    Factory: board => { return \"Factory\" },\r\n};\r\n\r\n\r\n//simple case\r\nexport const calcFedCottage = (board, buildings )=> {\r\n    const cottageNum = boardCalc.findBuildings(board, \"Cottage\").length;\r\n    const needFood = cottageNum * buildings[0].toBeFed;\r\n   const producedFood = boardCalc.findBuildings(board, buildings[2]).length * buildings[2].canFeeds;\r\n    if (needFood > producedFood) { return Math.floor(producedFood / buildings[0].toBeFed)};\r\n    return  cottageNum;\r\n}\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}