{"ast":null,"code":"var _jsxFileName = \"D:\\\\Pro\\\\React\\\\tlt\\\\src\\\\components\\\\Resources.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { selectResource, changePhaseTo, changePlayerTo } from '../actions';\n\nclass Resources extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.resourceSelection = resource => {\n      if (this.props.phase === \"PHASE_CHOOSING_RESOURCE\") {\n        if (resource !== \"?\") {\n          this.props.selectResource(resource);\n        } else {\n          //TODO change to card random\n          this.props.selectResource(\"random resource\");\n        }\n      }\n    };\n\n    this.resourcePlacing = () => {\n      this.props.changePhaseTo(\"PHASE_PLACING_RESOURCE\");\n      const nextFirstPlayer = this.props.firstPlayer === \"player\" ? \"random\" : \"player\";\n      this.props.changePlayerTo(nextFirstPlayer);\n    };\n  }\n\n  render() {\n    //TODO - button active depending of players order \n    let avaibleResource;\n\n    if (this.props.firstPlayer === \"player\") {\n      avaibleResource = \"Select resource:\\n        <button onClick={() => { this.resourceSelection(\\\"Wood\\\") }}>Wood</button>\\n        <button onClick={() => { this.resourceSelection(\\\"Wheat\\\") }}>Wheat</button>\\n        <button onClick={() => { this.resourceSelection(\\\"Brick\\\") }}>Brick</button>\\n        <button onClick={() => { this.resourceSelection(\\\"Glass\\\") }}>Glass</button>\\n        <button onClick={() => { this.resourceSelection(\\\"Stone\\\") }}>Stone</button>\";\n    } else {\n      avaibleResource = \"<button onClick={() => { this.resourceSelection(\\\"?\\\") }}>Get random resource</button>\";\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, avaibleResource, \"Selected:\", React.createElement(\"button\", {\n      onClick: () => {\n        this.resourcePlacing();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, this.props.selectedResource));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    selectedResource: state.selectedResource,\n    phase: state.phase,\n    firstPlayer: state.firstPlayer\n  };\n};\n\nexport default connect(mapStateToProps, {\n  selectResource,\n  changePhaseTo,\n  changePlayerTo\n})(Resources);","map":{"version":3,"sources":["D:\\Pro\\React\\tlt\\src\\components\\Resources.js"],"names":["React","connect","selectResource","changePhaseTo","changePlayerTo","Resources","Component","resourceSelection","resource","props","phase","resourcePlacing","nextFirstPlayer","firstPlayer","render","avaibleResource","selectedResource","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,cAAT,EAAyBC,aAAzB,EAAwCC,cAAxC,QAA8D,YAA9D;;AAGA,MAAMC,SAAN,SAAwBL,KAAK,CAACM,SAA9B,CAAwC;AAAA;AAAA;;AAAA,SAGpCC,iBAHoC,GAGhBC,QAAQ,IAAI;AAC5B,UAAI,KAAKC,KAAL,CAAWC,KAAX,KAAqB,yBAAzB,EAAoD;AAChD,YAAIF,QAAQ,KAAK,GAAjB,EAAsB;AAClB,eAAKC,KAAL,CAAWP,cAAX,CAA0BM,QAA1B;AACH,SAFD,MAEO;AACH;AACA,eAAKC,KAAL,CAAWP,cAAX,CAA0B,iBAA1B;AACH;AAEJ;AACJ,KAbmC;;AAAA,SAepCS,eAfoC,GAelB,MAAM;AACpB,WAAKF,KAAL,CAAWN,aAAX,CAAyB,wBAAzB;AACA,YAAMS,eAAe,GAAG,KAAKH,KAAL,CAAWI,WAAX,KAA2B,QAA3B,GAAsC,QAAtC,GAAiD,QAAzE;AACA,WAAKJ,KAAL,CAAWL,cAAX,CAA0BQ,eAA1B;AAEH,KApBmC;AAAA;;AAsBpCE,EAAAA,MAAM,GAAG;AACL;AACA,QAAIC,eAAJ;;AACA,QAAG,KAAKN,KAAL,CAAWI,WAAX,KAA2B,QAA9B,EAAwC;AACxCE,MAAAA,eAAe,icAAf;AAMC,KAPD,MAOO;AACHA,MAAAA,eAAe,2FAAf;AACH;;AACD,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKA,eADL,eAII;AAAQ,MAAA,OAAO,EAAE,MAAM;AAAE,aAAKJ,eAAL;AAAwB,OAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKF,KAAL,CAAWO,gBADhB,CAJJ,CADJ;AAWH;;AA9CmC;;AAiDxC,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHF,IAAAA,gBAAgB,EAAEE,KAAK,CAACF,gBADrB;AAEHN,IAAAA,KAAK,EAAEQ,KAAK,CAACR,KAFV;AAGHG,IAAAA,WAAW,EAAEK,KAAK,CAACL;AAHhB,GAAP;AAKH,CAND;;AAQA,eAAeZ,OAAO,CAACgB,eAAD,EAAkB;AAAEf,EAAAA,cAAF;AAAkBC,EAAAA,aAAlB;AAAiCC,EAAAA;AAAjC,CAAlB,CAAP,CAA4EC,SAA5E,CAAf","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { selectResource, changePhaseTo, changePlayerTo } from '../actions';\r\n\r\n\r\nclass Resources extends React.Component {\r\n    //During PHASE_CHOOSING_RESOURCE If you the first player you can select one of 5 resources\r\n    //if you are the second - get random resource.\r\n    resourceSelection = resource => {\r\n        if (this.props.phase === \"PHASE_CHOOSING_RESOURCE\") {\r\n            if (resource !== \"?\") {\r\n                this.props.selectResource(resource);\r\n            } else {\r\n                //TODO change to card random\r\n                this.props.selectResource(\"random resource\");\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    resourcePlacing = () => {\r\n        this.props.changePhaseTo(\"PHASE_PLACING_RESOURCE\");\r\n        const nextFirstPlayer = this.props.firstPlayer === \"player\" ? \"random\" : \"player\";\r\n        this.props.changePlayerTo(nextFirstPlayer);\r\n\r\n    }\r\n\r\n    render() {\r\n        //TODO - button active depending of players order \r\n        let avaibleResource;\r\n        if(this.props.firstPlayer === \"player\") {\r\n        avaibleResource = `Select resource:\r\n        <button onClick={() => { this.resourceSelection(\"Wood\") }}>Wood</button>\r\n        <button onClick={() => { this.resourceSelection(\"Wheat\") }}>Wheat</button>\r\n        <button onClick={() => { this.resourceSelection(\"Brick\") }}>Brick</button>\r\n        <button onClick={() => { this.resourceSelection(\"Glass\") }}>Glass</button>\r\n        <button onClick={() => { this.resourceSelection(\"Stone\") }}>Stone</button>`\r\n        } else {\r\n            avaibleResource = `<button onClick={() => { this.resourceSelection(\"?\") }}>Get random resource</button>`\r\n        }\r\n        return (\r\n            <div>\r\n                {avaibleResource}              \r\n\r\n                Selected:\r\n                <button onClick={() => { this.resourcePlacing() }}>\r\n                    {this.props.selectedResource}\r\n                </button>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        selectedResource: state.selectedResource,\r\n        phase: state.phase,\r\n        firstPlayer: state.firstPlayer\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, { selectResource, changePhaseTo, changePlayerTo })(Resources);\r\n"]},"metadata":{},"sourceType":"module"}