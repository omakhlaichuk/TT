{"ast":null,"code":"import _objectSpread from \"D:\\\\Pro\\\\React\\\\tlt\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { RESOURCE_PHASE, EMPTY_SQUARE } from './../components/constants';\nimport { messageSelectResource } from './../components/messages';\nimport { SELECT_PAWN, SELECT_SQUARE, SELECT_PATTERN, CLEAR_SELECTION, PLACE_RESOURCE, PLACE_BUILDING, FETCH_BUILDING, CHANGE_PHASE, CHANGE_MESSAGE } from '../actions/types';\nconst INITIAL_BOARD = {\n  indexes: [11, 12, 13, 14, 21, 22, 23, 24, 31, 32, 33, 34, 41, 42, 43, 44]\n};\nINITIAL_BOARD.indexes.forEach(index => {\n  INITIAL_BOARD[index] = EMPTY_SQUARE;\n}); //  11: \"BLOCK\",\n///  12: \"wheat\",\n\nconst INITIAL_STATE = {\n  phase: RESOURCE_PHASE,\n  // phase: BUILDING_PHASE,\n  selectedPawn: null,\n  selectedSquare: null,\n  selectedPattern: [],\n  buildings: [],\n  board: INITIAL_BOARD,\n  message: messageSelectResource()\n};\nexport default ((state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case CHANGE_PHASE:\n      return _objectSpread({}, state, {\n        phase: action.payload\n      });\n\n    case CHANGE_MESSAGE:\n      return _objectSpread({}, state, {\n        possibleActions: action.payload\n      });\n\n    case SELECT_PAWN:\n      return _objectSpread({}, state, {\n        selectedPawn: action.payload\n      });\n\n    case SELECT_SQUARE:\n      //state.board.selectedSquare = action.payload;\n      return _objectSpread({}, state, {\n        selectedSquare: action.payload\n      });\n\n    case SELECT_PATTERN:\n      if (state.selectedPattern.find(el => el === action.payload)) {\n        return _objectSpread({}, state, {\n          selectedPattern: state.selectedPattern.filter(el => el !== action.payload)\n        });\n      }\n\n      return _objectSpread({}, state, {\n        selectedPattern: [...state.selectedPattern, action.payload]\n      });\n\n    case CLEAR_SELECTION:\n      //state.board.selectedSquare = action.payload;\n      return _objectSpread({}, state, {\n        selectedSquare: null,\n        selectedPattern: [],\n        selectedPawn: null\n      });\n\n    case FETCH_BUILDING:\n      return _objectSpread({}, state, {\n        buildings: [...state.buildings, action.payload]\n      });\n\n    case PLACE_RESOURCE:\n      return _objectSpread({}, state, {\n        board: _objectSpread({}, state.board, {\n          [state.selectedSquare]: state.selectedPawn\n        }),\n        selectedSquare: null,\n        selectedPawn: null\n      });\n\n    case PLACE_BUILDING:\n      state.selectedPattern.forEach(cell => {\n        state.board[cell] = EMPTY_SQUARE;\n      });\n      return _objectSpread({}, state, {\n        board: _objectSpread({}, state.board, {\n          [state.selectedSquare]: state.selectedPawn\n        }),\n        selectedSquare: null,\n        selectedPawn: null,\n        selectedPattern: []\n      });\n\n    default:\n      return state;\n  }\n});\n/*import { combineReducers } from 'redux';\r\n\r\nimport selectedReducer from './selectedReducer';\r\n\r\n\r\nexport default combineReducers({\r\n    selected:selectedReducer\r\n\r\n});*/","map":{"version":3,"sources":["D:\\Pro\\React\\tlt\\src\\reducers\\index.js"],"names":["RESOURCE_PHASE","EMPTY_SQUARE","messageSelectResource","SELECT_PAWN","SELECT_SQUARE","SELECT_PATTERN","CLEAR_SELECTION","PLACE_RESOURCE","PLACE_BUILDING","FETCH_BUILDING","CHANGE_PHASE","CHANGE_MESSAGE","INITIAL_BOARD","indexes","forEach","index","INITIAL_STATE","phase","selectedPawn","selectedSquare","selectedPattern","buildings","board","message","state","action","type","payload","possibleActions","find","el","filter","cell"],"mappings":"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","sourcesContent":["import { RESOURCE_PHASE, EMPTY_SQUARE } from './../components/constants';\r\n\r\nimport { messageSelectResource } from './../components/messages';\r\n\r\nimport {\r\n    SELECT_PAWN,\r\n    SELECT_SQUARE,\r\n    SELECT_PATTERN,\r\n    CLEAR_SELECTION,\r\n    PLACE_RESOURCE,\r\n    PLACE_BUILDING,\r\n    FETCH_BUILDING,\r\n    CHANGE_PHASE,\r\n    CHANGE_MESSAGE\r\n\r\n} from '../actions/types'\r\n\r\nconst INITIAL_BOARD = {\r\n    indexes: [11, 12, 13, 14, 21, 22, 23, 24, 31, 32, 33, 34, 41, 42, 43, 44]\r\n}\r\n\r\nINITIAL_BOARD.indexes.forEach(index => {\r\n    INITIAL_BOARD[index] = EMPTY_SQUARE;\r\n});\r\n//  11: \"BLOCK\",\r\n///  12: \"wheat\",\r\n\r\nconst INITIAL_STATE = {\r\n    phase: RESOURCE_PHASE,\r\n    // phase: BUILDING_PHASE,\r\n    selectedPawn: null,\r\n    selectedSquare: null,\r\n    selectedPattern: [],\r\n    buildings: [],\r\n    board: INITIAL_BOARD,\r\n    message: messageSelectResource()\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n\r\n        case CHANGE_PHASE:\r\n            return { ...state, phase: action.payload };\r\n\r\n        case CHANGE_MESSAGE:\r\n            return { ...state, possibleActions: action.payload };\r\n\r\n        case SELECT_PAWN:\r\n            return { ...state, selectedPawn: action.payload };\r\n\r\n        case SELECT_SQUARE:\r\n            //state.board.selectedSquare = action.payload;\r\n            return { ...state, selectedSquare: action.payload };\r\n\r\n        case SELECT_PATTERN:\r\n            if (state.selectedPattern.find(el => el === action.payload)) {\r\n                return { ...state, selectedPattern: state.selectedPattern.filter(el => el !== action.payload) };\r\n            }\r\n            return { ...state, selectedPattern: [...state.selectedPattern, action.payload] };\r\n\r\n        case CLEAR_SELECTION:\r\n            //state.board.selectedSquare = action.payload;\r\n            return { ...state, selectedSquare: null, selectedPattern: [], selectedPawn: null };\r\n\r\n        case FETCH_BUILDING:\r\n            return { ...state, buildings: [...state.buildings, action.payload] };\r\n\r\n\r\n        case PLACE_RESOURCE:\r\n            return { ...state, board: { ...state.board, [state.selectedSquare]: state.selectedPawn }, selectedSquare: null, selectedPawn: null };\r\n\r\n        case PLACE_BUILDING:\r\n            state.selectedPattern.forEach(cell => {\r\n                state.board[cell] = EMPTY_SQUARE;\r\n            })\r\n            return { ...state, board: { ...state.board, [state.selectedSquare]: state.selectedPawn }, selectedSquare: null, selectedPawn: null, selectedPattern: [] };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\n\r\n/*import { combineReducers } from 'redux';\r\n\r\nimport selectedReducer from './selectedReducer';\r\n\r\n\r\nexport default combineReducers({\r\n    selected:selectedReducer\r\n\r\n});*/"]},"metadata":{},"sourceType":"module"}