{"ast":null,"code":"import _ from 'lodash'; //                        style={style(resource[0] % 10, Math.floor(resource[0] / 10))}\n//const d = (arr, index) => Math.min(...arr.map(cell => Number(cell.index))) - 1;\n\nexport const pointToIndex = (arr, title) => {\n  //move to x=1, y=1\n  const dx = d(arr, \"x\");\n  const dy = d(arr, \"y\");\n  arr.forEach(point => {\n    point.x -= dx;\n    point.y -= dy;\n  }); //[{x: \"1\", y: \"2\", resource: \"WOOD\"},...] -> [[12,\"WOOD\"],...]\n\n  return arr.map(point => {\n    const index = point.x * 10 + point.y;\n    return title ? [index, point.resource.title] : [index, point.resource]; //and sort by index\n  }).sort((a, b) => {\n    return a[0] - b[0];\n  });\n};\nexport const preparedPattern = (pattern, board) => {\n  const preparedPattern = pattern.map(cell => {\n    return {\n      x: cell.toString().charAt(0),\n      y: cell.toString().charAt(1),\n      resource: board[cell]\n    };\n  });\n  const dx = d(preparedPattern, \"x\");\n  const dy = d(preparedPattern, \"y\");\n  return preparedPattern.map(cell => {\n    return {\n      x: cell.x - dx,\n      y: cell.y - dy,\n      resource: cell.resource\n    };\n  });\n};\nexport const rotateAndMirrorPattern = pattern1 => {\n  //[[12,\"WOOD\"],...] -> [{x: \"1\", y: \"2\", resource: \"WOOD\"},...]\n  const indexToPoint = arr => arr.map(square => {\n    return {\n      x: square[0] % 10,\n      y: Math.floor(square[0] / 10),\n      resource: square[1]\n    };\n  }); // Move to 11, [{x: \"1\", y: \"2\", resource: \"WOOD\"},...] -> [[12,\"WOOD\"],...] and sort by index\n\n\n  const rotate = arr => arr.map(point => {\n    return {\n      x: -point.y,\n      y: point.x,\n      resource: point.resource\n    };\n  });\n\n  const mirrorX = arr => arr.map(point => {\n    return {\n      x: -point.x,\n      y: point.y,\n      resource: point.resource\n    };\n  });\n\n  const mirrorY = arr => arr.map(point => {\n    return {\n      x: point.x,\n      y: -point.y,\n      resource: point.resource\n    };\n  });\n\n  console.log(indexToPoint(pattern1));\n  const rotated0pattern = indexToPoint(pattern1);\n  console.log(rotated0pattern);\n  const rotated1pattern = rotate(rotated0pattern);\n  const rotated2pattern = rotate(rotated1pattern);\n  const rotated3pattern = rotate(rotated2pattern);\n  const rez = [rotated0pattern, mirrorY(rotated0pattern), mirrorX(rotated0pattern), rotated1pattern, mirrorX(rotated1pattern), mirrorY(rotated1pattern), rotated2pattern, mirrorX(rotated2pattern), mirrorY(rotated2pattern), rotated3pattern, mirrorX(rotated3pattern), mirrorY(rotated3pattern)].map(pointPattern => pointToIndex(pointPattern));\n  return _.uniqWith(rez, _.isEqual);\n};","map":{"version":3,"sources":["D:\\Pro\\React\\tlt\\src\\components\\Buildings\\patternHandler.js"],"names":["_","pointToIndex","arr","title","dx","d","dy","forEach","point","x","y","map","index","resource","sort","a","b","preparedPattern","pattern","board","cell","toString","charAt","rotateAndMirrorPattern","pattern1","indexToPoint","square","Math","floor","rotate","mirrorX","mirrorY","console","log","rotated0pattern","rotated1pattern","rotated2pattern","rotated3pattern","rez","pointPattern","uniqWith","isEqual"],"mappings":"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","sourcesContent":["import _ from 'lodash';\r\n//                        style={style(resource[0] % 10, Math.floor(resource[0] / 10))}\r\n\r\n//const d = (arr, index) => Math.min(...arr.map(cell => Number(cell.index))) - 1;\r\n\r\nexport const pointToIndex = (arr, title) => {\r\n    //move to x=1, y=1\r\n    const dx = d(arr, \"x\");\r\n    const dy = d(arr, \"y\");\r\n    arr.forEach(point => {\r\n        point.x -= dx;\r\n        point.y -= dy;\r\n    });\r\n    //[{x: \"1\", y: \"2\", resource: \"WOOD\"},...] -> [[12,\"WOOD\"],...]\r\n    return arr.map(point => {\r\n        const index = point.x * 10 + point.y;\r\n        return title ? [index, point.resource.title] : [index, point.resource]\r\n        //and sort by index\r\n    }).sort((a, b) => { return a[0] - b[0] });\r\n}\r\n\r\nexport const preparedPattern = (pattern, board) => {\r\n\r\n    const preparedPattern = pattern.map(cell => {\r\n        return {\r\n            x: cell.toString().charAt(0),\r\n            y: cell.toString().charAt(1),\r\n            resource: board[cell]\r\n        }\r\n    });\r\n\r\n    const dx = d(preparedPattern, \"x\");\r\n    const dy = d(preparedPattern, \"y\");\r\n\r\n    return preparedPattern.map(cell => {\r\n        return {\r\n            x: cell.x - dx,\r\n            y: cell.y - dy,\r\n            resource: cell.resource\r\n        }\r\n    });\r\n}\r\n\r\nexport const rotateAndMirrorPattern = pattern1 => {\r\n    //[[12,\"WOOD\"],...] -> [{x: \"1\", y: \"2\", resource: \"WOOD\"},...]\r\n    const indexToPoint = arr => arr.map(square => {\r\n        return {\r\n            x: square[0] % 10,\r\n            y: Math.floor(square[0] / 10),\r\n            resource: square[1]\r\n        }\r\n    });\r\n\r\n    // Move to 11, [{x: \"1\", y: \"2\", resource: \"WOOD\"},...] -> [[12,\"WOOD\"],...] and sort by index\r\n\r\n\r\n    const rotate = arr => arr.map(point => { return { x: -point.y, y: point.x, resource: point.resource } });\r\n\r\n    const mirrorX = arr => arr.map(point => { return { x: -point.x, y: point.y, resource: point.resource } });\r\n\r\n    const mirrorY = arr => arr.map(point => { return { x: point.x, y: -point.y, resource: point.resource } });\r\n\r\n    console.log(indexToPoint(pattern1));\r\n\r\n    const rotated0pattern = indexToPoint(pattern1);\r\n\r\n    console.log(rotated0pattern);\r\n\r\n    const rotated1pattern = rotate(rotated0pattern);\r\n    const rotated2pattern = rotate(rotated1pattern);\r\n    const rotated3pattern = rotate(rotated2pattern);\r\n\r\n\r\n\r\n\r\n    const rez = [\r\n        rotated0pattern,\r\n        mirrorY(rotated0pattern),\r\n        mirrorX(rotated0pattern),\r\n\r\n        rotated1pattern,\r\n        mirrorX(rotated1pattern),\r\n        mirrorY(rotated1pattern),\r\n\r\n        rotated2pattern,\r\n        mirrorX(rotated2pattern),\r\n        mirrorY(rotated2pattern),\r\n\r\n        rotated3pattern,\r\n        mirrorX(rotated3pattern),\r\n        mirrorY(rotated3pattern)\r\n    ].map(pointPattern => pointToIndex(pointPattern));\r\n\r\n    return _.uniqWith(rez, _.isEqual);\r\n}"]},"metadata":{},"sourceType":"module"}