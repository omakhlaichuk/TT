{"ast":null,"code":"var _jsxFileName = \"D:\\\\Pro\\\\React\\\\tlt\\\\src\\\\components\\\\Square.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport '../css/square.css';\nimport { selectSquare, selectPattern, changeMessage } from './../actions';\nimport { RESOURCE_PHASE, BUILDING_PHASE, EMPTY_SQUARE, RESOURCE } from './constants';\nimport { messageConfirmResourcePlacement } from './messages';\n\nclass Square extends React.Component {\n  onCellClick(phase) {\n    const filling = this.props.cell;\n\n    if (this.props.phase === RESOURCE_PHASE) {\n      if (filling === EMPTY_SQUARE) {\n        //empty squares can be selected for resource placing\n        this.props.selectSquare(this.props.index);\n\n        if (this.props.selectedPawn) {\n          this.props.changeMessage(messageConfirmResourcePlacement(this.props.selectedPawn));\n        }\n      } else {\n        this.props.selectSquare(null);\n      }\n    } else if (this.props.phase === BUILDING_PHASE) {\n      if (this.props.selectedPawn === null && RESOURCE.find(resource => resource === filling)) {\n        //select resorces to check pattern\n        this.props.selectPattern(this.props.index);\n      } else if (this.props.selectedPawn) {\n        //select square for placing building\n        //TODO: add property to build anywhere\n        if (this.props.selectedPattern.find(cell => cell === this.props.index)) {\n          this.props.selectSquare(this.props.index);\n          this.props.changeMessage(\"это подходящее место для установки этого здани, подтвердите его размещение\");\n        }\n      }\n    }\n  }\n\n  render() {\n    //style cells\n    let cellCalss = \"cell\";\n\n    if (this.props.selectedSquare === this.props.index) {\n      cellCalss += \" selectedCell\";\n    }\n\n    if (this.props.selectedPattern.find(el => el === this.props.index)) {\n      cellCalss += \" patternedCell\";\n    }\n\n    return React.createElement(\"div\", {\n      className: cellCalss,\n      onClick: () => {\n        this.onCellClick();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, this.props.cell);\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    cell: state.board[ownProps.index],\n    selectedSquare: state.selectedSquare,\n    selectedPattern: state.selectedPattern,\n    selectedPawn: state.selectedPawn,\n    phase: state.phase\n  };\n};\n\nexport default connect(mapStateToProps, {\n  selectSquare,\n  selectPattern,\n  changeMessage\n})(Square);","map":{"version":3,"sources":["D:\\Pro\\React\\tlt\\src\\components\\Square.js"],"names":["React","connect","selectSquare","selectPattern","changeMessage","RESOURCE_PHASE","BUILDING_PHASE","EMPTY_SQUARE","RESOURCE","messageConfirmResourcePlacement","Square","Component","onCellClick","phase","filling","props","cell","index","selectedPawn","find","resource","selectedPattern","render","cellCalss","selectedSquare","el","mapStateToProps","state","ownProps","board"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAO,mBAAP;AACA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,aAAtC,QAA2D,cAA3D;AACA,SACIC,cADJ,EAEIC,cAFJ,EAGIC,YAHJ,EAIIC,QAJJ,QAKO,aALP;AAMA,SAASC,+BAAT,QAAgD,YAAhD;;AAEA,MAAMC,MAAN,SAAqBV,KAAK,CAACW,SAA3B,CAAqC;AAEjCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMC,OAAO,GAAG,KAAKC,KAAL,CAAWC,IAA3B;;AAEA,QAAI,KAAKD,KAAL,CAAWF,KAAX,KAAqBR,cAAzB,EAAyC;AACrC,UAAIS,OAAO,KAAKP,YAAhB,EAA8B;AAC1B;AACA,aAAKQ,KAAL,CAAWb,YAAX,CAAwB,KAAKa,KAAL,CAAWE,KAAnC;;AACA,YAAI,KAAKF,KAAL,CAAWG,YAAf,EAA6B;AACzB,eAAKH,KAAL,CAAWX,aAAX,CACIK,+BAA+B,CAAC,KAAKM,KAAL,CAAWG,YAAZ,CADnC;AAGH;AACJ,OARD,MAQO;AAAE,aAAKH,KAAL,CAAWb,YAAX,CAAwB,IAAxB;AAA+B;AAC3C,KAVD,MAUO,IAAI,KAAKa,KAAL,CAAWF,KAAX,KAAqBP,cAAzB,EAAyC;AAC5C,UAAI,KAAKS,KAAL,CAAWG,YAAX,KAA4B,IAA5B,IACAV,QAAQ,CAACW,IAAT,CAAcC,QAAQ,IAAIA,QAAQ,KAAKN,OAAvC,CADJ,EACsD;AAClD;AACA,aAAKC,KAAL,CAAWZ,aAAX,CAAyB,KAAKY,KAAL,CAAWE,KAApC;AACH,OAJD,MAIO,IAAI,KAAKF,KAAL,CAAWG,YAAf,EAA6B;AAChC;AACA;AACA,YAAI,KAAKH,KAAL,CAAWM,eAAX,CAA2BF,IAA3B,CAAgCH,IAAI,IAAIA,IAAI,KAAK,KAAKD,KAAL,CAAWE,KAA5D,CAAJ,EAAwE;AACpE,eAAKF,KAAL,CAAWb,YAAX,CAAwB,KAAKa,KAAL,CAAWE,KAAnC;AACA,eAAKF,KAAL,CAAWX,aAAX,CAAyB,4EAAzB;AAEH;AACJ;AACJ;AACJ;;AAEDkB,EAAAA,MAAM,GAAG;AACL;AACA,QAAIC,SAAS,GAAG,MAAhB;;AACA,QAAI,KAAKR,KAAL,CAAWS,cAAX,KAA8B,KAAKT,KAAL,CAAWE,KAA7C,EAAoD;AAAEM,MAAAA,SAAS,IAAI,eAAb;AAA+B;;AACrF,QAAI,KAAKR,KAAL,CAAWM,eAAX,CAA2BF,IAA3B,CAAgCM,EAAE,IAAIA,EAAE,KAAK,KAAKV,KAAL,CAAWE,KAAxD,CAAJ,EAAoE;AAAEM,MAAAA,SAAS,IAAI,gBAAb;AAA+B;;AAErG,WACI;AAAK,MAAA,SAAS,EAAEA,SAAhB;AAA2B,MAAA,OAAO,EAAE,MAAM;AAAE,aAAKX,WAAL;AAAoB,OAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKG,KAAL,CAAWC,IADhB,CADJ;AAKH;;AA3CgC;;AA8CrC,MAAMU,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACzC,SAAO;AACHZ,IAAAA,IAAI,EAAEW,KAAK,CAACE,KAAN,CAAYD,QAAQ,CAACX,KAArB,CADH;AAEHO,IAAAA,cAAc,EAAEG,KAAK,CAACH,cAFnB;AAGHH,IAAAA,eAAe,EAAEM,KAAK,CAACN,eAHpB;AAIHH,IAAAA,YAAY,EAAES,KAAK,CAACT,YAJjB;AAKHL,IAAAA,KAAK,EAAEc,KAAK,CAACd;AALV,GAAP;AAOH,CARD;;AAUA,eAAeZ,OAAO,CAACyB,eAAD,EAAkB;AAAExB,EAAAA,YAAF;AAAgBC,EAAAA,aAAhB;AAA+BC,EAAAA;AAA/B,CAAlB,CAAP,CAAyEM,MAAzE,CAAf","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport '../css/square.css';\r\nimport { selectSquare, selectPattern, changeMessage } from './../actions';\r\nimport {\r\n    RESOURCE_PHASE,\r\n    BUILDING_PHASE,\r\n    EMPTY_SQUARE,\r\n    RESOURCE,\r\n} from './constants';\r\nimport { messageConfirmResourcePlacement } from './messages';\r\n\r\nclass Square extends React.Component {\r\n\r\n    onCellClick(phase) {\r\n        const filling = this.props.cell;\r\n\r\n        if (this.props.phase === RESOURCE_PHASE) {\r\n            if (filling === EMPTY_SQUARE) {\r\n                //empty squares can be selected for resource placing\r\n                this.props.selectSquare(this.props.index);\r\n                if (this.props.selectedPawn) {\r\n                    this.props.changeMessage(\r\n                        messageConfirmResourcePlacement(this.props.selectedPawn)\r\n                    );\r\n                }\r\n            } else { this.props.selectSquare(null) }\r\n        } else if (this.props.phase === BUILDING_PHASE) {\r\n            if (this.props.selectedPawn === null && (\r\n                RESOURCE.find(resource => resource === filling))) {\r\n                //select resorces to check pattern\r\n                this.props.selectPattern(this.props.index);\r\n            } else if (this.props.selectedPawn) {\r\n                //select square for placing building\r\n                //TODO: add property to build anywhere\r\n                if (this.props.selectedPattern.find(cell => cell === this.props.index)) {\r\n                    this.props.selectSquare(this.props.index);\r\n                    this.props.changeMessage(\"это подходящее место для установки этого здани, подтвердите его размещение\");\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        //style cells\r\n        let cellCalss = \"cell\";\r\n        if (this.props.selectedSquare === this.props.index) { cellCalss += \" selectedCell\"; }\r\n        if (this.props.selectedPattern.find(el => el === this.props.index)) { cellCalss += \" patternedCell\" }\r\n\r\n        return (\r\n            <div className={cellCalss} onClick={() => { this.onCellClick() }}>\r\n                {this.props.cell}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        cell: state.board[ownProps.index],\r\n        selectedSquare: state.selectedSquare,\r\n        selectedPattern: state.selectedPattern,\r\n        selectedPawn: state.selectedPawn,\r\n        phase: state.phase\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, { selectSquare, selectPattern, changeMessage })(Square);\r\n\r\n"]},"metadata":{},"sourceType":"module"}