{"ast":null,"code":"import _objectSpread from \"D:\\\\Pro\\\\React\\\\tlt\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { INITIAL_STATE, EMPTY_SQUARE, RESOURCE } from './../components/constants';\nimport { SELECT_PAWN, SELECT_SQUARE, SELECT_PATTERN, CLEAR_SELECTION, PLACE_RESOURCE, PLACE_BUILDING, FETCH_BUILDING, FEED_COTTAGES, CHANGE_PHASE, CHANGE_MESSAGE } from '../actions/types';\nexport default ((state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case CHANGE_PHASE:\n      return _objectSpread({}, state, {\n        phase: action.payload\n      });\n\n    case CHANGE_MESSAGE:\n      return _objectSpread({}, state, {\n        message: action.payload\n      });\n\n    case SELECT_PAWN:\n      return _objectSpread({}, state, {\n        selectedPawn: action.payload\n      });\n\n    case SELECT_SQUARE:\n      return _objectSpread({}, state, {\n        selectedSquare: action.payload\n      });\n\n    case SELECT_PATTERN:\n      if (state.selectedPattern.find(el => el === action.payload)) {\n        return _objectSpread({}, state, {\n          selectedPattern: state.selectedPattern.filter(el => el !== action.payload)\n        });\n      }\n\n      return _objectSpread({}, state, {\n        selectedPattern: [...state.selectedPattern, action.payload]\n      });\n\n    case CLEAR_SELECTION:\n      return _objectSpread({}, state, {\n        selectedSquare: null,\n        selectedPattern: [],\n        selectedPawn: {}\n      });\n\n    case FETCH_BUILDING:\n      return _objectSpread({}, state, {\n        buildings: [...state.buildings, action.payload]\n      });\n    //find placing recourse and move it to the end of line. Update Board with the recourse. Clear \"selected\"\n\n    case PLACE_RESOURCE:\n      const moveFromIndex = state.resources.indexOf(state.selectedPawn);\n      const movingResource = state.resources[moveFromIndex];\n      state.resources.splice(moveFromIndex, 1);\n      return _objectSpread({}, state, {\n        board: _objectSpread({}, state.board, {\n          [state.selectedSquare]: state.selectedPawn\n        }),\n        selectedSquare: null,\n        selectedPawn: {},\n        resources: [...state.resources, movingResource]\n      });\n\n    case PLACE_BUILDING:\n      state.selectedPattern.forEach(square => {\n        // remove resource only\n        if (state.board[square].type === RESOURCE) {\n          state.board[square] = EMPTY_SQUARE;\n        }\n      });\n      return _objectSpread({}, state, {\n        board: _objectSpread({}, state.board, {\n          [state.selectedSquare]: state.selectedPawn\n        }),\n        selectedSquare: null,\n        selectedPawn: {},\n        selectedPattern: []\n      });\n\n    case FEED_COTTAGES:\n      return _objectSpread({}, state, {\n        board: _objectSpread({}, state.board, {\n          fedCottages: action.payload\n        })\n      });\n\n    default:\n      return state;\n  }\n});\n/*import { combineReducers } from 'redux';\r\n\r\nimport selectedReducer from './selectedReducer';\r\n\r\n\r\nexport default combineReducers({\r\n    selected:selectedReducer\r\n\r\n});*/","map":{"version":3,"sources":["D:\\Pro\\React\\tlt\\src\\reducers\\index.js"],"names":["INITIAL_STATE","EMPTY_SQUARE","RESOURCE","SELECT_PAWN","SELECT_SQUARE","SELECT_PATTERN","CLEAR_SELECTION","PLACE_RESOURCE","PLACE_BUILDING","FETCH_BUILDING","FEED_COTTAGES","CHANGE_PHASE","CHANGE_MESSAGE","state","action","type","phase","payload","message","selectedPawn","selectedSquare","selectedPattern","find","el","filter","buildings","moveFromIndex","resources","indexOf","movingResource","splice","board","forEach","square","fedCottages"],"mappings":"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","sourcesContent":["import { INITIAL_STATE, EMPTY_SQUARE, RESOURCE } from './../components/constants';\r\n\r\nimport {\r\n    SELECT_PAWN,\r\n    SELECT_SQUARE,\r\n    SELECT_PATTERN,\r\n    CLEAR_SELECTION,\r\n    PLACE_RESOURCE,\r\n    PLACE_BUILDING,\r\n    FETCH_BUILDING,\r\n    FEED_COTTAGES,\r\n    CHANGE_PHASE,\r\n    CHANGE_MESSAGE\r\n\r\n} from '../actions/types'\r\n\r\n\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n\r\n        case CHANGE_PHASE:\r\n            return { ...state, phase: action.payload };\r\n\r\n        case CHANGE_MESSAGE:\r\n            return { ...state, message: action.payload };\r\n\r\n        case SELECT_PAWN:\r\n            return { ...state, selectedPawn: action.payload };\r\n\r\n        case SELECT_SQUARE:\r\n            return { ...state, selectedSquare: action.payload };\r\n\r\n        case SELECT_PATTERN:\r\n            if (state.selectedPattern.find(el => el === action.payload)) {\r\n                return { ...state, selectedPattern: state.selectedPattern.filter(el => el !== action.payload) };\r\n            }\r\n            return { ...state, selectedPattern: [...state.selectedPattern, action.payload] };\r\n\r\n        case CLEAR_SELECTION:\r\n            return { ...state, selectedSquare: null, selectedPattern: [], selectedPawn: {} };\r\n\r\n        case FETCH_BUILDING:\r\n            return { ...state, buildings: [...state.buildings, action.payload] };\r\n\r\n        //find placing recourse and move it to the end of line. Update Board with the recourse. Clear \"selected\"\r\n        case PLACE_RESOURCE:\r\n            const moveFromIndex = state.resources.indexOf(state.selectedPawn);\r\n            const movingResource = state.resources[moveFromIndex];\r\n            state.resources.splice(moveFromIndex, 1);\r\n            return {\r\n                ...state,\r\n                board: { ...state.board, [state.selectedSquare]: state.selectedPawn },\r\n                selectedSquare: null,\r\n                selectedPawn: {},\r\n                resources: [...state.resources, movingResource]\r\n            };\r\n\r\n        case PLACE_BUILDING:\r\n            state.selectedPattern.forEach(square => {\r\n                // remove resource only\r\n                if (state.board[square].type === RESOURCE) {\r\n                    state.board[square] = EMPTY_SQUARE;\r\n                }\r\n            })\r\n            return { ...state, board: { ...state.board, [state.selectedSquare]: state.selectedPawn }, selectedSquare: null, selectedPawn: {}, selectedPattern: [] };\r\n\r\n        case FEED_COTTAGES:\r\n            return { ...state, board: { ...state.board, fedCottages: action.payload } };\r\n\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\n\r\n/*import { combineReducers } from 'redux';\r\n\r\nimport selectedReducer from './selectedReducer';\r\n\r\n\r\nexport default combineReducers({\r\n    selected:selectedReducer\r\n\r\n});*/"]},"metadata":{},"sourceType":"module"}