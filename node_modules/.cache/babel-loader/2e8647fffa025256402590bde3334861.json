{"ast":null,"code":"var _jsxFileName = \"D:\\\\Pro\\\\React\\\\tlt\\\\src\\\\components\\\\Toolbar.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { changePhaseTo, placeResource, clearSelection, placeBuilding, changeMessage } from '../actions';\nimport { message, RESOURCE_PHASE, BUILDING_PHASE, SCORING_PHASE, EMPTY_SQUARE } from './constants'; //import  {  messageShowPattern, messageSelectResource } from './messages';\n\nclass Toolbar extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.plasePawn = () => {\n      if (this.props.phase === RESOURCE_PHASE && this.props.selectedPawn && this.props.selectedSquare) {\n        //place the resource to the grid\n        this.props.placeResource();\n        this.props.clearSelection();\n        this.props.changePhaseTo(BUILDING_PHASE);\n        this.props.changeMessage(message.showPattern);\n      } else if (this.props.phase === BUILDING_PHASE && this.props.selectedPawn && this.props.selectedSquare) {\n        //place the building to the grid & removing the resources\n        if (\"Square for placing suitable\") {\n          this.props.placeBuilding(); // this.props.clearSelection();\n\n          this.props.changeMessage(\"вы успешно поставили здание, можете поставить еще!\");\n        } else {\n          this.props.changeMessage(\"в это место нельзя поставить здание, попробуйте другое место! - сейчас место не выбирает\");\n        }\n      }\n\n      ;\n    };\n\n    this.nextRound = () => {\n      if (this.props.phase === BUILDING_PHASE) {\n        this.props.clearSelection(); //check end of game\n\n        if (this.props.board.indexes.find(i => this.props.board[i] === EMPTY_SQUARE)) {\n          this.props.changePhaseTo(RESOURCE_PHASE);\n          this.props.changeMessage(messag.selectResource());\n        } else {\n          this.props.changePhaseTo(SCORING_PHASE);\n          this.props.changeMessage(\"Переходим к подсчету очков?\");\n        }\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"Phase: \", this.props.phase, \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), this.props.message, \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.plasePawn(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Place\"), React.createElement(\"button\", {\n      onClick: () => this.nextRound(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"NEXT\"));\n  }\n\n}\n\n;\n\nconst mapStateToProps = state => {\n  return {\n    selectedPawn: state.selectedPawn,\n    selectedSquare: state.selectedSquare,\n    phase: state.phase,\n    board: state.board,\n    message: state.message\n  };\n};\n\nexport default connect(mapStateToProps, {\n  changePhaseTo,\n  placeResource,\n  clearSelection,\n  placeBuilding,\n  changeMessage\n})(Toolbar);","map":{"version":3,"sources":["D:\\Pro\\React\\tlt\\src\\components\\Toolbar.js"],"names":["React","connect","changePhaseTo","placeResource","clearSelection","placeBuilding","changeMessage","message","RESOURCE_PHASE","BUILDING_PHASE","SCORING_PHASE","EMPTY_SQUARE","Toolbar","Component","plasePawn","props","phase","selectedPawn","selectedSquare","showPattern","nextRound","board","indexes","find","i","messag","selectResource","render","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport {  changePhaseTo, placeResource, clearSelection, placeBuilding, changeMessage } from '../actions';\r\nimport {\r\n    message,\r\n    RESOURCE_PHASE,\r\n    BUILDING_PHASE,\r\n    SCORING_PHASE,\r\n    EMPTY_SQUARE\r\n} from './constants';\r\n//import  {  messageShowPattern, messageSelectResource } from './messages';\r\n\r\n\r\nclass Toolbar extends React.Component {\r\n\r\n    plasePawn = () => {\r\n        if (this.props.phase === RESOURCE_PHASE && this.props.selectedPawn && this.props.selectedSquare) {\r\n            //place the resource to the grid\r\n            this.props.placeResource();\r\n            this.props.clearSelection();\r\n            this.props.changePhaseTo(BUILDING_PHASE);\r\n            this.props.changeMessage(message.showPattern);\r\n        } else if (this.props.phase === BUILDING_PHASE && this.props.selectedPawn && this.props.selectedSquare) {\r\n            //place the building to the grid & removing the resources\r\n            if (\"Square for placing suitable\") {\r\n                 this.props.placeBuilding();\r\n                // this.props.clearSelection();\r\n                this.props.changeMessage(\"вы успешно поставили здание, можете поставить еще!\");\r\n            } else {\r\n                this.props.changeMessage(\"в это место нельзя поставить здание, попробуйте другое место! - сейчас место не выбирает\");\r\n\r\n            }\r\n               \r\n        };\r\n    }\r\n    //after resource placing new round can be started\r\n    nextRound = () => {\r\n        if (this.props.phase === BUILDING_PHASE) {\r\n            this.props.clearSelection();\r\n\r\n            //check end of game\r\n            if (this.props.board.indexes.find(i => this.props.board[i] === EMPTY_SQUARE)) {\r\n                this.props.changePhaseTo(RESOURCE_PHASE);\r\n                this.props.changeMessage(messag.selectResource());\r\n            } else {\r\n                this.props.changePhaseTo(SCORING_PHASE);\r\n                this.props.changeMessage(\"Переходим к подсчету очков?\");\r\n            }         \r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                Phase: {this.props.phase} <br />\r\n                {this.props.message } <br />\r\n                <button onClick={() => this.plasePawn()}>Place</button>\r\n                <button onClick={() => this.nextRound()}>NEXT</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        selectedPawn: state.selectedPawn,\r\n        selectedSquare: state.selectedSquare,\r\n        phase: state.phase,\r\n        board: state.board,\r\n        message: state.message\r\n    }\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    { changePhaseTo, placeResource, clearSelection, placeBuilding, changeMessage }\r\n)(Toolbar);\r\n"]},"metadata":{},"sourceType":"module"}