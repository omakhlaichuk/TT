{"ast":null,"code":"var _jsxFileName = \"D:\\\\Pro\\\\React\\\\tlt\\\\src\\\\components\\\\Resources.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { selectResource, changePhaseTo, changePlayerTo } from '../actions';\n\nclass Resources extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.resourceSelection = resource => {\n      if (this.props.phase === \"PHASE_CHOOSING_RESOURCE\") {\n        if (resource !== \"?\") {\n          this.props.selectResource(resource);\n        } else {\n          //TODO change to ONE card random - \n          this.props.selectResource(\"random resource\");\n        }\n      }\n    };\n\n    this.resourcePlacing = () => {\n      if (this.props.phase === \"PHASE_CHOOSING_RESOURCE\") {\n        this.props.changePhaseTo(\"PHASE_PLACING_RESOURCE\");\n        const nextFirstPlayer = this.props.firstPlayer === \"player\" ? \"random\" : \"player\";\n        this.props.changePlayerTo(nextFirstPlayer);\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, (() => {\n      if (this.props.firstPlayer === \"player\") {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37\n          },\n          __self: this\n        }, \"Select resource:\", React.createElement(\"button\", {\n          onClick: () => {\n            this.resourceSelection(\"Wood\");\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        }, \"Wood\"), React.createElement(\"button\", {\n          onClick: () => {\n            this.resourceSelection(\"Wheat\");\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          },\n          __self: this\n        }, \"Wheat\"), React.createElement(\"button\", {\n          onClick: () => {\n            this.resourceSelection(\"Brick\");\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        }, \"Brick\"), React.createElement(\"button\", {\n          onClick: () => {\n            this.resourceSelection(\"Glass\");\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        }, \"Glass\"), React.createElement(\"button\", {\n          onClick: () => {\n            this.resourceSelection(\"Stone\");\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }, \"Stone\"), \"Selected:\", React.createElement(\"button\", {\n          onClick: () => {\n            this.resourcePlacing();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        }, this.props.selectedResource));\n      } else {\n        return React.createElement(\"button\", {\n          onClick: () => {\n            this.resourceSelection(\"?\");\n            this.resourcePlacing();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }, this.props.selectedResource || \"Get random resource\");\n      }\n    })());\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    selectedResource: state.selectedResource,\n    phase: state.phase,\n    firstPlayer: state.firstPlayer\n  };\n};\n\nexport default connect(mapStateToProps, {\n  selectResource,\n  changePhaseTo,\n  changePlayerTo\n})(Resources);","map":{"version":3,"sources":["D:\\Pro\\React\\tlt\\src\\components\\Resources.js"],"names":["React","connect","selectResource","changePhaseTo","changePlayerTo","Resources","Component","resourceSelection","resource","props","phase","resourcePlacing","nextFirstPlayer","firstPlayer","render","selectedResource","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { selectResource, changePhaseTo, changePlayerTo } from '../actions';\r\n\r\n\r\nclass Resources extends React.Component {\r\n    //During PHASE_CHOOSING_RESOURCE If you the first player you can select one of 5 resources\r\n    //if you are the second - get random resource.\r\n    resourceSelection = resource => {\r\n        if (this.props.phase === \"PHASE_CHOOSING_RESOURCE\") {\r\n            if (resource !== \"?\") {\r\n                this.props.selectResource(resource);\r\n            } else {\r\n                //TODO change to ONE card random - \r\n                this.props.selectResource(\"random resource\");\r\n            }\r\n        }\r\n    }\r\n\r\n    //Player's going to placing the resource after it was chosen\r\n    resourcePlacing = () => {\r\n        if (this.props.phase === \"PHASE_CHOOSING_RESOURCE\") {\r\n            this.props.changePhaseTo(\"PHASE_PLACING_RESOURCE\");\r\n            const nextFirstPlayer = this.props.firstPlayer === \"player\" ? \"random\" : \"player\";\r\n            this.props.changePlayerTo(nextFirstPlayer);\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {(() => {\r\n                    if (this.props.firstPlayer === \"player\") {\r\n                        return (\r\n                            <div>Select resource:\r\n                                <button onClick={() => { this.resourceSelection(\"Wood\") }}>Wood</button>\r\n                                <button onClick={() => { this.resourceSelection(\"Wheat\") }}>Wheat</button>\r\n                                <button onClick={() => { this.resourceSelection(\"Brick\") }}>Brick</button>\r\n                                <button onClick={() => { this.resourceSelection(\"Glass\") }}>Glass</button>\r\n                                <button onClick={() => { this.resourceSelection(\"Stone\") }}>Stone</button>\r\n                                Selected:\r\n                                <button onClick={() => { this.resourcePlacing() }}>\r\n                                    {this.props.selectedResource}\r\n                                </button>\r\n                            </div>\r\n                        );\r\n                    } else {\r\n                        return <button\r\n                            onClick={() => {\r\n                                this.resourceSelection(\"?\");\r\n                                this.resourcePlacing();\r\n                            }}>{this.props.selectedResource || \"Get random resource\"}\r\n                        </button>\r\n                    }\r\n                })()}\r\n\r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        selectedResource: state.selectedResource,\r\n        phase: state.phase,\r\n        firstPlayer: state.firstPlayer\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, { selectResource, changePhaseTo, changePlayerTo })(Resources);\r\n"]},"metadata":{},"sourceType":"module"}