{"ast":null,"code":"var _jsxFileName = \"D:\\\\Pro\\\\React\\\\tlt\\\\src\\\\components\\\\Square.js\";\nimport React from 'react';\nimport { connect } from 'react-redux'; //import '../css/square.css';\n\nimport { selectSquare, selectPattern, changeMessage } from './../actions';\nimport { message, RESOURCE_PHASE, BUILDING_PHASE, EMPTY_SQUARE, RESOURCE } from './constants'; //import { messageConfirmResourcePlacement } from './messages';\n\nclass Square extends React.Component {\n  onCellClick(phase) {\n    const filling = this.props.square; //select empty square for resource placing\n\n    if (this.props.selectedPawn.type === RESOURCE && filling === EMPTY_SQUARE) {\n      this.props.selectSquare(this.props.index);\n      this.props.changeMessage(message.confirmResourcePlacement(this.props.selectedPawn.title));\n    } //select square for the building placing\n\n\n    if (this.props.selectedPawn.type >= 0) {\n      if (this.props.selectedPattern.find(cell => cell === this.props.index)) {\n        this.props.selectSquare(this.props.index);\n        this.props.changeMessage(message.confirmBuildingPlacement(this.props.selectedPawn.title));\n      }\n    } //mark square as pattern\n\n\n    if (!this.props.selectedPawn.title && filling.type === RESOURCE) {\n      this.props.selectPattern(this.props.index);\n    }\n    /*\r\n            if (this.props.phase === RESOURCE_PHASE) {\r\n                if (filling === EMPTY_SQUARE) {\r\n                    //empty squares can be selected for resource placing\r\n                    this.props.selectSquare(this.props.index);\r\n                    if (this.props.selectedPawn.title) {\r\n                        this.props.changeMessage(\r\n                            message.confirmResourcePlacement(this.props.selectedPawn.title)\r\n                        );\r\n                    }\r\n                } else { this.props.selectSquare(null) }\r\n            } else if (this.props.phase === BUILDING_PHASE) {\r\n                if (!this.props.selectedPawn.title && filling.type === RESOURCE) {\r\n                    //select resorces to check pattern\r\n                    this.props.selectPattern(this.props.index);\r\n                } else if (this.props.selectedPawn.title) {\r\n                    //select square for placing building\r\n                    //TODO: add property to build anywhere\r\n                    if (this.props.selectedPattern.find(cell => cell === this.props.index)) {\r\n                        this.props.selectSquare(this.props.index);\r\n                        this.props.changeMessage(message.confirmBuildingPlacement(this.props.selectedPawn.title));\r\n                    }\r\n                }\r\n            }\r\n            */\n\n  }\n\n  renderIcon() {\n    if (this.props.square.type >= 0) {\n      return React.createElement(\"img\", {\n        src: \"/images/\".concat(this.props.square.type, \".png\"),\n        alt: this.props.square.type,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      });\n    }\n\n    if (this.props.selectedSquare === this.props.index && this.props.selectedPawn.type >= 0) {\n      return React.createElement(\"img\", {\n        src: \"/images/\".concat(this.props.selectedPawn.type, \".png\"),\n        alt: this.props.selectedPawn.type,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      });\n    }\n  }\n\n  render() {\n    //style cells\n    let squareCalss = \"\";\n\n    if (this.props.selectedSquare === this.props.index) {\n      squareCalss += \" selectedSquare \"; //console.log(this.props.selectedPawn.type);\n\n      if (this.props.selectedPawn.type === RESOURCE) {\n        squareCalss += this.props.selectedPawn.title.toLowerCase();\n      }\n    }\n\n    if (this.props.selectedPattern.find(el => el === this.props.index)) {\n      squareCalss += \" patternedSquare \";\n    }\n\n    if (this.props.square.type === RESOURCE) {\n      squareCalss += this.props.square.title.toLowerCase();\n    }\n\n    return React.createElement(\"li\", {\n      className: squareCalss,\n      onClick: () => {\n        this.onCellClick();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, this.renderIcon());\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    square: state.board[ownProps.index],\n    selectedSquare: state.selectedSquare,\n    selectedPattern: state.selectedPattern,\n    selectedPawn: state.selectedPawn,\n    phase: state.phase\n  };\n};\n\nexport default connect(mapStateToProps, {\n  selectSquare,\n  selectPattern,\n  changeMessage\n})(Square);","map":{"version":3,"sources":["D:\\Pro\\React\\tlt\\src\\components\\Square.js"],"names":["React","connect","selectSquare","selectPattern","changeMessage","message","RESOURCE_PHASE","BUILDING_PHASE","EMPTY_SQUARE","RESOURCE","Square","Component","onCellClick","phase","filling","props","square","selectedPawn","type","index","confirmResourcePlacement","title","selectedPattern","find","cell","confirmBuildingPlacement","renderIcon","selectedSquare","render","squareCalss","toLowerCase","el","mapStateToProps","state","ownProps","board"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\n//import '../css/square.css';\r\nimport { selectSquare, selectPattern, changeMessage } from './../actions';\r\nimport {\r\n    message,\r\n    RESOURCE_PHASE,\r\n    BUILDING_PHASE,\r\n    EMPTY_SQUARE,\r\n    RESOURCE\r\n} from './constants';\r\n//import { messageConfirmResourcePlacement } from './messages';\r\n\r\nclass Square extends React.Component {\r\n\r\n    onCellClick(phase) {\r\n        const filling = this.props.square;\r\n        \r\n        //select empty square for resource placing\r\n        if (this.props.selectedPawn.type === RESOURCE && filling === EMPTY_SQUARE) {\r\n            this.props.selectSquare(this.props.index);\r\n            this.props.changeMessage(\r\n                message.confirmResourcePlacement(this.props.selectedPawn.title)\r\n            );\r\n        }\r\n\r\n        //select square for the building placing\r\n        if (this.props.selectedPawn.type >= 0) {\r\n            if (this.props.selectedPattern.find(cell => cell === this.props.index)) {\r\n                this.props.selectSquare(this.props.index);\r\n                this.props.changeMessage(message.confirmBuildingPlacement(this.props.selectedPawn.title));\r\n            }\r\n        }\r\n\r\n        //mark square as pattern\r\n        if (!this.props.selectedPawn.title && filling.type === RESOURCE) {\r\n            this.props.selectPattern(this.props.index);\r\n        }\r\n/*\r\n        if (this.props.phase === RESOURCE_PHASE) {\r\n            if (filling === EMPTY_SQUARE) {\r\n                //empty squares can be selected for resource placing\r\n                this.props.selectSquare(this.props.index);\r\n                if (this.props.selectedPawn.title) {\r\n                    this.props.changeMessage(\r\n                        message.confirmResourcePlacement(this.props.selectedPawn.title)\r\n                    );\r\n                }\r\n            } else { this.props.selectSquare(null) }\r\n        } else if (this.props.phase === BUILDING_PHASE) {\r\n            if (!this.props.selectedPawn.title && filling.type === RESOURCE) {\r\n                //select resorces to check pattern\r\n                this.props.selectPattern(this.props.index);\r\n            } else if (this.props.selectedPawn.title) {\r\n                //select square for placing building\r\n                //TODO: add property to build anywhere\r\n                if (this.props.selectedPattern.find(cell => cell === this.props.index)) {\r\n                    this.props.selectSquare(this.props.index);\r\n                    this.props.changeMessage(message.confirmBuildingPlacement(this.props.selectedPawn.title));\r\n                }\r\n            }\r\n        }\r\n        */\r\n    }\r\n\r\n    renderIcon() {\r\n        if (this.props.square.type >=0)   {\r\n            return <img src={`/images/${this.props.square.type}.png`} alt={this.props.square.type} />\r\n        }\r\n\r\n        if(this.props.selectedSquare === this.props.index && this.props.selectedPawn.type >= 0 ){\r\n            return <img src={`/images/${this.props.selectedPawn.type}.png`} alt={this.props.selectedPawn.type} />\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        //style cells\r\n        let squareCalss = \"\";\r\n        if (this.props.selectedSquare === this.props.index) {\r\n            squareCalss += \" selectedSquare \";\r\n            //console.log(this.props.selectedPawn.type);\r\n            if (this.props.selectedPawn.type === RESOURCE) { squareCalss += this.props.selectedPawn.title.toLowerCase() }\r\n\r\n        }\r\n        if (this.props.selectedPattern.find(el => el === this.props.index)) { squareCalss += \" patternedSquare \" }\r\n        if (this.props.square.type === RESOURCE) { squareCalss += this.props.square.title.toLowerCase() }\r\n\r\n        return (\r\n            <li className={squareCalss} onClick={() => { this.onCellClick() }}>\r\n                {this.renderIcon()}\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        square: state.board[ownProps.index],\r\n        selectedSquare: state.selectedSquare,\r\n        selectedPattern: state.selectedPattern,\r\n        selectedPawn: state.selectedPawn,\r\n        phase: state.phase\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, { selectSquare, selectPattern, changeMessage })(Square);\r\n\r\n"]},"metadata":{},"sourceType":"module"}