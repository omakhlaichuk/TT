{"ast":null,"code":"import { connect } from 'react-redux';\nimport { changeMessage } from './../../actions';\nconst mapDispatchToProps = {\n  changeMessage\n};\n\nconst instantEffects = props => {\n  return {\n    Factory: () => {\n      //When constructed, select 1 of 5 resources. This resource becomes the wild.\n      //get all non wild resources\n      //select one resourse\n      //change selected to \"wild\"\n      console.log(\"Fact\"); //props.changeMessage('Factory') ;\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(instantEffects);\n/*\r\nvar createPet = function (name) {\r\n    var sex;\r\n\r\n    return {\r\n        setName: function (newName) {\r\n            name = newName;\r\n        },\r\n\r\n        getName: function () {\r\n            return name;\r\n        },\r\n\r\n        getSex: function () {\r\n            return sex;\r\n        },\r\n\r\n        setSex: function (newSex) {\r\n            if (typeof newSex === 'string' && (newSex.toLowerCase() === 'male' || newSex.toLowerCase() === 'female')) {\r\n                sex = newSex;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar pet = createPet('Vivie');\r\npet.getName();                  // Vivie\r\n\r\npet.setName('Oliver');\r\npet.setSex('male');\r\npet.getSex();                   // male\r\npet.getName();                  // Oliver\r\n\r\nexport default instantEffects\r\n\r\n    ; (function (global, $) {\r\n\r\n        // 'new' an object\r\n        var Greetr = function (firstName, lastName, language) {\r\n            return new Greetr.init(firstName, lastName, language);\r\n        }\r\n\r\n        // hidden within the scope of the IIFE and never directly accessible\r\n        var supportedLangs = ['en', 'es'];\r\n\r\n        // informal greetings\r\n        var greetings = {\r\n            en: 'Hello',\r\n            es: 'Hola'\r\n        };\r\n\r\n        // formal greetings\r\n        var formalGreetings = {\r\n            en: 'Greetings',\r\n            es: 'Saludos'\r\n        };\r\n\r\n        // logger messages\r\n        var logMessages = {\r\n            en: 'Logged in',\r\n            es: 'Inici贸 sesi贸n'\r\n        };\r\n\r\n        // prototype holds methods (to save memory space)\r\n        Greetr.prototype = {\r\n\r\n            // 'this' refers to the calling object at execution time\r\n            fullName: function () {\r\n                return this.firstName + ' ' + this.lastName;\r\n            },\r\n\r\n            validate: function () {\r\n                // check that is a valid language\r\n                // references the externally inaccessible 'supportedLangs' within the closure\r\n                if (supportedLangs.indexOf(this.language) === -1) {\r\n                    throw \"Invalid language\";\r\n                }\r\n            },\r\n\r\n            // retrieve messages from object by referring to properties using [] syntax\r\n            greeting: function () {\r\n                return greetings[this.language] + ' ' + this.firstName + '!';\r\n            },\r\n\r\n            formalGreeting: function () {\r\n                return formalGreetings[this.language] + ', ' + this.fullName();\r\n            },\r\n\r\n            // chainable methods return their own containing object\r\n            greet: function (formal) {\r\n                var msg;\r\n\r\n                // if undefined or null it will be coerced to 'false'\r\n                if (formal) {\r\n                    msg = this.formalGreeting();\r\n                }\r\n                else {\r\n                    msg = this.greeting();\r\n                }\r\n\r\n                if (console) {\r\n                    console.log(msg);\r\n                }\r\n\r\n                // 'this' refers to the calling object at execution time\r\n                // makes the method chainable\r\n                return this;\r\n            },\r\n\r\n            log: function () {\r\n                if (console) {\r\n                    console.log(logMessages[this.language] + ': ' + this.fullName());\r\n                }\r\n\r\n                // make chainable\r\n                return this;\r\n            },\r\n\r\n            setLang: function (lang) {\r\n\r\n                // set the language\r\n                this.language = lang;\r\n\r\n                // validate\r\n                this.validate();\r\n\r\n                // make chainable\r\n                return this;\r\n            },\r\n\r\n            HTMLGreeting: function (selector, formal) {\r\n                if (!$) {\r\n                    throw 'jQuery not loaded';\r\n                }\r\n\r\n                if (!selector) {\r\n                    throw 'Missing jQuery selector';\r\n                }\r\n\r\n                // determine the message\r\n                var msg;\r\n                if (formal) {\r\n                    msg = this.formalGreeting();\r\n                }\r\n                else {\r\n                    msg = this.greeting();\r\n                }\r\n\r\n                // inject the message in the chosen place in the DOM\r\n                $(selector).html(msg);\r\n\r\n                // make chainable\r\n                return this;\r\n            }\r\n\r\n        };\r\n\r\n        // the actual object is created here, allowing us to 'new' an object without calling 'new'\r\n        Greetr.init = function (firstName, lastName, language) {\r\n\r\n            var self = this;\r\n            self.firstName = firstName || '';\r\n            self.lastName = lastName || '';\r\n            self.language = language || 'en';\r\n\r\n            self.validate();\r\n\r\n        }\r\n\r\n        // trick borrowed from jQuery so we don't have to use the 'new' keyword\r\n        Greetr.init.prototype = Greetr.prototype;\r\n\r\n        // attach our Greetr to the global object, and provide a shorthand '$G' for ease our poor fingers\r\n        global.Greetr = global.G$ = Greetr;\r\n\r\n    }(window, jQuery));\r\n    */","map":{"version":3,"sources":["D:\\Pro\\React\\tt\\src\\components\\Buildings\\instantEffect.js"],"names":["connect","changeMessage","mapDispatchToProps","instantEffects","props","Factory","console","log"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AAEA,SAASC,aAAT,QAA8B,iBAA9B;AAGA,MAAMC,kBAAkB,GAAG;AACvBD,EAAAA;AADuB,CAA3B;;AAMA,MAAME,cAAc,GAAGC,KAAK,IAAI;AAC5B,SAAO;AAGHC,IAAAA,OAAO,EAAE,MAAM;AACX;AACA;AAEA;AAEA;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAPW,CASX;AAEH;AAdE,GAAP;AAiBH,CAlBD;;AAoBA,eAAeP,OAAO,CAAC,IAAD,EAAOE,kBAAP,CAAP,CAAmCC,cAAnC,CAAf;AAGA","sourcesContent":["import { connect } from 'react-redux';\r\n\r\nimport { changeMessage } from './../../actions';\r\n\r\n\r\nconst mapDispatchToProps = {\r\n    changeMessage,\r\n};\r\n\r\n\r\n\r\nconst instantEffects = props => {\r\n    return {\r\n\r\n\r\n        Factory: () => {\r\n            //When constructed, select 1 of 5 resources. This resource becomes the wild.\r\n            //get all non wild resources\r\n\r\n            //select one resourse\r\n\r\n            //change selected to \"wild\"\r\n            console.log(\"Fact\");\r\n\r\n            //props.changeMessage('Factory') ;\r\n\r\n        }\r\n    }\r\n\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps) (instantEffects);\r\n\r\n\r\n/*\r\nvar createPet = function (name) {\r\n    var sex;\r\n\r\n    return {\r\n        setName: function (newName) {\r\n            name = newName;\r\n        },\r\n\r\n        getName: function () {\r\n            return name;\r\n        },\r\n\r\n        getSex: function () {\r\n            return sex;\r\n        },\r\n\r\n        setSex: function (newSex) {\r\n            if (typeof newSex === 'string' && (newSex.toLowerCase() === 'male' || newSex.toLowerCase() === 'female')) {\r\n                sex = newSex;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar pet = createPet('Vivie');\r\npet.getName();                  // Vivie\r\n\r\npet.setName('Oliver');\r\npet.setSex('male');\r\npet.getSex();                   // male\r\npet.getName();                  // Oliver\r\n\r\nexport default instantEffects\r\n\r\n    ; (function (global, $) {\r\n\r\n        // 'new' an object\r\n        var Greetr = function (firstName, lastName, language) {\r\n            return new Greetr.init(firstName, lastName, language);\r\n        }\r\n\r\n        // hidden within the scope of the IIFE and never directly accessible\r\n        var supportedLangs = ['en', 'es'];\r\n\r\n        // informal greetings\r\n        var greetings = {\r\n            en: 'Hello',\r\n            es: 'Hola'\r\n        };\r\n\r\n        // formal greetings\r\n        var formalGreetings = {\r\n            en: 'Greetings',\r\n            es: 'Saludos'\r\n        };\r\n\r\n        // logger messages\r\n        var logMessages = {\r\n            en: 'Logged in',\r\n            es: 'Inici贸 sesi贸n'\r\n        };\r\n\r\n        // prototype holds methods (to save memory space)\r\n        Greetr.prototype = {\r\n\r\n            // 'this' refers to the calling object at execution time\r\n            fullName: function () {\r\n                return this.firstName + ' ' + this.lastName;\r\n            },\r\n\r\n            validate: function () {\r\n                // check that is a valid language\r\n                // references the externally inaccessible 'supportedLangs' within the closure\r\n                if (supportedLangs.indexOf(this.language) === -1) {\r\n                    throw \"Invalid language\";\r\n                }\r\n            },\r\n\r\n            // retrieve messages from object by referring to properties using [] syntax\r\n            greeting: function () {\r\n                return greetings[this.language] + ' ' + this.firstName + '!';\r\n            },\r\n\r\n            formalGreeting: function () {\r\n                return formalGreetings[this.language] + ', ' + this.fullName();\r\n            },\r\n\r\n            // chainable methods return their own containing object\r\n            greet: function (formal) {\r\n                var msg;\r\n\r\n                // if undefined or null it will be coerced to 'false'\r\n                if (formal) {\r\n                    msg = this.formalGreeting();\r\n                }\r\n                else {\r\n                    msg = this.greeting();\r\n                }\r\n\r\n                if (console) {\r\n                    console.log(msg);\r\n                }\r\n\r\n                // 'this' refers to the calling object at execution time\r\n                // makes the method chainable\r\n                return this;\r\n            },\r\n\r\n            log: function () {\r\n                if (console) {\r\n                    console.log(logMessages[this.language] + ': ' + this.fullName());\r\n                }\r\n\r\n                // make chainable\r\n                return this;\r\n            },\r\n\r\n            setLang: function (lang) {\r\n\r\n                // set the language\r\n                this.language = lang;\r\n\r\n                // validate\r\n                this.validate();\r\n\r\n                // make chainable\r\n                return this;\r\n            },\r\n\r\n            HTMLGreeting: function (selector, formal) {\r\n                if (!$) {\r\n                    throw 'jQuery not loaded';\r\n                }\r\n\r\n                if (!selector) {\r\n                    throw 'Missing jQuery selector';\r\n                }\r\n\r\n                // determine the message\r\n                var msg;\r\n                if (formal) {\r\n                    msg = this.formalGreeting();\r\n                }\r\n                else {\r\n                    msg = this.greeting();\r\n                }\r\n\r\n                // inject the message in the chosen place in the DOM\r\n                $(selector).html(msg);\r\n\r\n                // make chainable\r\n                return this;\r\n            }\r\n\r\n        };\r\n\r\n        // the actual object is created here, allowing us to 'new' an object without calling 'new'\r\n        Greetr.init = function (firstName, lastName, language) {\r\n\r\n            var self = this;\r\n            self.firstName = firstName || '';\r\n            self.lastName = lastName || '';\r\n            self.language = language || 'en';\r\n\r\n            self.validate();\r\n\r\n        }\r\n\r\n        // trick borrowed from jQuery so we don't have to use the 'new' keyword\r\n        Greetr.init.prototype = Greetr.prototype;\r\n\r\n        // attach our Greetr to the global object, and provide a shorthand '$G' for ease our poor fingers\r\n        global.Greetr = global.G$ = Greetr;\r\n\r\n    }(window, jQuery));\r\n    */"]},"metadata":{},"sourceType":"module"}