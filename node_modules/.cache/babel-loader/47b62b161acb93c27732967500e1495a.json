{"ast":null,"code":"export const scoring = board => {\n  const indexToX = index => index.toString().charAt(0);\n\n  const indexToY = index => index.toString().charAt(1);\n\n  const xyToIndex = (x, y) => \"x.toString() + y.toString()\".parseInt();\n\n  const getAdjacentIndexes = index => {\n    const x = indexToX(index);\n    const y = indexToY(index);\n    const adjacent = [];\n\n    if (x > 1) {\n      adjacent.push(xyToIndex(x - 1, y));\n    }\n\n    ;\n\n    if (x < 4) {\n      adjacent.push(xyToIndex(x + 1, y));\n    }\n\n    ;\n\n    if (y > 1) {\n      adjacent.push(xyToIndex(x, y - 1));\n    }\n\n    ;\n\n    if (y > 4) {\n      adjacent.push(xyToIndex(x, y + 1));\n    }\n\n    ;\n    return adjacent;\n  };\n\n  const findBuildings = buildingTitle => board.indexes.filter(index => board[index].title === buildingTitle);\n\n  const getAdjacentWithType = (index, type) => getAdjacentIndexes(index).filter(index => board[index].type === type);\n\n  const calcWell = board => {\n    let score = 0;\n    findBuildings(5).forEach(wellIndex => {\n      score += getAdjacentWithType(wellIndex, 1).length;\n    });\n    return score;\n  };\n};","map":{"version":3,"sources":["D:\\Pro\\React\\tlt\\src\\components\\Buildings\\scoring.js"],"names":["scoring","board","indexToX","index","toString","charAt","indexToY","xyToIndex","x","y","parseInt","getAdjacentIndexes","adjacent","push","findBuildings","buildingTitle","indexes","filter","title","getAdjacentWithType","type","calcWell","score","forEach","wellIndex","length"],"mappings":"AAAA,OAAQ,MAAMA,OAAO,GAAGC,KAAK,IAAI;AAE7B,QAAMC,QAAQ,GAAGC,KAAK,IAAIA,KAAK,CAACC,QAAN,GAAiBC,MAAjB,CAAwB,CAAxB,CAA1B;;AACA,QAAMC,QAAQ,GAAGH,KAAK,IAAIA,KAAK,CAACC,QAAN,GAAiBC,MAAjB,CAAwB,CAAxB,CAA1B;;AACA,QAAME,SAAS,GAAG,CAACC,CAAD,EAAGC,CAAH,KAAU,8BAA8BC,QAA9B,EAA5B;;AAEA,QAAMC,kBAAkB,GAAGR,KAAK,IAAI;AAChC,UAAMK,CAAC,GAAGN,QAAQ,CAACC,KAAD,CAAlB;AACA,UAAMM,CAAC,GAAGH,QAAQ,CAACH,KAAD,CAAlB;AACA,UAAMS,QAAQ,GAAG,EAAjB;;AACA,QAAIJ,CAAC,GAAG,CAAR,EAAW;AAACI,MAAAA,QAAQ,CAACC,IAAT,CAAcN,SAAS,CAACC,CAAC,GAAC,CAAH,EAAKC,CAAL,CAAvB;AAAiC;;AAAA;;AAC7C,QAAID,CAAC,GAAG,CAAR,EAAW;AAACI,MAAAA,QAAQ,CAACC,IAAT,CAAcN,SAAS,CAACC,CAAC,GAAC,CAAH,EAAKC,CAAL,CAAvB;AAAiC;;AAAA;;AAC7C,QAAIA,CAAC,GAAG,CAAR,EAAW;AAACG,MAAAA,QAAQ,CAACC,IAAT,CAAcN,SAAS,CAACC,CAAD,EAAGC,CAAC,GAAC,CAAL,CAAvB;AAAiC;;AAAA;;AAC7C,QAAIA,CAAC,GAAG,CAAR,EAAW;AAACG,MAAAA,QAAQ,CAACC,IAAT,CAAcN,SAAS,CAACC,CAAD,EAAGC,CAAC,GAAC,CAAL,CAAvB;AAAiC;;AAAA;AAC7C,WAAOG,QAAP;AACH,GATD;;AAWA,QAAME,aAAa,GAAGC,aAAa,IAAId,KAAK,CAACe,OAAN,CAAcC,MAAd,CAAqBd,KAAK,IAAIF,KAAK,CAACE,KAAD,CAAL,CAAae,KAAb,KAAuBH,aAArD,CAAvC;;AAEA,QAAMI,mBAAmB,GAAG,CAAChB,KAAD,EAAQiB,IAAR,KAAiBT,kBAAkB,CAACR,KAAD,CAAlB,CAA0Bc,MAA1B,CAAiCd,KAAK,IAAIF,KAAK,CAACE,KAAD,CAAL,CAAaiB,IAAb,KAAsBA,IAAhE,CAA7C;;AAEA,QAAMC,QAAQ,GAAIpB,KAAD,IAAW;AACxB,QAAIqB,KAAK,GAAG,CAAZ;AACAR,IAAAA,aAAa,CAAC,CAAD,CAAb,CAAiBS,OAAjB,CAAyBC,SAAS,IAAI;AAAEF,MAAAA,KAAK,IAAIH,mBAAmB,CAACK,SAAD,EAAY,CAAZ,CAAnB,CAAkCC,MAA3C;AACvC,KADD;AAEA,WAAOH,KAAP;AACH,GALD;AAOH,CA5BO","sourcesContent":["export  const scoring = board => {\r\n\r\n    const indexToX = index => index.toString().charAt(0);\r\n    const indexToY = index => index.toString().charAt(1);\r\n    const xyToIndex = (x,y) =>  `x.toString() + y.toString()`.parseInt();\r\n\r\n    const getAdjacentIndexes = index => {\r\n        const x = indexToX(index);\r\n        const y = indexToY(index);\r\n        const adjacent = [];\r\n        if (x > 1) {adjacent.push(xyToIndex(x-1,y) )};\r\n        if (x < 4) {adjacent.push(xyToIndex(x+1,y) )};\r\n        if (y > 1) {adjacent.push(xyToIndex(x,y-1) )};\r\n        if (y > 4) {adjacent.push(xyToIndex(x,y+1) )};\r\n        return adjacent;\r\n    }\r\n\r\n    const findBuildings = buildingTitle => board.indexes.filter(index => board[index].title === buildingTitle);\r\n\r\n    const getAdjacentWithType = (index, type) => getAdjacentIndexes(index).filter(index => board[index].type === type)\r\n\r\n    const calcWell = (board) => {\r\n        let score = 0;\r\n        findBuildings(5).forEach(wellIndex => { score += getAdjacentWithType(wellIndex, 1).length         \r\n        });\r\n        return score;\r\n    };\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}