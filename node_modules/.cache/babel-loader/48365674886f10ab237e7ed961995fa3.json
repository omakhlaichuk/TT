{"ast":null,"code":"var _jsxFileName = \"D:\\\\Pro\\\\React\\\\tt\\\\src\\\\components\\\\Buildings\\\\Building.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\nimport { fetchBuilding, selectPawn, changeMessage, selectSquare, scoreBuilding } from './../../actions';\nimport data from './buildings.json';\nimport { message, GAME_PHASE, SCORING_PHASE } from './../constants';\nimport { calcScore } from './scoring';\nimport { rotateAndMirrorPattern, pointToIndex, preparedPattern } from '../../trash/____patternHandler';\n\nclass Building extends React.Component {\n  selectBuilding() {\n    if (this.props.phase === GAME_PHASE) {\n      const pp = preparedPattern(this.props.selectedPattern, this.props.board);\n      const ppp = pointToIndex(pp, \"title\");\n      let canSelectPawn = this.props.building.patterns.find(pattern => _.isEqual(pattern, ppp));\n\n      if (canSelectPawn) {\n        this.props.changeMessage(message.patternMatchesBuilding(this.props.building.title));\n        this.props.selectPawn(this.props.building);\n      } else {\n        this.props.selectPawn({});\n        this.props.selectSquare(null);\n        this.props.changeMessage(message.patternDoesNotMatchBuilding(this.props.building.title));\n      }\n    }\n  }\n\n  componentDidMount() {\n    //upload data from json\n    const buildingForFetching = data[this.props.title]; //add all variants of the pattern\n\n    buildingForFetching.patterns = rotateAndMirrorPattern(buildingForFetching.pattern); //load Building to the state\n\n    this.props.fetchBuilding(buildingForFetching);\n  }\n\n  componentDidUpdate() {\n    //if (this.props !== this.prevProps) {\n    //upload data from json\n    const buildingForFetching = data[this.props.title]; //add all variants of the pattern\n\n    buildingForFetching.patterns = rotateAndMirrorPattern(buildingForFetching.pattern); //load Building to the state\n\n    this.props.fetchBuilding(buildingForFetching); // }\n  }\n\n  renderPatternCheckOrScoring() {\n    if (this.props.phase === SCORING_PHASE) {\n      this.props.scoreBuilding(this.props.index, calcScore[this.props.building.title](this.props.board));\n      return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, \"Score: \", this.props.building.score);\n    }\n\n    ;\n\n    if (this.props.phase === GAME_PHASE) {\n      return React.createElement(\"button\", {\n        onClick: () => this.selectBuilding(),\n        disabled: !(this.props.selectedPattern.length === this.props.building.pattern.length),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, \"Check the pattern\");\n    }\n  }\n\n  renderPattern() {\n    const style = (col, row) => {\n      return {\n        gridColumn: col,\n        gridRow: row\n      };\n    };\n\n    return React.createElement(React.Fragment, null, this.props.building.pattern.map(resource => React.createElement(\"div\", {\n      key: resource[0],\n      className: \"resource \".concat(resource[1].toLowerCase()),\n      style: style(resource[0] % 10, Math.floor(resource[0] / 10)),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    })));\n  }\n\n  render() {\n    if (!this.props.building) {\n      return null;\n    } else {\n      return React.createElement(\"div\", {\n        className: \"building\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"buildingTitle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, this.props.building.title, React.createElement(\"img\", {\n        src: \"/images/\".concat(this.props.building.type, \".png\"),\n        alt: this.props.building.type,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"buildingPattern\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \" \", this.renderPattern(), \" \"), React.createElement(\"div\", {\n        className: \"buildingAbility\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, this.props.building.ability, \" \"), this.renderPatternCheckOrScoring());\n    }\n  }\n\n}\n\n;\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    phase: state.phase,\n    building: state.buildings[ownProps.index],\n    selectedPattern: state.selectedPattern,\n    board: state.board\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchBuilding,\n  selectPawn,\n  changeMessage,\n  selectSquare,\n  scoreBuilding\n})(Building);","map":{"version":3,"sources":["D:\\Pro\\React\\tt\\src\\components\\Buildings\\Building.js"],"names":["React","connect","_","fetchBuilding","selectPawn","changeMessage","selectSquare","scoreBuilding","data","message","GAME_PHASE","SCORING_PHASE","calcScore","rotateAndMirrorPattern","pointToIndex","preparedPattern","Building","Component","selectBuilding","props","phase","pp","selectedPattern","board","ppp","canSelectPawn","building","patterns","find","pattern","isEqual","patternMatchesBuilding","title","patternDoesNotMatchBuilding","componentDidMount","buildingForFetching","componentDidUpdate","renderPatternCheckOrScoring","index","score","length","renderPattern","style","col","row","gridColumn","gridRow","map","resource","toLowerCase","Math","floor","render","type","ability","mapStateToProps","state","ownProps","buildings"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport _ from 'lodash';\r\n\r\nimport { fetchBuilding, selectPawn, changeMessage, selectSquare, scoreBuilding } from './../../actions';\r\nimport data from './buildings.json';\r\nimport { message, GAME_PHASE, SCORING_PHASE } from './../constants';\r\nimport { calcScore } from './scoring';\r\nimport { rotateAndMirrorPattern, pointToIndex, preparedPattern } from '../../trash/____patternHandler'\r\n\r\nclass Building extends React.Component {\r\n\r\n    selectBuilding() {\r\n        if (this.props.phase === GAME_PHASE) {\r\n\r\n            const pp = preparedPattern(this.props.selectedPattern, this.props.board)\r\n            const ppp = pointToIndex(pp, \"title\");\r\n            let canSelectPawn = this.props.building.patterns.find(pattern => _.isEqual(pattern, ppp));\r\n            if (canSelectPawn) {\r\n                this.props.changeMessage(message.patternMatchesBuilding(this.props.building.title));\r\n                this.props.selectPawn(this.props.building);\r\n            } else {\r\n                this.props.selectPawn({});\r\n                this.props.selectSquare(null);\r\n                this.props.changeMessage(message.patternDoesNotMatchBuilding(this.props.building.title));\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        //upload data from json\r\n        const buildingForFetching = data[this.props.title];\r\n        //add all variants of the pattern\r\n        buildingForFetching.patterns = rotateAndMirrorPattern(buildingForFetching.pattern);\r\n        //load Building to the state\r\n        this.props.fetchBuilding(buildingForFetching);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        //if (this.props !== this.prevProps) {\r\n            //upload data from json\r\n            const buildingForFetching = data[this.props.title];\r\n            //add all variants of the pattern\r\n            buildingForFetching.patterns = rotateAndMirrorPattern(buildingForFetching.pattern);\r\n            //load Building to the state\r\n            this.props.fetchBuilding(buildingForFetching);\r\n       // }\r\n    }\r\n\r\n    renderPatternCheckOrScoring() {\r\n        if (this.props.phase === SCORING_PHASE) {\r\n            this.props.scoreBuilding(this.props.index, calcScore[this.props.building.title](this.props.board));\r\n            return <p>Score: {this.props.building.score}</p>;\r\n        };\r\n        if (this.props.phase === GAME_PHASE) {\r\n            return (\r\n                <button\r\n                    onClick={() => this.selectBuilding()}\r\n                    disabled={!(this.props.selectedPattern.length === this.props.building.pattern.length)}\r\n                >\r\n                    Check the pattern\r\n                </button>\r\n            )\r\n        }\r\n    }\r\n\r\n    renderPattern() {\r\n        const style = (col, row) => {\r\n            return {\r\n                gridColumn: col,\r\n                gridRow: row\r\n            }\r\n        }\r\n        return (\r\n            <>\r\n                {this.props.building.pattern.map(\r\n                    resource => <div key={resource[0]}\r\n                        className={`resource ${resource[1].toLowerCase()}`}\r\n                        style={style(resource[0] % 10, Math.floor(resource[0] / 10))}\r\n                    ></div>\r\n                )}\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.building) {\r\n            return null;\r\n        } else {\r\n            return (\r\n                <div className=\"building\">\r\n                    <div className=\"buildingTitle\">{this.props.building.title}\r\n                        <img src={`/images/${this.props.building.type}.png`} alt={this.props.building.type} />\r\n                    </div>\r\n                    <div className=\"buildingPattern\"> {this.renderPattern()} </div>\r\n                    <div className=\"buildingAbility\">{this.props.building.ability} </div>\r\n                    {this.renderPatternCheckOrScoring()}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        phase: state.phase,\r\n        building: state.buildings[ownProps.index],\r\n        selectedPattern: state.selectedPattern,\r\n        board: state.board\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, { fetchBuilding, selectPawn, changeMessage, selectSquare, scoreBuilding })(Building);"]},"metadata":{},"sourceType":"module"}