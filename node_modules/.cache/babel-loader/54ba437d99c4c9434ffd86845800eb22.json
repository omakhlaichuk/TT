{"ast":null,"code":"import _objectSpread from \"D:\\\\Pro\\\\React\\\\tt\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { INITIAL_STATE, EMPTY_SQUARE, RESOURCE, WILD } from './../components/constants';\nimport { SELECT_PAWN, SELECT_SQUARE, SELECT_PATTERN, CLEAR_SELECTION, PLACE_RESOURCE, PLACE_BUILDING, FETCH_BUILDING, FEED_COTTAGES, CHANGE_PHASE, CHANGE_MESSAGE, NEW_GAME, SCORE_TOTAL, SCORE_BUILDING, WILD_RESOURCE } from '../actions/types';\nexport default ((state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case NEW_GAME:\n      return INITIAL_STATE;\n\n    case SCORE_TOTAL:\n      return _objectSpread({}, state, {\n        score: action.payload\n      });\n\n    case SCORE_BUILDING:\n      return _objectSpread({}, state, {\n        buildings: [...state.buildings, state.buildings.map((building, type) => {\n          if (type === action.payload.buildingType) {\n            building.score = action.payload.score;\n          }\n\n          ;\n          return building;\n        })]\n      });\n\n    case CHANGE_PHASE:\n      return _objectSpread({}, state, {\n        phase: action.payload\n      });\n\n    case CHANGE_MESSAGE:\n      return _objectSpread({}, state, {\n        message: action.payload\n      });\n\n    case SELECT_PAWN:\n      return _objectSpread({}, state, {\n        selectedPawn: action.payload\n      });\n\n    case SELECT_SQUARE:\n      return _objectSpread({}, state, {\n        selectedSquare: action.payload\n      });\n\n    case SELECT_PATTERN:\n      if (state.selectedPattern.find(el => el === action.payload)) {\n        return _objectSpread({}, state, {\n          selectedPattern: state.selectedPattern.filter(el => el !== action.payload)\n        });\n      }\n\n      return _objectSpread({}, state, {\n        selectedPattern: [...state.selectedPattern, action.payload]\n      });\n\n    case CLEAR_SELECTION:\n      return _objectSpread({}, state, {\n        selectedSquare: null,\n        selectedPattern: [],\n        selectedPawn: {}\n      });\n\n    case FETCH_BUILDING:\n      return _objectSpread({}, state, {\n        buildings: [...state.buildings, action.payload]\n      });\n    //find placing recourse and move it to the end of line. Update Board with the recourse. Clear \"selected\"\n\n    case PLACE_RESOURCE:\n      //if resourse from wild - search for WILD \n      const moveFromIndex = state.resources.indexOf(state.selectedPawn.fromWild ? WILD : state.selectedPawn); // remove fromWild property\n\n      const selectedPawn = {\n        title: state.selectedPawn.title,\n        type: RESOURCE\n      };\n      const movingResource = state.resources[moveFromIndex];\n      state.resources.splice(moveFromIndex, 1);\n      return _objectSpread({}, state, {\n        board: _objectSpread({}, state.board, {\n          [state.selectedSquare]: selectedPawn\n        }),\n        selectedSquare: null,\n        selectedPawn: {},\n        resources: [...state.resources, movingResource]\n      });\n\n    case PLACE_BUILDING:\n      state.selectedPattern.forEach(square => {\n        // remove resource only\n        if (state.board[square].type === RESOURCE) {\n          state.board[square] = EMPTY_SQUARE;\n        }\n      });\n      return _objectSpread({}, state, {\n        board: _objectSpread({}, state.board, {\n          [state.selectedSquare]: state.selectedPawn\n        }),\n        selectedSquare: null,\n        selectedPawn: {},\n        selectedPattern: []\n      });\n\n    case FEED_COTTAGES:\n      return _objectSpread({}, state, {\n        board: _objectSpread({}, state.board, {\n          fedCottages: action.payload\n        })\n      });\n\n    case WILD_RESOURCE:\n      return _objectSpread({}, state, {\n        resources: state.resources.map(resource => resource === state.selectedPawn ? WILD : resource)\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["D:\\Pro\\React\\tt\\src\\reducers\\index.js"],"names":["INITIAL_STATE","EMPTY_SQUARE","RESOURCE","WILD","SELECT_PAWN","SELECT_SQUARE","SELECT_PATTERN","CLEAR_SELECTION","PLACE_RESOURCE","PLACE_BUILDING","FETCH_BUILDING","FEED_COTTAGES","CHANGE_PHASE","CHANGE_MESSAGE","NEW_GAME","SCORE_TOTAL","SCORE_BUILDING","WILD_RESOURCE","state","action","type","score","payload","buildings","map","building","buildingType","phase","message","selectedPawn","selectedSquare","selectedPattern","find","el","filter","moveFromIndex","resources","indexOf","fromWild","title","movingResource","splice","board","forEach","square","fedCottages","resource"],"mappings":"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","sourcesContent":["import { INITIAL_STATE, EMPTY_SQUARE, RESOURCE, WILD } from './../components/constants';\r\n\r\nimport {\r\n    SELECT_PAWN,\r\n    SELECT_SQUARE,\r\n    SELECT_PATTERN,\r\n    CLEAR_SELECTION,\r\n    PLACE_RESOURCE,\r\n    PLACE_BUILDING,\r\n    FETCH_BUILDING,\r\n    FEED_COTTAGES,\r\n    CHANGE_PHASE,\r\n    CHANGE_MESSAGE,\r\n    NEW_GAME,\r\n    SCORE_TOTAL,\r\n    SCORE_BUILDING,\r\n    WILD_RESOURCE,\r\n} from '../actions/types'\r\n\r\n\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n\r\n        case NEW_GAME:\r\n            return INITIAL_STATE;\r\n\r\n        case SCORE_TOTAL:\r\n            return { ...state, score: action.payload };\r\n\r\n        case SCORE_BUILDING:\r\n            return {\r\n                ...state, buildings: [...state.buildings, state.buildings.map(\r\n                    (building, type) => {\r\n                        if (type === action.payload.buildingType) { building.score = action.payload.score };\r\n                        return building\r\n                    }\r\n                )]\r\n            };\r\n\r\n        case CHANGE_PHASE:\r\n            return { ...state, phase: action.payload };\r\n\r\n        case CHANGE_MESSAGE:\r\n            return { ...state, message: action.payload };\r\n\r\n        case SELECT_PAWN:\r\n            return { ...state, selectedPawn: action.payload };\r\n\r\n        case SELECT_SQUARE:\r\n            return { ...state, selectedSquare: action.payload };\r\n\r\n        case SELECT_PATTERN:\r\n            if (state.selectedPattern.find(el => el === action.payload)) {\r\n                return { ...state, selectedPattern: state.selectedPattern.filter(el => el !== action.payload) };\r\n            }\r\n            return { ...state, selectedPattern: [...state.selectedPattern, action.payload] };\r\n\r\n        case CLEAR_SELECTION:\r\n            return { ...state, selectedSquare: null, selectedPattern: [], selectedPawn: {} };\r\n\r\n        case FETCH_BUILDING:\r\n            return { ...state, buildings: [...state.buildings, action.payload] };\r\n\r\n        //find placing recourse and move it to the end of line. Update Board with the recourse. Clear \"selected\"\r\n        case PLACE_RESOURCE:\r\n            //if resourse from wild - search for WILD \r\n            const moveFromIndex = state.resources.indexOf(\r\n                state.selectedPawn.fromWild ? WILD : state.selectedPawn\r\n            );\r\n            // remove fromWild property\r\n            const selectedPawn = { title: state.selectedPawn.title, type: RESOURCE }\r\n            const movingResource = state.resources[moveFromIndex];\r\n            state.resources.splice(moveFromIndex, 1);\r\n            return {\r\n                ...state,\r\n                board: { ...state.board, [state.selectedSquare]: selectedPawn },\r\n                selectedSquare: null,\r\n                selectedPawn: {},\r\n                resources: [...state.resources, movingResource]\r\n            };\r\n\r\n        case PLACE_BUILDING:\r\n            state.selectedPattern.forEach(square => {\r\n                // remove resource only\r\n                if (state.board[square].type === RESOURCE) {\r\n                    state.board[square] = EMPTY_SQUARE;\r\n                }\r\n            })\r\n            return { ...state, board: { ...state.board, [state.selectedSquare]: state.selectedPawn }, selectedSquare: null, selectedPawn: {}, selectedPattern: [] };\r\n\r\n        case FEED_COTTAGES:\r\n            return { ...state, board: { ...state.board, fedCottages: action.payload } };\r\n\r\n        case WILD_RESOURCE:\r\n            return { ...state, resources: state.resources.map(resource => resource === state.selectedPawn ? WILD : resource) };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}