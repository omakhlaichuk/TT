{"ast":null,"code":"var _jsxFileName = \"D:\\\\Pro\\\\React\\\\tlt\\\\src\\\\components\\\\Buildings\\\\Building.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchBuilding, selectPawn, changeMessage } from '../../actions';\nimport data from './buildings.json';\nimport { message, BUILDING_PHASE, SCORING_PHASE } from './../constants';\nimport { calcScore } from './scoring';\n\nclass Building extends React.Component {\n  testMe() {\n    const normalaized = arr => {\n      const dx = Math.min(...arr.map(square => Number(square.x))) - 1;\n      const dy = Math.min(...arr.map(square => Number(square.y))) - 1;\n      return arr.map(square => {\n        return {\n          x: square.x - dx,\n          y: square.y - dy,\n          resource: square.resource\n        };\n      });\n    };\n\n    const rotate = arr => {\n      return arr.map(square => {\n        return {\n          x: -square.y,\n          y: square.x,\n          resource: square.resource\n        };\n      });\n    };\n\n    const mirrorX = arr => {\n      return arr.map(square => {\n        return {\n          x: -square.x,\n          y: square.y,\n          resource: square.resource\n        };\n      });\n    };\n\n    const mirrorY = arr => {\n      return arr.map(square => {\n        return {\n          x: square.x,\n          y: -square.y,\n          resource: square.resource\n        };\n      });\n    };\n\n    console.log(this.props.building.pattern);\n    console.log(normalaized(rotate(this.props.building.pattern)));\n    console.log(normalaized(mirrorX(this.props.building.pattern)));\n    console.log(normalaized(mirrorY(this.props.building.pattern)));\n  }\n\n  selectBuilding() {\n    if (this.props.phase === BUILDING_PHASE) {\n      if (this.props.selectedPattern.length && \"Pattern is OK\") {\n        this.props.selectPawn(this.props.building);\n      }\n\n      this.props.changeMessage(message.selectSquareForBuilding(this.props.building.title, this.props.selectedPattern.length));\n    }\n  }\n\n  componentDidMount() {\n    this.props.fetchBuilding(data[this.props.title]);\n  }\n\n  renderScoring() {\n    if (this.props.phase === SCORING_PHASE) {\n      return calcScore[this.props.building.title](this.props.board);\n    }\n\n    ;\n  }\n\n  render() {\n    if (!this.props.building) {\n      return null;\n    } else {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: () => this.selectBuilding(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, this.props.building.title), this.renderScoring(), React.createElement(\"button\", {\n        onClick: () => this.testMe(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \" testMe \"));\n    }\n  }\n\n}\n\n;\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    phase: state.phase,\n    building: state.buildings[ownProps.index],\n    selectedPattern: state.selectedPattern,\n    board: state.board\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchBuilding,\n  selectPawn,\n  changeMessage\n})(Building);","map":{"version":3,"sources":["D:\\Pro\\React\\tlt\\src\\components\\Buildings\\Building.js"],"names":["React","connect","fetchBuilding","selectPawn","changeMessage","data","message","BUILDING_PHASE","SCORING_PHASE","calcScore","Building","Component","testMe","normalaized","arr","dx","Math","min","map","square","Number","x","dy","y","resource","rotate","mirrorX","mirrorY","console","log","props","building","pattern","selectBuilding","phase","selectedPattern","length","selectSquareForBuilding","title","componentDidMount","renderScoring","board","render","mapStateToProps","state","ownProps","buildings","index"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { fetchBuilding, selectPawn, changeMessage } from '../../actions';\r\nimport data from './buildings.json';\r\nimport { message, BUILDING_PHASE, SCORING_PHASE } from './../constants';\r\nimport { calcScore } from './scoring';\r\n\r\n\r\n\r\nclass Building extends React.Component {\r\n\r\n    testMe() {\r\n        const normalaized = arr => {\r\n            const dx = Math.min(...arr.map(square => Number(square.x))) - 1;\r\n            const dy = Math.min(...arr.map(square => Number(square.y))) - 1;\r\n            return arr.map(square => {\r\n                return {\r\n                    x: square.x - dx,\r\n                    y: square.y - dy,\r\n                    resource: square.resource\r\n\r\n                }\r\n            });\r\n        }\r\n\r\n        const rotate = arr => {\r\n            return arr.map(square => { return { x: -square.y, y: square.x, resource: square.resource } });\r\n        }\r\n\r\n        const mirrorX = arr => {\r\n            return arr.map(square => { return { x: -square.x, y: square.y, resource: square.resource } });\r\n\r\n        }\r\n\r\n        const mirrorY = arr => {\r\n            return arr.map(square => { return { x: square.x, y: -square.y, resource: square.resource } });\r\n\r\n        }\r\n        console.log(this.props.building.pattern);\r\n\r\n        console.log(normalaized(rotate(this.props.building.pattern)));\r\n\r\n        console.log(normalaized(mirrorX(this.props.building.pattern)));\r\n        console.log(normalaized(mirrorY(this.props.building.pattern)));\r\n\r\n    }\r\n\r\n    selectBuilding() {\r\n        if (this.props.phase === BUILDING_PHASE) {\r\n            if (this.props.selectedPattern.length && \"Pattern is OK\") {\r\n                this.props.selectPawn(this.props.building);\r\n\r\n            }\r\n            this.props.changeMessage(message.selectSquareForBuilding(this.props.building.title, this.props.selectedPattern.length));\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchBuilding(data[this.props.title]);\r\n    }\r\n\r\n    renderScoring() {\r\n        if (this.props.phase === SCORING_PHASE) {\r\n            return calcScore[this.props.building.title](this.props.board)\r\n        };\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.building) {\r\n            return null;\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <button onClick={() => this.selectBuilding()}>{this.props.building.title}</button>\r\n                    {this.renderScoring()}\r\n                    <button onClick={() => this.testMe()}> testMe </button>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        phase: state.phase,\r\n        building: state.buildings[ownProps.index],\r\n        selectedPattern: state.selectedPattern,\r\n        board: state.board\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, { fetchBuilding, selectPawn, changeMessage })(Building);\r\n"]},"metadata":{},"sourceType":"module"}