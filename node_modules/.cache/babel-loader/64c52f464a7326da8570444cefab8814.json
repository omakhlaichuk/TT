{"ast":null,"code":"export const scoring = {\n  indexToX: index => index.toString().charAt(0),\n  indexToY: index => index.toString().charAt(1),\n  xyToIndex: (x, y) => parseInt(x.toString() + y.toString()),\n  getAdjacentIndexes: index => {\n    const x = scoring.indexToX(index);\n    const y = scoring.indexToY(index);\n    const adjacent = [];\n\n    if (x > 1) {\n      adjacent.push(scoring.xyToIndex(x - 1, y));\n    }\n\n    ;\n\n    if (x < 4) {\n      adjacent.push(scoring.xyToIndex(x + 1, y));\n    }\n\n    ;\n\n    if (y > 1) {\n      adjacent.push(scoring.xyToIndex(x, y - 1));\n    }\n\n    ;\n\n    if (y > 4) {\n      adjacent.push(scoring.xyToIndex(x, y + 1));\n    }\n\n    ;\n    return adjacent;\n  },\n  findBuildings: (board, buildingTitle) => board.indexes.filter(index => board[index].title === buildingTitle),\n  getAdjacentWithType: (board, index, type) => scoring.getAdjacentIndexes(index).filter(index => board[index].type === type),\n  calcWell: board => {\n    let score = 0;\n    scoring.findBuildings(board, \"Well\").forEach(wellIndex => {\n      console.log(wellIndex);\n      score += scoring.getAdjacentWithType(board, wellIndex, 1).length;\n    });\n    return score;\n  }\n};","map":{"version":3,"sources":["D:\\Pro\\React\\tlt\\src\\components\\Buildings\\scoring.js"],"names":["scoring","indexToX","index","toString","charAt","indexToY","xyToIndex","x","y","parseInt","getAdjacentIndexes","adjacent","push","findBuildings","board","buildingTitle","indexes","filter","title","getAdjacentWithType","type","calcWell","score","forEach","wellIndex","console","log","length"],"mappings":"AAAA,OAAQ,MAAMA,OAAO,GAAI;AAEpBC,EAAAA,QAAQ,EAAEC,KAAK,IAAIA,KAAK,CAACC,QAAN,GAAiBC,MAAjB,CAAwB,CAAxB,CAFC;AAGpBC,EAAAA,QAAQ,EAAEH,KAAK,IAAIA,KAAK,CAACC,QAAN,GAAiBC,MAAjB,CAAwB,CAAxB,CAHC;AAIpBE,EAAAA,SAAS,EAAE,CAACC,CAAD,EAAGC,CAAH,KAAUC,QAAQ,CAACF,CAAC,CAACJ,QAAF,KAAeK,CAAC,CAACL,QAAF,EAAhB,CAJT;AAMpBO,EAAAA,kBAAkB,EAAER,KAAK,IAAI;AAC1B,UAAMK,CAAC,GAAGP,OAAO,CAACC,QAAR,CAAiBC,KAAjB,CAAV;AACA,UAAMM,CAAC,GAAGR,OAAO,CAACK,QAAR,CAAiBH,KAAjB,CAAV;AACA,UAAMS,QAAQ,GAAG,EAAjB;;AACA,QAAIJ,CAAC,GAAG,CAAR,EAAW;AAACI,MAAAA,QAAQ,CAACC,IAAT,CAAcZ,OAAO,CAACM,SAAR,CAAkBC,CAAC,GAAC,CAApB,EAAsBC,CAAtB,CAAd;AAAyC;;AAAA;;AACrD,QAAID,CAAC,GAAG,CAAR,EAAW;AAACI,MAAAA,QAAQ,CAACC,IAAT,CAAcZ,OAAO,CAACM,SAAR,CAAkBC,CAAC,GAAC,CAApB,EAAsBC,CAAtB,CAAd;AAAyC;;AAAA;;AACrD,QAAIA,CAAC,GAAG,CAAR,EAAW;AAACG,MAAAA,QAAQ,CAACC,IAAT,CAAcZ,OAAO,CAACM,SAAR,CAAkBC,CAAlB,EAAoBC,CAAC,GAAC,CAAtB,CAAd;AAAyC;;AAAA;;AACrD,QAAIA,CAAC,GAAG,CAAR,EAAW;AAACG,MAAAA,QAAQ,CAACC,IAAT,CAAcZ,OAAO,CAACM,SAAR,CAAkBC,CAAlB,EAAoBC,CAAC,GAAC,CAAtB,CAAd;AAAyC;;AAAA;AACrD,WAAOG,QAAP;AACH,GAfoB;AAiBpBE,EAAAA,aAAa,EAAE,CAACC,KAAD,EAAQC,aAAR,KAA0BD,KAAK,CAACE,OAAN,CAAcC,MAAd,CAAqBf,KAAK,IAAIY,KAAK,CAACZ,KAAD,CAAL,CAAagB,KAAb,KAAuBH,aAArD,CAjBrB;AAmBpBI,EAAAA,mBAAmB,EAAE,CAACL,KAAD,EAAQZ,KAAR,EAAekB,IAAf,KAAwBpB,OAAO,CAACU,kBAAR,CAA2BR,KAA3B,EAAkCe,MAAlC,CAAyCf,KAAK,IAAIY,KAAK,CAACZ,KAAD,CAAL,CAAakB,IAAb,KAAsBA,IAAxE,CAnBzB;AAqBpBC,EAAAA,QAAQ,EAAGP,KAAD,IAAW;AAClB,QAAIQ,KAAK,GAAG,CAAZ;AACAtB,IAAAA,OAAO,CAACa,aAAR,CAAsBC,KAAtB,EAA6B,MAA7B,EAAqCS,OAArC,CAA6CC,SAAS,IAAI;AACtDC,MAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACAF,MAAAA,KAAK,IAAItB,OAAO,CAACmB,mBAAR,CAA4BL,KAA5B,EAAmCU,SAAnC,EAA8C,CAA9C,EAAiDG,MAA1D;AACH,KAHD;AAIA,WAAOL,KAAP;AACH;AA5BoB,CAAjB","sourcesContent":["export  const scoring =  {\r\n\r\n     indexToX: index => index.toString().charAt(0),\r\n     indexToY: index => index.toString().charAt(1),\r\n     xyToIndex: (x,y) =>  parseInt(x.toString() + y.toString()),\r\n\r\n     getAdjacentIndexes: index => {\r\n        const x = scoring.indexToX(index);\r\n        const y = scoring.indexToY(index);\r\n        const adjacent = [];\r\n        if (x > 1) {adjacent.push(scoring.xyToIndex(x-1,y) )};\r\n        if (x < 4) {adjacent.push(scoring.xyToIndex(x+1,y) )};\r\n        if (y > 1) {adjacent.push(scoring.xyToIndex(x,y-1) )};\r\n        if (y > 4) {adjacent.push(scoring.xyToIndex(x,y+1) )};\r\n        return adjacent;\r\n    },\r\n\r\n     findBuildings: (board, buildingTitle) => board.indexes.filter(index => board[index].title === buildingTitle),\r\n\r\n     getAdjacentWithType: (board, index, type) => scoring.getAdjacentIndexes(index).filter(index => board[index].type === type),\r\n\r\n     calcWell: (board) => {\r\n        let score = 0;\r\n        scoring.findBuildings(board, \"Well\").forEach(wellIndex => { \r\n            console.log(wellIndex)\r\n            score += scoring.getAdjacentWithType(board, wellIndex, 1).length         \r\n        });\r\n        return score;\r\n    },\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}