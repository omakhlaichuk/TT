{"ast":null,"code":"import _objectSpread from \"D:\\\\Pro\\\\React\\\\tt\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { INITIAL_STATE, EMPTY_SQUARE, RESOURCE } from './../components/constants';\nimport { SELECT_PAWN, SELECT_SQUARE, SELECT_PATTERN, CLEAR_SELECTION, PLACE_RESOURCE, PLACE_BUILDING, FETCH_BUILDING, FEED_COTTAGES, CHANGE_PHASE, CHANGE_MESSAGE, NEW_GAME, SCORE_TOTAL, SCORE_BUILDING } from '../actions/types';\nexport default ((state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case NEW_GAME:\n      return INITIAL_STATE;\n\n    case SCORE_TOTAL:\n      return _objectSpread({}, state, {\n        scoreTotal: action.payload\n      });\n\n    case SCORE_BUILDING:\n      return _objectSpread({}, state, {\n        buildings: [...state.buildings, state.buildings.map((building, type) => {\n          if (type === action.payload.buildingType) {\n            building.score = action.payload.score;\n          }\n\n          ;\n          console.log(babel);\n          return building;\n        })]\n      });\n\n    case CHANGE_PHASE:\n      return _objectSpread({}, state, {\n        phase: action.payload\n      });\n\n    case CHANGE_MESSAGE:\n      return _objectSpread({}, state, {\n        message: action.payload\n      });\n\n    case SELECT_PAWN:\n      return _objectSpread({}, state, {\n        selectedPawn: action.payload\n      });\n\n    case SELECT_SQUARE:\n      return _objectSpread({}, state, {\n        selectedSquare: action.payload\n      });\n\n    case SELECT_PATTERN:\n      if (state.selectedPattern.find(el => el === action.payload)) {\n        return _objectSpread({}, state, {\n          selectedPattern: state.selectedPattern.filter(el => el !== action.payload)\n        });\n      }\n\n      return _objectSpread({}, state, {\n        selectedPattern: [...state.selectedPattern, action.payload]\n      });\n\n    case CLEAR_SELECTION:\n      return _objectSpread({}, state, {\n        selectedSquare: null,\n        selectedPattern: [],\n        selectedPawn: {}\n      });\n\n    case FETCH_BUILDING:\n      return _objectSpread({}, state, {\n        buildings: [...state.buildings, action.payload]\n      });\n    //find placing recourse and move it to the end of line. Update Board with the recourse. Clear \"selected\"\n\n    case PLACE_RESOURCE:\n      const moveFromIndex = state.resources.indexOf(state.selectedPawn);\n      const movingResource = state.resources[moveFromIndex];\n      state.resources.splice(moveFromIndex, 1);\n      return _objectSpread({}, state, {\n        board: _objectSpread({}, state.board, {\n          [state.selectedSquare]: state.selectedPawn\n        }),\n        selectedSquare: null,\n        selectedPawn: {},\n        resources: [...state.resources, movingResource]\n      });\n\n    case PLACE_BUILDING:\n      state.selectedPattern.forEach(square => {\n        // remove resource only\n        if (state.board[square].type === RESOURCE) {\n          state.board[square] = EMPTY_SQUARE;\n        }\n      });\n      return _objectSpread({}, state, {\n        board: _objectSpread({}, state.board, {\n          [state.selectedSquare]: state.selectedPawn\n        }),\n        selectedSquare: null,\n        selectedPawn: {},\n        selectedPattern: []\n      });\n\n    case FEED_COTTAGES:\n      return _objectSpread({}, state, {\n        board: _objectSpread({}, state.board, {\n          fedCottages: action.payload\n        })\n      });\n\n    default:\n      return state;\n  }\n});\n/*import { combineReducers } from 'redux';\r\n\r\nimport selectedReducer from './selectedReducer';\r\n\r\n\r\nexport default combineReducers({\r\n    selected:selectedReducer\r\n\r\n});*/","map":{"version":3,"sources":["D:\\Pro\\React\\tt\\src\\reducers\\index.js"],"names":["INITIAL_STATE","EMPTY_SQUARE","RESOURCE","SELECT_PAWN","SELECT_SQUARE","SELECT_PATTERN","CLEAR_SELECTION","PLACE_RESOURCE","PLACE_BUILDING","FETCH_BUILDING","FEED_COTTAGES","CHANGE_PHASE","CHANGE_MESSAGE","NEW_GAME","SCORE_TOTAL","SCORE_BUILDING","state","action","type","scoreTotal","payload","buildings","map","building","buildingType","score","console","log","babel","phase","message","selectedPawn","selectedSquare","selectedPattern","find","el","filter","moveFromIndex","resources","indexOf","movingResource","splice","board","forEach","square","fedCottages"],"mappings":"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","sourcesContent":["import { INITIAL_STATE, EMPTY_SQUARE, RESOURCE } from './../components/constants';\r\n\r\nimport {\r\n    SELECT_PAWN,\r\n    SELECT_SQUARE,\r\n    SELECT_PATTERN,\r\n    CLEAR_SELECTION,\r\n    PLACE_RESOURCE,\r\n    PLACE_BUILDING,\r\n    FETCH_BUILDING,\r\n    FEED_COTTAGES,\r\n    CHANGE_PHASE,\r\n    CHANGE_MESSAGE,\r\n    NEW_GAME,\r\n    SCORE_TOTAL,\r\n    SCORE_BUILDING,\r\n} from '../actions/types'\r\n\r\n\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n\r\n        case NEW_GAME:\r\n            return INITIAL_STATE;\r\n\r\n        case SCORE_TOTAL:\r\n            return { ...state, scoreTotal: action.payload };\r\n\r\n\r\n        case SCORE_BUILDING:\r\n            return {\r\n                ...state, buildings: [...state.buildings, state.buildings.map(\r\n                    (building, type) => {\r\n                        if (type === action.payload.buildingType) { building.score = action.payload.score };\r\n                        console.log(babel);\r\n                        return building\r\n                    }\r\n                )]\r\n            };\r\n\r\n        case CHANGE_PHASE:\r\n            return { ...state, phase: action.payload };\r\n\r\n        case CHANGE_MESSAGE:\r\n            return { ...state, message: action.payload };\r\n\r\n        case SELECT_PAWN:\r\n            return { ...state, selectedPawn: action.payload };\r\n\r\n        case SELECT_SQUARE:\r\n            return { ...state, selectedSquare: action.payload };\r\n\r\n        case SELECT_PATTERN:\r\n            if (state.selectedPattern.find(el => el === action.payload)) {\r\n                return { ...state, selectedPattern: state.selectedPattern.filter(el => el !== action.payload) };\r\n            }\r\n            return { ...state, selectedPattern: [...state.selectedPattern, action.payload] };\r\n\r\n        case CLEAR_SELECTION:\r\n            return { ...state, selectedSquare: null, selectedPattern: [], selectedPawn: {} };\r\n\r\n        case FETCH_BUILDING:\r\n            return { ...state, buildings: [...state.buildings, action.payload] };\r\n\r\n        //find placing recourse and move it to the end of line. Update Board with the recourse. Clear \"selected\"\r\n        case PLACE_RESOURCE:\r\n            const moveFromIndex = state.resources.indexOf(state.selectedPawn);\r\n            const movingResource = state.resources[moveFromIndex];\r\n            state.resources.splice(moveFromIndex, 1);\r\n            return {\r\n                ...state,\r\n                board: { ...state.board, [state.selectedSquare]: state.selectedPawn },\r\n                selectedSquare: null,\r\n                selectedPawn: {},\r\n                resources: [...state.resources, movingResource]\r\n            };\r\n\r\n        case PLACE_BUILDING:\r\n            state.selectedPattern.forEach(square => {\r\n                // remove resource only\r\n                if (state.board[square].type === RESOURCE) {\r\n                    state.board[square] = EMPTY_SQUARE;\r\n                }\r\n            })\r\n            return { ...state, board: { ...state.board, [state.selectedSquare]: state.selectedPawn }, selectedSquare: null, selectedPawn: {}, selectedPattern: [] };\r\n\r\n        case FEED_COTTAGES:\r\n            return { ...state, board: { ...state.board, fedCottages: action.payload } };\r\n\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\n\r\n/*import { combineReducers } from 'redux';\r\n\r\nimport selectedReducer from './selectedReducer';\r\n\r\n\r\nexport default combineReducers({\r\n    selected:selectedReducer\r\n\r\n});*/"]},"metadata":{},"sourceType":"module"}