{"ast":null,"code":"var _jsxFileName = \"D:\\\\Pro\\\\React\\\\tlt\\\\src\\\\components\\\\Buttons.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { selectResource, changePhaseTo, placeResource, clearSelection, placeBuilding } from '../actions';\nimport { RESOURCE_PHASE, BUILDING_PHASE, FEEDING_PHASE, EMPTY_SQUARE } from './constants';\n\nclass Buttons extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.plasePawn = () => {\n      if (this.props.phase === RESOURCE_PHASE && this.props.selectedPawn && this.props.selectedSquare) {\n        //place the resource to the grid\n        this.props.placeResource();\n        this.props.clearSelection();\n        this.props.changePhaseTo(BUILDING_PHASE);\n      } else if (this.props.phase === BUILDING_PHASE && this.props.selectedPawn && this.props.selectedSquare) {\n        //place the building to the grid & removing the resources\n        if (this.props.placeBuilding()) //TODO update GRID STATE\n          this.props.clearSelection();\n      }\n\n      ;\n    };\n\n    this.nextRound = () => {\n      if (this.props.phase === BUILDING_PHASE) {\n        this.props.clearSelection(); //check end of game\n\n        if (this.props.board.indexes.find(i => board[i] === EMPTY_SQUARE)) {\n          this.props.changePhaseTo(RESOURCE_PHASE);\n        } else {\n          this.props.changePhaseTo(FEEDING_PHASE);\n        }\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => this.plasePawn(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"Place\"), React.createElement(\"button\", {\n      onClick: () => this.nextRound(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"NEXT\"));\n  }\n\n}\n\n;\n\nconst mapStateToProps = state => {\n  return {\n    selectedPawn: state.selectedPawn,\n    selectedSquare: state.selectedSquare,\n    phase: state.phase,\n    board: state.board\n  };\n};\n\nexport default connect(mapStateToProps, {\n  selectResource,\n  changePhaseTo,\n  placeResource,\n  clearSelection,\n  placeBuilding\n})(Buttons);","map":{"version":3,"sources":["D:\\Pro\\React\\tlt\\src\\components\\Buttons.js"],"names":["React","connect","selectResource","changePhaseTo","placeResource","clearSelection","placeBuilding","RESOURCE_PHASE","BUILDING_PHASE","FEEDING_PHASE","EMPTY_SQUARE","Buttons","Component","plasePawn","props","phase","selectedPawn","selectedSquare","nextRound","board","indexes","find","i","render","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,cAAT,EAAyBC,aAAzB,EAAwCC,aAAxC,EAAuDC,cAAvD,EAAuEC,aAAvE,QAA4F,YAA5F;AACA,SACIC,cADJ,EAEIC,cAFJ,EAGIC,aAHJ,EAIIC,YAJJ,QAKO,aALP;;AAOA,MAAMC,OAAN,SAAsBX,KAAK,CAACY,SAA5B,CAAsC;AAAA;AAAA;;AAAA,SAElCC,SAFkC,GAEtB,MAAM;AACd,UAAI,KAAKC,KAAL,CAAWC,KAAX,KAAqBR,cAArB,IAAuC,KAAKO,KAAL,CAAWE,YAAlD,IAAkE,KAAKF,KAAL,CAAWG,cAAjF,EAAiG;AAC7F;AACA,aAAKH,KAAL,CAAWV,aAAX;AACA,aAAKU,KAAL,CAAWT,cAAX;AACA,aAAKS,KAAL,CAAWX,aAAX,CAAyBK,cAAzB;AACH,OALD,MAKO,IAAI,KAAKM,KAAL,CAAWC,KAAX,KAAqBP,cAArB,IAAuC,KAAKM,KAAL,CAAWE,YAAlD,IAAkE,KAAKF,KAAL,CAAWG,cAAjF,EAAiG;AACpG;AACA,YAAI,KAAKH,KAAL,CAAWR,aAAX,EAAJ,EACI;AACA,eAAKQ,KAAL,CAAWT,cAAX;AAGP;;AAAA;AACJ,KAhBiC;;AAAA,SAkBlCa,SAlBkC,GAkBtB,MAAM;AACd,UAAI,KAAKJ,KAAL,CAAWC,KAAX,KAAqBP,cAAzB,EAAyC;AACrC,aAAKM,KAAL,CAAWT,cAAX,GADqC,CAGrC;;AACA,YAAI,KAAKS,KAAL,CAAWK,KAAX,CAAiBC,OAAjB,CAAyBC,IAAzB,CAA8BC,CAAC,IAAIH,KAAK,CAACG,CAAD,CAAL,KAAaZ,YAAhD,CAAJ,EAAmE;AAC/D,eAAKI,KAAL,CAAWX,aAAX,CAAyBI,cAAzB;AACH,SAFD,MAEO;AACH,eAAKO,KAAL,CAAWX,aAAX,CAAyBM,aAAzB;AACH;AAEJ;AACJ,KA9BiC;AAAA;;AAgClCc,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKV,SAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,EAEI;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKK,SAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,CADJ;AAMH;;AAvCiC;;AAyCrC;;AAED,MAAMM,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHT,IAAAA,YAAY,EAAES,KAAK,CAACT,YADjB;AAEHC,IAAAA,cAAc,EAAEQ,KAAK,CAACR,cAFnB;AAGHF,IAAAA,KAAK,EAAEU,KAAK,CAACV,KAHV;AAIHI,IAAAA,KAAK,EAAEM,KAAK,CAACN;AAJV,GAAP;AAMH,CAPD;;AASA,eAAelB,OAAO,CAClBuB,eADkB,EAElB;AAAEtB,EAAAA,cAAF;AAAkBC,EAAAA,aAAlB;AAAiCC,EAAAA,aAAjC;AAAgDC,EAAAA,cAAhD;AAAgEC,EAAAA;AAAhE,CAFkB,CAAP,CAGbK,OAHa,CAAf","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { selectResource, changePhaseTo, placeResource, clearSelection, placeBuilding } from '../actions';\r\nimport {\r\n    RESOURCE_PHASE,\r\n    BUILDING_PHASE,\r\n    FEEDING_PHASE,\r\n    EMPTY_SQUARE\r\n} from './constants'\r\n\r\nclass Buttons extends React.Component {\r\n\r\n    plasePawn = () => {\r\n        if (this.props.phase === RESOURCE_PHASE && this.props.selectedPawn && this.props.selectedSquare) {\r\n            //place the resource to the grid\r\n            this.props.placeResource();\r\n            this.props.clearSelection();\r\n            this.props.changePhaseTo(BUILDING_PHASE);\r\n        } else if (this.props.phase === BUILDING_PHASE && this.props.selectedPawn && this.props.selectedSquare) {\r\n            //place the building to the grid & removing the resources\r\n            if (this.props.placeBuilding())\r\n                //TODO update GRID STATE\r\n                this.props.clearSelection();\r\n\r\n\r\n        };\r\n    }\r\n    //after resource placing new round can be started\r\n    nextRound = () => {\r\n        if (this.props.phase === BUILDING_PHASE) {\r\n            this.props.clearSelection();\r\n\r\n            //check end of game\r\n            if (this.props.board.indexes.find(i => board[i] === EMPTY_SQUARE)) {\r\n                this.props.changePhaseTo(RESOURCE_PHASE);\r\n            } else {\r\n                this.props.changePhaseTo(FEEDING_PHASE);\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button onClick={() => this.plasePawn()}>Place</button>\r\n                <button onClick={() => this.nextRound()}>NEXT</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        selectedPawn: state.selectedPawn,\r\n        selectedSquare: state.selectedSquare,\r\n        phase: state.phase,\r\n        board: state.board\r\n    }\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    { selectResource, changePhaseTo, placeResource, clearSelection, placeBuilding }\r\n)(Buttons);\r\n"]},"metadata":{},"sourceType":"module"}