{"ast":null,"code":"var _jsxFileName = \"D:\\\\Pro\\\\React\\\\tlt\\\\src\\\\components\\\\Buildings\\\\Building.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchBuilding, selectPawn, changeMessage } from '../../actions';\nimport data from './buildings.json';\nimport { message, BUILDING_PHASE, SCORING_PHASE } from './../constants';\nimport { calcScore } from './scoring';\nimport _ from 'lodash';\nimport preparedPattern from './../preparePattern';\n\nclass Building extends React.Component {\n  testMe(pattern) {\n    //[[12,\"WOOD\"],...] -> [{x: \"1\", y: \"2\", resource: \"WOOD\"},...]\n    const indexToPoint = arr => arr.map(square => {\n      return {\n        x: square[0].toString().charAt(0),\n        y: square[0].toString().charAt(1),\n        resource: square[1]\n      };\n    }); // Move to 11, [{x: \"1\", y: \"2\", resource: \"WOOD\"},...] -> [[12,\"WOOD\"],...] and sort by index\n\n\n    const pointToIndex = arr => {\n      //move to x=1, y=1\n      const dx = Math.min(...arr.map(point => Number(point.x))) - 1;\n      const dy = Math.min(...arr.map(point => Number(point.y))) - 1;\n      arr.forEach(point => {\n        point.x -= dx;\n        point.y -= dy;\n      }); //[{x: \"1\", y: \"2\", resource: \"WOOD\"},...] -> [[12,\"WOOD\"],...]\n\n      return arr.map(point => {\n        const index = point.x.toString() + point.y.toString();\n        return [index, point.resource]; //and sort by index\n      }).sort((a, b) => {\n        return a[0] - b[0];\n      });\n    };\n\n    const rotate = arr => arr.map(point => {\n      return {\n        x: -point.y,\n        y: point.x,\n        resource: point.resource\n      };\n    });\n\n    const mirrorX = arr => arr.map(point => {\n      return {\n        x: -point.x,\n        y: point.y,\n        resource: point.resource\n      };\n    });\n\n    const mirrorY = arr => arr.map(point => {\n      return {\n        x: point.x,\n        y: -point.y,\n        resource: point.resource\n      };\n    });\n\n    const rotated0pattern = indexToPoint(pattern);\n    const rotated1pattern = rotate(rotated0pattern);\n    const rotated2pattern = rotate(rotated1pattern);\n    const rotated3pattern = rotate(rotated2pattern);\n    const rez = [rotated0pattern, mirrorY(rotated0pattern), mirrorX(rotated0pattern), rotated1pattern, mirrorX(rotated1pattern), mirrorY(rotated1pattern), rotated2pattern, mirrorX(rotated2pattern), mirrorY(rotated2pattern), rotated3pattern, mirrorX(rotated3pattern), mirrorY(rotated3pattern)].map(pointPattern => pointToIndex(pointPattern));\n    return _.uniqWith(rez, _.isEqual);\n  }\n\n  selectBuilding() {\n    ///ДУБЛИРУЕТСЯ С КОДОМ ВЫШЕ - отличие в том, что тут берется только title от объекта!!!\n    const pointToIndex = arr => {\n      //move to x=1, y=1\n      const dx = Math.min(...arr.map(point => Number(point.x))) - 1;\n      const dy = Math.min(...arr.map(point => Number(point.y))) - 1;\n      arr.forEach(point => {\n        point.x -= dx;\n        point.y -= dy;\n      }); //[{x: \"1\", y: \"2\", resource: \"WOOD\"},...] -> [[12,\"WOOD\"],...]\n\n      return arr.map(point => {\n        const index = point.x.toString() + point.y.toString();\n        return [index, point.resource.title]; //and sort by index\n      }).sort((a, b) => {\n        return a[0] - b[0];\n      });\n    };\n\n    if (this.props.phase === BUILDING_PHASE) {\n      const pp = preparedPattern(this.props.selectedPattern, this.props.board);\n      const ppp = pointToIndex(pp);\n      let canSelectPawn = this.props.building.patterns.find(pattern => _.isEqual(pattern, ppp));\n\n      if (canSelectPawn) {\n        this.props.selectPawn(this.props.building);\n      }\n\n      this.props.changeMessage(message.selectSquareForBuilding(this.props.building.title, this.props.selectedPattern.length));\n    }\n  }\n\n  componentDidMount() {\n    const building1 = data[this.props.title];\n    building1.patterns = this.testMe(building1.pattern);\n    this.props.fetchBuilding(building1);\n  }\n\n  renderScoring() {\n    if (this.props.phase === SCORING_PHASE) {\n      return calcScore[this.props.building.title](this.props.board);\n    }\n\n    ;\n  }\n\n  renderPattern() {\n    const style = (col, row) => {\n      return {\n        gridColumn: col,\n        gridRow: row\n      };\n    };\n\n    return React.createElement(React.Fragment, null, this.props.building.pattern.map(resource => React.createElement(\"div\", {\n      className: \"resource \".concat(resource[1].toLowerCase()),\n      style: style(resource[0] % 10, Math.floor(resource[0] / 10)),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    })));\n  }\n\n  buttonDisabled() {\n    return this.props.phase === BUILDING_PHASE && this.props.selectedPattern.length !== this.props.building.pattern.length;\n  }\n\n  render() {\n    if (!this.props.building) {\n      return null;\n    } else {\n      return React.createElement(\"div\", {\n        className: \"building\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, this.props.building.title, \" \"), React.createElement(\"div\", {\n        className: \"buildingPattern\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, \" \", this.renderPattern(), \" \"), this.props.building.ability, React.createElement(\"button\", {\n        onClick: () => this.selectBuilding(),\n        disabled: this.buttonDisabled(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: \"/images/\".concat(this.props.building.type, \".png\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      })), this.renderScoring());\n    }\n  }\n\n}\n\n;\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    phase: state.phase,\n    building: state.buildings[ownProps.index],\n    selectedPattern: state.selectedPattern,\n    board: state.board\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchBuilding,\n  selectPawn,\n  changeMessage\n})(Building);","map":{"version":3,"sources":["D:\\Pro\\React\\tlt\\src\\components\\Buildings\\Building.js"],"names":["React","connect","fetchBuilding","selectPawn","changeMessage","data","message","BUILDING_PHASE","SCORING_PHASE","calcScore","_","preparedPattern","Building","Component","testMe","pattern","indexToPoint","arr","map","square","x","toString","charAt","y","resource","pointToIndex","dx","Math","min","point","Number","dy","forEach","index","sort","a","b","rotate","mirrorX","mirrorY","rotated0pattern","rotated1pattern","rotated2pattern","rotated3pattern","rez","pointPattern","uniqWith","isEqual","selectBuilding","title","props","phase","pp","selectedPattern","board","ppp","canSelectPawn","building","patterns","find","selectSquareForBuilding","length","componentDidMount","building1","renderScoring","renderPattern","style","col","row","gridColumn","gridRow","toLowerCase","floor","buttonDisabled","render","ability","type","mapStateToProps","state","ownProps","buildings"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { fetchBuilding, selectPawn, changeMessage } from '../../actions';\r\nimport data from './buildings.json';\r\nimport { message, BUILDING_PHASE, SCORING_PHASE } from './../constants';\r\nimport { calcScore } from './scoring';\r\n\r\n\r\nimport _ from 'lodash';\r\n\r\nimport preparedPattern from './../preparePattern'\r\n\r\n\r\nclass Building extends React.Component {\r\n\r\n    testMe(pattern) {\r\n\r\n        //[[12,\"WOOD\"],...] -> [{x: \"1\", y: \"2\", resource: \"WOOD\"},...]\r\n        const indexToPoint = arr => arr.map(square => {\r\n            return {\r\n                x: square[0].toString().charAt(0),\r\n                y: square[0].toString().charAt(1),\r\n                resource: square[1]\r\n            }\r\n        });\r\n\r\n        // Move to 11, [{x: \"1\", y: \"2\", resource: \"WOOD\"},...] -> [[12,\"WOOD\"],...] and sort by index\r\n        const pointToIndex = arr => {\r\n            //move to x=1, y=1\r\n            const dx = Math.min(...arr.map(point => Number(point.x))) - 1;\r\n            const dy = Math.min(...arr.map(point => Number(point.y))) - 1;\r\n            arr.forEach(point => {\r\n                point.x -= dx;\r\n                point.y -= dy;\r\n            });\r\n            //[{x: \"1\", y: \"2\", resource: \"WOOD\"},...] -> [[12,\"WOOD\"],...]\r\n            return arr.map(point => {\r\n                const index = point.x.toString() + point.y.toString();\r\n                return [index, point.resource]\r\n                //and sort by index\r\n            }).sort((a, b) => { return a[0] - b[0] });\r\n\r\n\r\n        }\r\n\r\n        const rotate = arr => arr.map(point => { return { x: -point.y, y: point.x, resource: point.resource } });\r\n\r\n        const mirrorX = arr => arr.map(point => { return { x: -point.x, y: point.y, resource: point.resource } });\r\n\r\n        const mirrorY = arr => arr.map(point => { return { x: point.x, y: -point.y, resource: point.resource } });\r\n\r\n        const rotated0pattern = indexToPoint(pattern);\r\n        const rotated1pattern = rotate(rotated0pattern);\r\n        const rotated2pattern = rotate(rotated1pattern);\r\n        const rotated3pattern = rotate(rotated2pattern);\r\n\r\n\r\n        const rez = [\r\n            rotated0pattern,\r\n            mirrorY(rotated0pattern),\r\n\r\n            mirrorX(rotated0pattern),\r\n\r\n            rotated1pattern,\r\n            mirrorX(rotated1pattern),\r\n            mirrorY(rotated1pattern),\r\n\r\n            rotated2pattern,\r\n            mirrorX(rotated2pattern),\r\n            mirrorY(rotated2pattern),\r\n\r\n            rotated3pattern,\r\n            mirrorX(rotated3pattern),\r\n            mirrorY(rotated3pattern)\r\n        ].map(pointPattern => pointToIndex(pointPattern));\r\n\r\n        return _.uniqWith(rez, _.isEqual);\r\n    }\r\n\r\n    selectBuilding() {\r\n\r\n        ///ДУБЛИРУЕТСЯ С КОДОМ ВЫШЕ - отличие в том, что тут берется только title от объекта!!!\r\n        const pointToIndex = arr => {\r\n            //move to x=1, y=1\r\n            const dx = Math.min(...arr.map(point => Number(point.x))) - 1;\r\n            const dy = Math.min(...arr.map(point => Number(point.y))) - 1;\r\n            arr.forEach(point => {\r\n                point.x -= dx;\r\n                point.y -= dy;\r\n            });\r\n            //[{x: \"1\", y: \"2\", resource: \"WOOD\"},...] -> [[12,\"WOOD\"],...]\r\n            return arr.map(point => {\r\n                const index = point.x.toString() + point.y.toString();\r\n                return [index, point.resource.title]\r\n                //and sort by index\r\n            }).sort((a, b) => { return a[0] - b[0] });\r\n\r\n\r\n        }\r\n\r\n\r\n        if (this.props.phase === BUILDING_PHASE) {\r\n\r\n            const pp = preparedPattern(this.props.selectedPattern, this.props.board)\r\n            const ppp = pointToIndex(pp);\r\n            let canSelectPawn = this.props.building.patterns.find(pattern => _.isEqual(pattern, ppp));\r\n            if (canSelectPawn) {\r\n                this.props.selectPawn(this.props.building);\r\n\r\n            }\r\n            this.props.changeMessage(message.selectSquareForBuilding(this.props.building.title, this.props.selectedPattern.length));\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const building1 = data[this.props.title];\r\n        building1.patterns = this.testMe(building1.pattern);\r\n        this.props.fetchBuilding(building1);\r\n    }\r\n\r\n    renderScoring() {\r\n        if (this.props.phase === SCORING_PHASE) {\r\n            return calcScore[this.props.building.title](this.props.board)\r\n        };\r\n    }\r\n\r\n    renderPattern() {\r\n        const style = (col, row) => {\r\n            return {\r\n                gridColumn: col,\r\n                gridRow: row\r\n            }\r\n        }\r\n        return (\r\n            <>\r\n                {this.props.building.pattern.map(\r\n                    resource => <div\r\n                        className={`resource ${resource[1].toLowerCase()}`}\r\n                        style={style(resource[0] % 10, Math.floor(resource[0] / 10))}\r\n                    ></div>\r\n                )\r\n                }\r\n            </>\r\n        );\r\n    }\r\n\r\n    buttonDisabled() {\r\n        return (this.props.phase === BUILDING_PHASE && this.props.selectedPattern.length !== this.props.building.pattern.length)\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.building) {\r\n            return null;\r\n        } else {\r\n            return (\r\n                <div className=\"building\">\r\n                 <h5>{this.props.building.title} </h5>\r\n                    <div className=\"buildingPattern\"> {this.renderPattern()} </div>\r\n                    {this.props.building.ability}\r\n                    <button onClick={() => this.selectBuilding()} disabled={this.buttonDisabled()} ><img src={`/images/${this.props.building.type}.png`} /></button>\r\n\r\n                    {this.renderScoring()}\r\n\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        phase: state.phase,\r\n        building: state.buildings[ownProps.index],\r\n        selectedPattern: state.selectedPattern,\r\n        board: state.board\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, { fetchBuilding, selectPawn, changeMessage })(Building);\r\n"]},"metadata":{},"sourceType":"module"}