{"ast":null,"code":"var _jsxFileName = \"D:\\\\Pro\\\\React\\\\tlt\\\\src\\\\components\\\\ResourceSelector.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Resource from './Resource';\nimport { changePhaseTo, placeResource, clearSelection, changeMessage, placeBuilding, feedCottages } from '../actions';\nimport { calcFedCottages } from './Buildings/scoring';\nimport { message, RESOURCE_PHASE, BUILDING_PHASE, FEEDING_PHASE, EMPTY_SQUARE, SCORING_PHASE } from './constants';\nimport '../css/resources.css';\n\nconst placeSelectedResource = props => {\n  props.placeResource();\n  props.clearSelection();\n  props.changePhaseTo(BUILDING_PHASE);\n  props.changeMessage(message.showPattern);\n};\n\nconst placeSelectedBuilding = props => {\n  props.placeBuilding();\n  props.changeMessage(message.successfulBuildingPlacement);\n};\n\nconst nextRound = props => {\n  switch (props.phase) {\n    case BUILDING_PHASE:\n      props.clearSelection(); //check is it empty squares\n\n      if (props.board.indexes.find(i => props.board[i] === EMPTY_SQUARE)) {\n        props.changePhaseTo(RESOURCE_PHASE); //   this.props.changeMessage(message.selectResource);\n      } else {\n        props.changeMessage(\"Переходим к кормежке?\");\n        props.feedCottages(calcFedCottages(props.board, props.buildings));\n        props.changePhaseTo(FEEDING_PHASE);\n      }\n\n      break;\n\n    case FEEDING_PHASE:\n      props.changePhaseTo(SCORING_PHASE);\n      props.changeMessage(\"Переходим к подсчету очков?\");\n      break;\n\n    default:\n      props.changeMessage('зачем нажимать? - нужно лочить кнопку!!!');\n  }\n};\n\nconst renderActionHelper = props => {\n  if (props.phase === RESOURCE_PHASE) {\n    if (!props.selectedPawn.type && !props.selectedSquare) {\n      props.changeMessage(message.selectResourceAndPlace);\n    } else if (!props.selectedPawn.type) {\n      props.changeMessage(message.selectResource);\n    } else if (!props.selectedSquare) {\n      props.changeMessage(message.placeResource(props.selectedPawn.title.toLowerCase()));\n    } else {\n      props.changeMessage(message.confirmResourcePlacement(props.selectedPawn.title.toLowerCase()));\n      return React.createElement(\"button\", {\n        onClick: () => placeSelectedResource(props),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \" PLACE\");\n    }\n  } else if (props.phase === BUILDING_PHASE) {\n    if (props.selectedPawn.type >= 0 && props.selectedSquare) {\n      return React.createElement(React.Fragment, null, React.createElement(\"button\", {\n        onClick: () => nextRound(props),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"NEXT\"), React.createElement(\"button\", {\n        onClick: () => placeSelectedBuilding(props),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \" PLACE\"));\n    }\n\n    return React.createElement(\"button\", {\n      onClick: () => nextRound(props),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"NEXT\");\n  }\n};\n\nconst ResourceSelector = props => {\n  return React.createElement(\"div\", {\n    className: \"resourceSelector\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"Select resource\", React.createElement(Resource, {\n    id: 0,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }), React.createElement(Resource, {\n    id: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }), React.createElement(Resource, {\n    id: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }), props.message, \" \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }), renderActionHelper(props));\n};\n\nconst mapStateToProps = state => {\n  return {\n    selectedPawn: state.selectedPawn,\n    selectedSquare: state.selectedSquare,\n    phase: state.phase,\n    board: state.board,\n    buildings: state.buildings,\n    message: state.message\n  };\n};\n\nexport default connect(mapStateToProps, {\n  changePhaseTo,\n  placeResource,\n  clearSelection,\n  changeMessage,\n  placeBuilding,\n  feedCottages\n})(ResourceSelector);\n/*\r\nplasePawn = () => {\r\n    if (this.props.phase === RESOURCE_PHASE && this.props.selectedPawn && this.props.selectedSquare) {\r\n        //place the resource to the grid\r\n        this.props.placeResource();\r\n        this.props.clearSelection();\r\n        this.props.changePhaseTo(BUILDING_PHASE);\r\n        this.props.changeMessage(message.showPattern);\r\n    }\r\n}\r\n*/","map":{"version":3,"sources":["D:\\Pro\\React\\tlt\\src\\components\\ResourceSelector.js"],"names":["React","connect","Resource","changePhaseTo","placeResource","clearSelection","changeMessage","placeBuilding","feedCottages","calcFedCottages","message","RESOURCE_PHASE","BUILDING_PHASE","FEEDING_PHASE","EMPTY_SQUARE","SCORING_PHASE","placeSelectedResource","props","showPattern","placeSelectedBuilding","successfulBuildingPlacement","nextRound","phase","board","indexes","find","i","buildings","renderActionHelper","selectedPawn","type","selectedSquare","selectResourceAndPlace","selectResource","title","toLowerCase","confirmResourcePlacement","ResourceSelector","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nimport Resource from './Resource';\r\nimport { changePhaseTo, placeResource, clearSelection, changeMessage, placeBuilding, feedCottages  } from '../actions';\r\nimport { calcFedCottages } from './Buildings/scoring';\r\nimport {\r\n    message,\r\n    RESOURCE_PHASE,\r\n    BUILDING_PHASE,\r\n    FEEDING_PHASE,\r\n    EMPTY_SQUARE,\r\n    SCORING_PHASE\r\n} from './constants';\r\nimport '../css/resources.css';\r\n\r\n\r\nconst placeSelectedResource = props => {\r\n    props.placeResource();\r\n    props.clearSelection();\r\n    props.changePhaseTo(BUILDING_PHASE);\r\n    props.changeMessage(message.showPattern);\r\n};\r\n\r\nconst placeSelectedBuilding = props => {\r\n    props.placeBuilding();\r\n    props.changeMessage(message.successfulBuildingPlacement);\r\n}\r\n\r\nconst nextRound = (props) => {\r\n    switch (props.phase) {\r\n\r\n        case BUILDING_PHASE:\r\n            props.clearSelection();\r\n            //check is it empty squares\r\n            if (props.board.indexes.find(i => props.board[i] === EMPTY_SQUARE)) {\r\n                props.changePhaseTo(RESOURCE_PHASE);\r\n                //   this.props.changeMessage(message.selectResource);\r\n            } else {\r\n                props.changeMessage(\"Переходим к кормежке?\");\r\n                props.feedCottages(\r\n                    calcFedCottages(props.board, props.buildings)\r\n                );\r\n                props.changePhaseTo(FEEDING_PHASE);\r\n            }\r\n            break;\r\n\r\n        case FEEDING_PHASE:\r\n            props.changePhaseTo(SCORING_PHASE);\r\n            props.changeMessage(\"Переходим к подсчету очков?\");\r\n            break;\r\n\r\n        default:\r\n            props.changeMessage('зачем нажимать? - нужно лочить кнопку!!!');\r\n    }\r\n};\r\n\r\nconst renderActionHelper = props => {\r\n    if (props.phase === RESOURCE_PHASE) {\r\n        if (!props.selectedPawn.type && !props.selectedSquare) {\r\n            props.changeMessage(message.selectResourceAndPlace);\r\n        } else if (!props.selectedPawn.type) {\r\n            props.changeMessage(message.selectResource);\r\n\r\n        } else if (!props.selectedSquare) {\r\n            props.changeMessage(message.placeResource(props.selectedPawn.title.toLowerCase()));\r\n        } else {\r\n            props.changeMessage(message.confirmResourcePlacement(props.selectedPawn.title.toLowerCase()));\r\n\r\n            return <button onClick={() => placeSelectedResource(props)}> PLACE</button>\r\n        }\r\n\r\n    } else if (props.phase === BUILDING_PHASE) {\r\n\r\n        if (props.selectedPawn.type >= 0 && props.selectedSquare) {\r\n            return (\r\n                <>\r\n                    <button onClick={() => nextRound(props)}>NEXT</button>\r\n                    <button onClick={() => placeSelectedBuilding(props)}> PLACE</button>\r\n                </>\r\n            )\r\n        }\r\n\r\n        return <button onClick={() => nextRound(props)}>NEXT</button>\r\n            ;\r\n    }\r\n}\r\n\r\nconst ResourceSelector = props => {\r\n    return (\r\n        <div className=\"resourceSelector\">\r\n            Select resource\r\n            <Resource id={0} />\r\n            <Resource id={1} />\r\n            <Resource id={2} />\r\n            {props.message} <br />\r\n            {renderActionHelper(props)}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        selectedPawn: state.selectedPawn,\r\n        selectedSquare: state.selectedSquare,\r\n        phase: state.phase,\r\n        board: state.board,\r\n        buildings: state.buildings,\r\n        message: state.message\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, { changePhaseTo, placeResource, clearSelection, changeMessage, placeBuilding, feedCottages  })(ResourceSelector);\r\n\r\n\r\n\r\n\r\n/*\r\nplasePawn = () => {\r\n    if (this.props.phase === RESOURCE_PHASE && this.props.selectedPawn && this.props.selectedSquare) {\r\n        //place the resource to the grid\r\n        this.props.placeResource();\r\n        this.props.clearSelection();\r\n        this.props.changePhaseTo(BUILDING_PHASE);\r\n        this.props.changeMessage(message.showPattern);\r\n    }\r\n}\r\n*/"]},"metadata":{},"sourceType":"module"}