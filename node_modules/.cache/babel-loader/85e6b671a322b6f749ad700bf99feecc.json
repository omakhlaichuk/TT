{"ast":null,"code":"var _jsxFileName = \"D:\\\\Pro\\\\React\\\\tt\\\\src\\\\components\\\\ToolbarWithResources.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Resource from './Resource';\nimport { changePhaseTo, placeResource, clearSelection, changeMessage, placeBuilding, feedCottages, newGame, scoreTotal } from '../actions';\nimport { calcFedCottages } from './Buildings/scoring';\nimport InstantEffects from './Buildings/instantEffect';\nimport { message, RESOURCE, FEEDING_PHASE, SCORING_PHASE, GAME_PHASE } from './constants';\nimport '../css/resources.css';\n\nconst placeSelectedResource = props => {\n  props.placeResource();\n  props.clearSelection();\n  props.changeMessage(message.showPattern);\n};\n\nconst placeSelectedBuilding = props => {\n  //invoke the building instant effect if present\n  if (props.selectedPawn.instantEffect) {\n    instEff = React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \"Test me!!!\");\n  }\n\n  props.placeBuilding();\n  props.changeMessage(message.successfulBuildingPlacement);\n};\n\nconst nextRound = props => {\n  switch (props.phase) {\n    case GAME_PHASE:\n      props.changePhaseTo(FEEDING_PHASE);\n      props.clearSelection();\n      const fedCottages = calcFedCottages(props.board, props.buildings);\n      props.feedCottages(fedCottages);\n      props.changeMessage(message.goToFeedingPhase(fedCottages));\n      break;\n\n    case FEEDING_PHASE:\n      props.changePhaseTo(SCORING_PHASE);\n      props.changeMessage(message.goToGamePhase);\n      break;\n\n    case SCORING_PHASE:\n      props.changePhaseTo(GAME_PHASE);\n      props.newGame();\n      break;\n\n    default:\n      props.changeMessage('зачем нажимать? - нужно лочить кнопку!!!');\n  }\n};\n\nconst renderPlacingButtons = props => {\n  if (props.selectedSquare) {\n    if (props.selectedPawn.type === RESOURCE) {\n      return React.createElement(\"button\", {\n        onClick: () => placeSelectedResource(props),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, \" PLACE RESOURCE\");\n    } else if (props.selectedPawn.type >= 0) {\n      return React.createElement(\"button\", {\n        onClick: () => placeSelectedBuilding(props),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \" PLACE BUILDING\");\n    }\n  }\n};\n\nconst totalScore = props => {\n  if (props.phase === SCORING_PHASE) {\n    let scoring = 0;\n    props.buildings.forEach(building => {\n      if (building.score) {\n        scoring += building.score;\n      }\n\n      ;\n    });\n    props.board.indexes.forEach(index => {\n      if (!(props.board[index].type >= 0)) {\n        scoring--;\n      }\n    });\n    props.scoreTotal(scoring);\n    return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"Total score: \", props.score, \"  \");\n  }\n\n  ;\n};\n\nconst renderResources = phase => {\n  if (phase === GAME_PHASE) {\n    return React.createElement(React.Fragment, null, \"Available resources:\", React.createElement(Resource, {\n      id: 0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), React.createElement(Resource, {\n      id: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), React.createElement(Resource, {\n      id: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }));\n  }\n};\n\nlet instEff = 'null';\n\nconst ToolbarWithResources = props => {\n  return React.createElement(\"div\", {\n    className: \"resourceSelector\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, renderResources(props.phase), totalScore(props), props.message, \" \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }), renderPlacingButtons(props), React.createElement(\"button\", {\n    onClick: () => nextRound(props),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, message.changePhaseBtn(props.phase)), instEff);\n};\n\nconst mapStateToProps = state => {\n  return {\n    selectedPawn: state.selectedPawn,\n    selectedSquare: state.selectedSquare,\n    phase: state.phase,\n    board: state.board,\n    buildings: state.buildings,\n    message: state.message,\n    score: state.score\n  };\n};\n\nexport default connect(mapStateToProps, {\n  changePhaseTo,\n  placeResource,\n  clearSelection,\n  changeMessage,\n  placeBuilding,\n  feedCottages,\n  newGame,\n  scoreTotal\n})(ToolbarWithResources);","map":{"version":3,"sources":["D:\\Pro\\React\\tt\\src\\components\\ToolbarWithResources.js"],"names":["React","connect","Resource","changePhaseTo","placeResource","clearSelection","changeMessage","placeBuilding","feedCottages","newGame","scoreTotal","calcFedCottages","InstantEffects","message","RESOURCE","FEEDING_PHASE","SCORING_PHASE","GAME_PHASE","placeSelectedResource","props","showPattern","placeSelectedBuilding","selectedPawn","instantEffect","instEff","successfulBuildingPlacement","nextRound","phase","fedCottages","board","buildings","goToFeedingPhase","goToGamePhase","renderPlacingButtons","selectedSquare","type","totalScore","scoring","forEach","building","score","indexes","index","renderResources","ToolbarWithResources","changePhaseBtn","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nimport Resource from './Resource';\r\nimport {\r\n    changePhaseTo,\r\n    placeResource,\r\n    clearSelection,\r\n    changeMessage,\r\n    placeBuilding,\r\n    feedCottages,\r\n    newGame,\r\n    scoreTotal\r\n} from '../actions';\r\nimport { calcFedCottages } from './Buildings/scoring';\r\nimport InstantEffects from './Buildings/instantEffect';\r\nimport {\r\n    message,\r\n    RESOURCE,\r\n    FEEDING_PHASE,\r\n    SCORING_PHASE,\r\n    GAME_PHASE\r\n} from './constants';\r\nimport '../css/resources.css';\r\n\r\n\r\nconst placeSelectedResource = props => {\r\n    props.placeResource();\r\n    props.clearSelection();\r\n    props.changeMessage(message.showPattern);\r\n};\r\n\r\nconst placeSelectedBuilding = props => {\r\n    //invoke the building instant effect if present\r\n    if (props.selectedPawn.instantEffect) {\r\n        instEff = <button>Test me!!!</button>;\r\n    }\r\n    props.placeBuilding();\r\n    props.changeMessage(message.successfulBuildingPlacement);\r\n\r\n}\r\n\r\nconst nextRound = (props) => {\r\n    switch (props.phase) {\r\n\r\n        case GAME_PHASE:\r\n            props.changePhaseTo(FEEDING_PHASE);\r\n            props.clearSelection();\r\n            const fedCottages = calcFedCottages(props.board, props.buildings);\r\n            props.feedCottages(fedCottages);\r\n            props.changeMessage(message.goToFeedingPhase(fedCottages));\r\n            break;\r\n\r\n        case FEEDING_PHASE:\r\n            props.changePhaseTo(SCORING_PHASE);\r\n            props.changeMessage(message.goToGamePhase);\r\n            break;\r\n\r\n        case SCORING_PHASE:\r\n            props.changePhaseTo(GAME_PHASE);\r\n            props.newGame();\r\n            break;\r\n\r\n        default:\r\n            props.changeMessage('зачем нажимать? - нужно лочить кнопку!!!');\r\n    }\r\n};\r\n\r\nconst renderPlacingButtons = props => {\r\n    if (props.selectedSquare) {\r\n        if (props.selectedPawn.type === RESOURCE) {\r\n            return <button onClick={() => placeSelectedResource(props)}> PLACE RESOURCE</button>;\r\n        } else if (props.selectedPawn.type >= 0) {\r\n            return <button onClick={() => placeSelectedBuilding(props)}> PLACE BUILDING</button>;\r\n        }\r\n    }\r\n}\r\n\r\nconst totalScore = props => {\r\n    if (props.phase === SCORING_PHASE) {\r\n        let scoring = 0;\r\n        props.buildings.forEach(building => {\r\n            if (building.score) { scoring += building.score };\r\n        });\r\n\r\n        props.board.indexes.forEach(index => {\r\n            if (!(props.board[index].type >= 0)) {\r\n                scoring--;\r\n            }\r\n        })\r\n        props.scoreTotal(scoring);\r\n\r\n        return <p>Total score: {props.score}  </p>;\r\n    };\r\n}\r\n\r\nconst renderResources = phase => {\r\n    if (phase === GAME_PHASE) {\r\n        return (\r\n            <>\r\n                Available resources:\r\n                <Resource id={0} />\r\n                <Resource id={1} />\r\n                <Resource id={2} />\r\n            </>\r\n        );\r\n    }\r\n}\r\nlet instEff = 'null';\r\n\r\nconst ToolbarWithResources = props => {\r\n\r\n    return (\r\n        <div className=\"resourceSelector\">\r\n            {renderResources(props.phase)}\r\n            {totalScore(props)}\r\n            {props.message} <br />\r\n            {renderPlacingButtons(props)}\r\n            <button onClick={() => nextRound(props)}>\r\n            {message.changePhaseBtn(props.phase)}\r\n            </button>\r\n            {instEff}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        selectedPawn: state.selectedPawn,\r\n        selectedSquare: state.selectedSquare,\r\n        phase: state.phase,\r\n        board: state.board,\r\n        buildings: state.buildings,\r\n        message: state.message,\r\n        score: state.score,\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps,\r\n    {\r\n        changePhaseTo,\r\n        placeResource,\r\n        clearSelection,\r\n        changeMessage,\r\n        placeBuilding,\r\n        feedCottages,\r\n        newGame,\r\n        scoreTotal\r\n    })(ToolbarWithResources);"]},"metadata":{},"sourceType":"module"}