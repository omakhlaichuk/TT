{"ast":null,"code":"var _jsxFileName = \"D:\\\\Pro\\\\React\\\\tlt\\\\src\\\\components\\\\Buildings\\\\Building.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchBuilding, selectPawn, changeMessage } from '../../actions';\nimport data from './buildings.json';\nimport { message, BUILDING_PHASE, SCORING_PHASE } from './../constants';\nimport { calcScore } from './scoring';\n\nclass Building extends React.Component {\n  testMe(pattern) {\n    //[[12,\"WOOD\"],...] -> [{x: \"1\", y: \"2\", resource: \"WOOD\"},...]\n    const indexToPoint = arr => arr.map(square => {\n      return {\n        x: square[0].toString().charAt(0),\n        y: square[0].toString().charAt(1),\n        resource: square[1]\n      };\n    }); // Move to 11, [{x: \"1\", y: \"2\", resource: \"WOOD\"},...] -> [[12,\"WOOD\"],...] and sort by index\n\n\n    const pointToIndex = arr => {\n      //move to x=1, y=1\n      const dx = Math.min(...arr.map(point => Number(point.x))) - 1;\n      const dy = Math.min(...arr.map(point => Number(point.y))) - 1;\n      arr.forEach(point => {\n        point.x -= dx;\n        point.y -= dy;\n      }); //[{x: \"1\", y: \"2\", resource: \"WOOD\"},...] -> [[12,\"WOOD\"],...]\n\n      return arr.map(point => {\n        const index = point.x.toString() + point.y.toString();\n        console.log(index);\n        return [index, point.resource]; //and sort by index\n      }).sort((a, b) => {\n        return a[0] - b[0];\n      });\n    };\n\n    const rotate = arr => arr.map(point => {\n      return {\n        x: -point.y,\n        y: point.x,\n        resource: point.resource\n      };\n    });\n\n    const mirrorX = arr => arr.map(point => {\n      return {\n        x: -point.x,\n        y: point.y,\n        resource: point.resource\n      };\n    });\n\n    const mirrorY = arr => arr.map(point => {\n      return {\n        x: point.x,\n        y: -point.y,\n        resource: point.resource\n      };\n    });\n\n    rez = [pointToIndex(indexToPoint(pattern))];\n    console.log(rez);\n  }\n\n  selectBuilding() {\n    if (this.props.phase === BUILDING_PHASE) {\n      if (this.props.selectedPattern.length && \"Pattern is OK\") {\n        this.props.selectPawn(this.props.building);\n      }\n\n      this.props.changeMessage(message.selectSquareForBuilding(this.props.building.title, this.props.selectedPattern.length));\n    }\n  }\n\n  componentDidMount() {\n    this.props.fetchBuilding(data[this.props.title]);\n  }\n\n  renderScoring() {\n    if (this.props.phase === SCORING_PHASE) {\n      return calcScore[this.props.building.title](this.props.board);\n    }\n\n    ;\n  }\n\n  render() {\n    if (!this.props.building) {\n      return null;\n    } else {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: () => this.selectBuilding(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, this.props.building.title), this.renderScoring(), React.createElement(\"button\", {\n        onClick: () => this.testMe(this.props.building.pattern),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, \" testMe \"));\n    }\n  }\n\n}\n\n;\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    phase: state.phase,\n    building: state.buildings[ownProps.index],\n    selectedPattern: state.selectedPattern,\n    board: state.board\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchBuilding,\n  selectPawn,\n  changeMessage\n})(Building);","map":{"version":3,"sources":["D:\\Pro\\React\\tlt\\src\\components\\Buildings\\Building.js"],"names":["React","connect","fetchBuilding","selectPawn","changeMessage","data","message","BUILDING_PHASE","SCORING_PHASE","calcScore","Building","Component","testMe","pattern","indexToPoint","arr","map","square","x","toString","charAt","y","resource","pointToIndex","dx","Math","min","point","Number","dy","forEach","index","console","log","sort","a","b","rotate","mirrorX","mirrorY","rez","selectBuilding","props","phase","selectedPattern","length","building","selectSquareForBuilding","title","componentDidMount","renderScoring","board","render","mapStateToProps","state","ownProps","buildings"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { fetchBuilding, selectPawn, changeMessage } from '../../actions';\r\nimport data from './buildings.json';\r\nimport { message, BUILDING_PHASE, SCORING_PHASE } from './../constants';\r\nimport { calcScore } from './scoring';\r\n\r\n\r\n\r\nclass Building extends React.Component {\r\n\r\n    testMe(pattern) {\r\n\r\n        //[[12,\"WOOD\"],...] -> [{x: \"1\", y: \"2\", resource: \"WOOD\"},...]\r\n        const indexToPoint = arr => arr.map(square => {\r\n            return {\r\n                x: square[0].toString().charAt(0),\r\n                y: square[0].toString().charAt(1),\r\n                resource: square[1]\r\n            }\r\n        });\r\n\r\n        // Move to 11, [{x: \"1\", y: \"2\", resource: \"WOOD\"},...] -> [[12,\"WOOD\"],...] and sort by index\r\n        const pointToIndex = arr => {\r\n            //move to x=1, y=1\r\n            const dx = Math.min(...arr.map(point => Number(point.x))) - 1;\r\n            const dy = Math.min(...arr.map(point => Number(point.y))) - 1;\r\n            arr.forEach(point => {\r\n                point.x -= dx;\r\n                point.y -= dy;\r\n            });\r\n            //[{x: \"1\", y: \"2\", resource: \"WOOD\"},...] -> [[12,\"WOOD\"],...]\r\n            return arr.map(point => {\r\n                const index = point.x.toString() + point.y.toString();\r\n                console.log(index);\r\n                return [index, point.resource]\r\n            //and sort by index\r\n            }).sort((a, b) => { return a[0] - b[0] });\r\n\r\n\r\n        }\r\n\r\n        const rotate = arr => arr.map(point => { return { x: -point.y, y: point.x, resource: point.resource } });\r\n\r\n        const mirrorX = arr => arr.map(point => { return { x: -point.x, y: point.y, resource: point.resource } });\r\n\r\n        const mirrorY = arr => arr.map(point => { return { x: point.x, y: -point.y, resource: point.resource } });\r\n\r\n        rez = [\r\n            pointToIndex(indexToPoint(pattern))\r\n        ];\r\n\r\n\r\n        console.log(rez);\r\n\r\n\r\n\r\n    }\r\n\r\n    selectBuilding() {\r\n        if (this.props.phase === BUILDING_PHASE) {\r\n            if (this.props.selectedPattern.length && \"Pattern is OK\") {\r\n                this.props.selectPawn(this.props.building);\r\n\r\n            }\r\n            this.props.changeMessage(message.selectSquareForBuilding(this.props.building.title, this.props.selectedPattern.length));\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchBuilding(data[this.props.title]);\r\n    }\r\n\r\n    renderScoring() {\r\n        if (this.props.phase === SCORING_PHASE) {\r\n            return calcScore[this.props.building.title](this.props.board)\r\n        };\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.building) {\r\n            return null;\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <button onClick={() => this.selectBuilding()}>{this.props.building.title}</button>\r\n                    {this.renderScoring()}\r\n                    <button onClick={() => this.testMe(this.props.building.pattern)}> testMe </button>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        phase: state.phase,\r\n        building: state.buildings[ownProps.index],\r\n        selectedPattern: state.selectedPattern,\r\n        board: state.board\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, { fetchBuilding, selectPawn, changeMessage })(Building);\r\n"]},"metadata":{},"sourceType":"module"}