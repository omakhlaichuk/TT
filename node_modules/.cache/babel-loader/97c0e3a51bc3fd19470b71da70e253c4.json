{"ast":null,"code":"import _objectSpread from \"D:\\\\Pro\\\\React\\\\tlt\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { RESOURCE_PHASE, EMPTY_SQUARE } from './../components/constants';\nimport { messageSelectResource } from './../components/messages';\nimport { SELECT_PAWN, SELECT_SQUARE, SELECT_PATTERN, CLEAR_SELECTION, PLACE_RESOURCE, PLACE_BUILDING, FETCH_BUILDING, CHANGE_PHASE, CHANGE_MESSAGE } from '../actions/types';\nconst INITIAL_BOARD = {\n  indexes: [{\n    x: 1,\n    y: 1\n  }, 12, 13, 14, 21, 22, 23, 24, 31, 32, 33, 34, 41, 42, 43, 44]\n};\nINITIAL_BOARD.indexes.forEach(index => {\n  INITIAL_BOARD[index] = {\n    occupant: \"WOOD\"\n  };\n});\nINITIAL_BOARD[{\n  x: 1,\n  y: 1\n}] = {\n  occupant: EMPTY_SQUARE\n}; //  11: \"BLOCK\",\n///  12: \"wheat\",\n\nconst INITIAL_STATE = {\n  phase: RESOURCE_PHASE,\n  // phase: BUILDING_PHASE,\n  selectedPawn: null,\n  selectedSquare: null,\n  selectedPattern: [],\n  buildings: [],\n  board: INITIAL_BOARD,\n  message: messageSelectResource()\n};\nexport default ((state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case CHANGE_PHASE:\n      return _objectSpread({}, state, {\n        phase: action.payload\n      });\n\n    case CHANGE_MESSAGE:\n      return _objectSpread({}, state, {\n        message: action.payload\n      });\n\n    case SELECT_PAWN:\n      return _objectSpread({}, state, {\n        selectedPawn: action.payload\n      });\n\n    case SELECT_SQUARE:\n      return _objectSpread({}, state, {\n        selectedSquare: action.payload\n      });\n\n    case SELECT_PATTERN:\n      if (state.selectedPattern.find(el => el === action.payload)) {\n        return _objectSpread({}, state, {\n          selectedPattern: state.selectedPattern.filter(el => el !== action.payload)\n        });\n      }\n\n      return _objectSpread({}, state, {\n        selectedPattern: [...state.selectedPattern, action.payload]\n      });\n\n    case CLEAR_SELECTION:\n      return _objectSpread({}, state, {\n        selectedSquare: null,\n        selectedPattern: [],\n        selectedPawn: null\n      });\n\n    case FETCH_BUILDING:\n      return _objectSpread({}, state, {\n        buildings: [...state.buildings, action.payload]\n      });\n\n    case PLACE_RESOURCE:\n      return _objectSpread({}, state, {\n        board: _objectSpread({}, state.board, {\n          [state.selectedSquare]: {\n            occupant: state.selectedPawn\n          }\n        }),\n        selectedSquare: null,\n        selectedPawn: null\n      });\n\n    case PLACE_BUILDING:\n      state.selectedPattern.forEach(cell => {\n        state.board[cell] = EMPTY_SQUARE; //some problem with building=resource joker!!!\n      });\n      return _objectSpread({}, state, {\n        board: _objectSpread({}, state.board, {\n          [state.selectedSquare]: {\n            occupant: state.selectedPawn\n          }\n        }),\n        selectedSquare: null,\n        selectedPawn: null,\n        selectedPattern: []\n      });\n\n    default:\n      return state;\n  }\n});\n/*import { combineReducers } from 'redux';\r\n\r\nimport selectedReducer from './selectedReducer';\r\n\r\n\r\nexport default combineReducers({\r\n    selected:selectedReducer\r\n\r\n});*/","map":{"version":3,"sources":["D:\\Pro\\React\\tlt\\src\\reducers\\index.js"],"names":["RESOURCE_PHASE","EMPTY_SQUARE","messageSelectResource","SELECT_PAWN","SELECT_SQUARE","SELECT_PATTERN","CLEAR_SELECTION","PLACE_RESOURCE","PLACE_BUILDING","FETCH_BUILDING","CHANGE_PHASE","CHANGE_MESSAGE","INITIAL_BOARD","indexes","x","y","forEach","index","occupant","INITIAL_STATE","phase","selectedPawn","selectedSquare","selectedPattern","buildings","board","message","state","action","type","payload","find","el","filter","cell"],"mappings":"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","sourcesContent":["import { RESOURCE_PHASE, EMPTY_SQUARE } from './../components/constants';\r\n\r\nimport { messageSelectResource } from './../components/messages';\r\n\r\nimport {\r\n    SELECT_PAWN,\r\n    SELECT_SQUARE,\r\n    SELECT_PATTERN,\r\n    CLEAR_SELECTION,\r\n    PLACE_RESOURCE,\r\n    PLACE_BUILDING,\r\n    FETCH_BUILDING,\r\n    CHANGE_PHASE,\r\n    CHANGE_MESSAGE\r\n\r\n} from '../actions/types'\r\n\r\nconst INITIAL_BOARD = {\r\n    indexes: [{x: 1, y: 1}, 12, 13, 14, 21, 22, 23, 24, 31, 32, 33, 34, 41, 42, 43, 44]\r\n}\r\n\r\nINITIAL_BOARD.indexes.forEach(index => {\r\n    INITIAL_BOARD[index] = { occupant: \"WOOD\" };\r\n});\r\nINITIAL_BOARD[{x: 1, y: 1}] = { occupant: EMPTY_SQUARE };\r\n//  11: \"BLOCK\",\r\n///  12: \"wheat\",\r\n\r\nconst INITIAL_STATE = {\r\n    phase: RESOURCE_PHASE,\r\n    // phase: BUILDING_PHASE,\r\n    selectedPawn: null,\r\n    selectedSquare: null,\r\n    selectedPattern: [],\r\n    buildings: [],\r\n    board: INITIAL_BOARD,\r\n    message: messageSelectResource()\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n\r\n        case CHANGE_PHASE:\r\n            return { ...state, phase: action.payload };\r\n\r\n        case CHANGE_MESSAGE:\r\n            return { ...state, message: action.payload };\r\n\r\n        case SELECT_PAWN:\r\n            return { ...state, selectedPawn: action.payload };\r\n\r\n        case SELECT_SQUARE:\r\n            return { ...state, selectedSquare: action.payload };\r\n\r\n        case SELECT_PATTERN:\r\n            if (state.selectedPattern.find(el => el === action.payload)) {\r\n                return { ...state, selectedPattern: state.selectedPattern.filter(el => el !== action.payload) };\r\n            }\r\n            return { ...state, selectedPattern: [...state.selectedPattern, action.payload] };\r\n\r\n        case CLEAR_SELECTION:\r\n            return { ...state, selectedSquare: null, selectedPattern: [], selectedPawn: null };\r\n\r\n        case FETCH_BUILDING:\r\n            return { ...state, buildings: [...state.buildings, action.payload] };\r\n\r\n\r\n        case PLACE_RESOURCE:\r\n            return { ...state, board: { ...state.board, [state.selectedSquare]: { occupant:  state.selectedPawn } }, selectedSquare: null, selectedPawn: null };\r\n\r\n        case PLACE_BUILDING:\r\n            state.selectedPattern.forEach(cell => {\r\n                state.board[cell] = EMPTY_SQUARE; //some problem with building=resource joker!!!\r\n            })\r\n            return { ...state, board: { ...state.board, [state.selectedSquare]: { occupant: state.selectedPawn } }, selectedSquare: null, selectedPawn: null, selectedPattern: [] };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\n\r\n/*import { combineReducers } from 'redux';\r\n\r\nimport selectedReducer from './selectedReducer';\r\n\r\n\r\nexport default combineReducers({\r\n    selected:selectedReducer\r\n\r\n});*/"]},"metadata":{},"sourceType":"module"}