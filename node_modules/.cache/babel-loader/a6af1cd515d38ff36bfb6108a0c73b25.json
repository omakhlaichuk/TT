{"ast":null,"code":"import _ from 'lodash'; //                        style={style(resource[0] % 10, Math.floor(resource[0] / 10))}\n\nexport const pointToIndex = (arr, title) => {\n  //move to x=1, y=1\n  const dx = Math.min(...arr.map(point => Number(point.x))) - 1;\n  const dy = Math.min(...arr.map(point => Number(point.y))) - 1;\n  arr.forEach(point => {\n    point.x -= dx;\n    point.y -= dy;\n  }); //[{x: \"1\", y: \"2\", resource: \"WOOD\"},...] -> [[12,\"WOOD\"],...]\n\n  return arr.map(point => {\n    const index = point.x.toString() + point.y.toString();\n    return title ? [index, point.resource.title] : [index, point.resource]; //and sort by index\n  }).sort((a, b) => {\n    return a[0] - b[0];\n  });\n};\nexport const preparedPattern = (pattern, board) => {\n  const preparedPattern = pattern.map(cell => {\n    return {\n      x: cell.toString().charAt(0),\n      y: cell.toString().charAt(1),\n      resource: board[cell]\n    };\n  });\n  const dx = Math.min(...preparedPattern.map(cell => Number(cell.x))) - 1;\n  const dy = Math.min(...preparedPattern.map(cell => Number(cell.y))) - 1;\n  return preparedPattern.map(cell => {\n    return {\n      x: cell.x - dx,\n      y: cell.y - dy,\n      resource: cell.resource\n    };\n  });\n};\nexport const rotateAndMirrorPattern = pattern => {\n  //[[12,\"WOOD\"],...] -> [{x: \"1\", y: \"2\", resource: \"WOOD\"},...]\n  const indexToPoint = arr => arr.map(square => {\n    return {\n      x: square[0].toString().charAt(0),\n      y: square[0].toString().charAt(1),\n      resource: square[1]\n    };\n  }); // Move to 11, [{x: \"1\", y: \"2\", resource: \"WOOD\"},...] -> [[12,\"WOOD\"],...] and sort by index\n\n\n  const rotate = arr => arr.map(point => {\n    return {\n      x: -point.y,\n      y: point.x,\n      resource: point.resource\n    };\n  });\n\n  const mirrorX = arr => arr.map(point => {\n    return {\n      x: -point.x,\n      y: point.y,\n      resource: point.resource\n    };\n  });\n\n  const mirrorY = arr => arr.map(point => {\n    return {\n      x: point.x,\n      y: -point.y,\n      resource: point.resource\n    };\n  });\n\n  const rotated0pattern = indexToPoint(pattern);\n  const rotated1pattern = rotate(rotated0pattern);\n  const rotated2pattern = rotate(rotated1pattern);\n  const rotated3pattern = rotate(rotated2pattern);\n  const rez = [rotated0pattern, mirrorY(rotated0pattern), mirrorX(rotated0pattern), rotated1pattern, mirrorX(rotated1pattern), mirrorY(rotated1pattern), rotated2pattern, mirrorX(rotated2pattern), mirrorY(rotated2pattern), rotated3pattern, mirrorX(rotated3pattern), mirrorY(rotated3pattern)].map(pointPattern => pointToIndex(pointPattern));\n  return _.uniqWith(rez, _.isEqual);\n}; ///ДУБЛИРУЕТСЯ С КОДОМ ВЫШЕ - отличие в том, что тут берется только title от объекта!!!\n\n/*export const pointToIndex = arr => {\r\n    //move to x=1, y=1\r\n    const dx = Math.min(...arr.map(point => Number(point.x))) - 1;\r\n    const dy = Math.min(...arr.map(point => Number(point.y))) - 1;\r\n    arr.forEach(point => {\r\n        point.x -= dx;\r\n        point.y -= dy;\r\n    });\r\n    //[{x: \"1\", y: \"2\", resource: \"WOOD\"},...] -> [[12,\"WOOD\"],...]\r\n    return arr.map(point => {\r\n        const index = point.x.toString() + point.y.toString();\r\n        return [index, point.resource.title]\r\n        //and sort by index\r\n    }).sort((a, b) => { return a[0] - b[0] });\r\n};*/","map":{"version":3,"sources":["D:\\Pro\\React\\tlt\\src\\components\\Buildings\\patternHandler.js"],"names":["_","pointToIndex","arr","title","dx","Math","min","map","point","Number","x","dy","y","forEach","index","toString","resource","sort","a","b","preparedPattern","pattern","board","cell","charAt","rotateAndMirrorPattern","indexToPoint","square","rotate","mirrorX","mirrorY","rotated0pattern","rotated1pattern","rotated2pattern","rotated3pattern","rez","pointPattern","uniqWith","isEqual"],"mappings":"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","sourcesContent":["import _ from 'lodash';\r\n//                        style={style(resource[0] % 10, Math.floor(resource[0] / 10))}\r\n\r\nexport const pointToIndex = (arr, title) => {\r\n    //move to x=1, y=1\r\n    const dx = Math.min(...arr.map(point => Number(point.x))) - 1;\r\n    const dy = Math.min(...arr.map(point => Number(point.y))) - 1;\r\n    arr.forEach(point => {\r\n        point.x -= dx;\r\n        point.y -= dy;\r\n    });\r\n    //[{x: \"1\", y: \"2\", resource: \"WOOD\"},...] -> [[12,\"WOOD\"],...]\r\n    return arr.map(point => {\r\n        const index = point.x.toString() + point.y.toString();\r\n        return title ? [index, point.resource.title] : [index, point.resource]\r\n        //and sort by index\r\n    }).sort((a, b) => { return a[0] - b[0] });\r\n}\r\n\r\nexport const preparedPattern = (pattern, board) => {\r\n       \r\n    const preparedPattern = pattern.map(cell => {\r\n        return {\r\n            x: cell.toString().charAt(0),\r\n            y: cell.toString().charAt(1),\r\n            resource: board[cell]\r\n        }\r\n    });\r\n\r\n    const dx = Math.min(...preparedPattern.map(cell => Number(cell.x))) - 1;\r\n    const dy = Math.min(...preparedPattern.map(cell => Number(cell.y))) - 1;\r\n\r\n    return preparedPattern.map(cell => {\r\n        return {\r\n            x: cell.x - dx,\r\n            y: cell.y - dy,\r\n            resource: cell.resource\r\n        }\r\n    });\r\n}\r\n\r\nexport const rotateAndMirrorPattern = pattern => {\r\n\r\n    //[[12,\"WOOD\"],...] -> [{x: \"1\", y: \"2\", resource: \"WOOD\"},...]\r\n    const indexToPoint = arr => arr.map(square => {\r\n        return {\r\n            x: square[0].toString().charAt(0),\r\n            y: square[0].toString().charAt(1),\r\n            resource: square[1]\r\n        }\r\n    });\r\n\r\n    // Move to 11, [{x: \"1\", y: \"2\", resource: \"WOOD\"},...] -> [[12,\"WOOD\"],...] and sort by index\r\n    \r\n\r\n    const rotate = arr => arr.map(point => { return { x: -point.y, y: point.x, resource: point.resource } });\r\n\r\n    const mirrorX = arr => arr.map(point => { return { x: -point.x, y: point.y, resource: point.resource } });\r\n\r\n    const mirrorY = arr => arr.map(point => { return { x: point.x, y: -point.y, resource: point.resource } });\r\n\r\n    const rotated0pattern = indexToPoint(pattern);\r\n    const rotated1pattern = rotate(rotated0pattern);\r\n    const rotated2pattern = rotate(rotated1pattern);\r\n    const rotated3pattern = rotate(rotated2pattern);\r\n\r\n\r\n    const rez = [\r\n        rotated0pattern,\r\n        mirrorY(rotated0pattern),\r\n\r\n        mirrorX(rotated0pattern),\r\n\r\n        rotated1pattern,\r\n        mirrorX(rotated1pattern),\r\n        mirrorY(rotated1pattern),\r\n\r\n        rotated2pattern,\r\n        mirrorX(rotated2pattern),\r\n        mirrorY(rotated2pattern),\r\n\r\n        rotated3pattern,\r\n        mirrorX(rotated3pattern),\r\n        mirrorY(rotated3pattern)\r\n    ].map(pointPattern => pointToIndex(pointPattern));\r\n\r\n    return _.uniqWith(rez, _.isEqual);\r\n}\r\n\r\n///ДУБЛИРУЕТСЯ С КОДОМ ВЫШЕ - отличие в том, что тут берется только title от объекта!!!\r\n/*export const pointToIndex = arr => {\r\n    //move to x=1, y=1\r\n    const dx = Math.min(...arr.map(point => Number(point.x))) - 1;\r\n    const dy = Math.min(...arr.map(point => Number(point.y))) - 1;\r\n    arr.forEach(point => {\r\n        point.x -= dx;\r\n        point.y -= dy;\r\n    });\r\n    //[{x: \"1\", y: \"2\", resource: \"WOOD\"},...] -> [[12,\"WOOD\"],...]\r\n    return arr.map(point => {\r\n        const index = point.x.toString() + point.y.toString();\r\n        return [index, point.resource.title]\r\n        //and sort by index\r\n    }).sort((a, b) => { return a[0] - b[0] });\r\n};*/\r\n\r\n"]},"metadata":{},"sourceType":"module"}