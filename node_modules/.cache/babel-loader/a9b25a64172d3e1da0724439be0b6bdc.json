{"ast":null,"code":"var _jsxFileName = \"D:\\\\Pro\\\\React\\\\tlt\\\\src\\\\components\\\\Toolbar.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { changePhaseTo, placeResource, clearSelection, placeBuilding, changeMessage } from '../actions';\nimport { RESOURCE_PHASE, BUILDING_PHASE, FEEDING_PHASE, EMPTY_SQUARE } from './constants';\nimport { messagePlaceResource, messageShowPattern } from './messages';\n\nclass Toolbar extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.plasePawn = () => {\n      if (this.props.phase === RESOURCE_PHASE && this.props.selectedPawn && this.props.selectedSquare) {\n        //place the resource to the grid\n        this.props.placeResource();\n        this.props.clearSelection();\n        this.props.changePhaseTo(BUILDING_PHASE);\n        this.props.changeMessage(messageShowPattern());\n      } else if (this.props.phase === BUILDING_PHASE && this.props.selectedPawn && this.props.selectedSquare) {\n        //place the building to the grid & removing the resources\n        if (this.props.placeBuilding()) //TODO update GRID STATE\n          this.props.clearSelection();\n      }\n\n      ;\n    };\n\n    this.nextRound = () => {\n      if (this.props.phase === BUILDING_PHASE) {\n        this.props.clearSelection(); //check end of game\n\n        if (this.props.board.indexes.find(i => this.props.board[i] === EMPTY_SQUARE)) {\n          this.props.changePhaseTo(RESOURCE_PHASE);\n        } else {\n          this.props.changePhaseTo(FEEDING_PHASE);\n        }\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, \"Phase: \", this.props.phase, \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }), this.props.message, \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.plasePawn(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"Place\"), React.createElement(\"button\", {\n      onClick: () => this.nextRound(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"NEXT\"));\n  }\n\n}\n\n;\n\nconst mapStateToProps = state => {\n  return {\n    selectedPawn: state.selectedPawn,\n    selectedSquare: state.selectedSquare,\n    phase: state.phase,\n    board: state.board,\n    message: state.message\n  };\n};\n\nexport default connect(mapStateToProps, {\n  changePhaseTo,\n  placeResource,\n  clearSelection,\n  placeBuilding,\n  changeMessage\n})(Toolbar);","map":{"version":3,"sources":["D:\\Pro\\React\\tlt\\src\\components\\Toolbar.js"],"names":["React","connect","changePhaseTo","placeResource","clearSelection","placeBuilding","changeMessage","RESOURCE_PHASE","BUILDING_PHASE","FEEDING_PHASE","EMPTY_SQUARE","messagePlaceResource","messageShowPattern","Toolbar","Component","plasePawn","props","phase","selectedPawn","selectedSquare","nextRound","board","indexes","find","i","render","message","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAAUC,aAAV,EAAyBC,aAAzB,EAAwCC,cAAxC,EAAwDC,aAAxD,EAAuEC,aAAvE,QAA4F,YAA5F;AACA,SACIC,cADJ,EAEIC,cAFJ,EAGIC,aAHJ,EAIIC,YAJJ,QAKO,aALP;AAMA,SAAUC,oBAAV,EAAgCC,kBAAhC,QAA0D,YAA1D;;AAGA,MAAMC,OAAN,SAAsBb,KAAK,CAACc,SAA5B,CAAsC;AAAA;AAAA;;AAAA,SAElCC,SAFkC,GAEtB,MAAM;AACd,UAAI,KAAKC,KAAL,CAAWC,KAAX,KAAqBV,cAArB,IAAuC,KAAKS,KAAL,CAAWE,YAAlD,IAAkE,KAAKF,KAAL,CAAWG,cAAjF,EAAiG;AAC7F;AACA,aAAKH,KAAL,CAAWb,aAAX;AACA,aAAKa,KAAL,CAAWZ,cAAX;AACA,aAAKY,KAAL,CAAWd,aAAX,CAAyBM,cAAzB;AACA,aAAKQ,KAAL,CAAWV,aAAX,CAAyBM,kBAAkB,EAA3C;AACH,OAND,MAMO,IAAI,KAAKI,KAAL,CAAWC,KAAX,KAAqBT,cAArB,IAAuC,KAAKQ,KAAL,CAAWE,YAAlD,IAAkE,KAAKF,KAAL,CAAWG,cAAjF,EAAiG;AACpG;AACA,YAAI,KAAKH,KAAL,CAAWX,aAAX,EAAJ,EACI;AACA,eAAKW,KAAL,CAAWZ,cAAX;AAGP;;AAAA;AACJ,KAjBiC;;AAAA,SAmBlCgB,SAnBkC,GAmBtB,MAAM;AACd,UAAI,KAAKJ,KAAL,CAAWC,KAAX,KAAqBT,cAAzB,EAAyC;AACrC,aAAKQ,KAAL,CAAWZ,cAAX,GADqC,CAGrC;;AACA,YAAI,KAAKY,KAAL,CAAWK,KAAX,CAAiBC,OAAjB,CAAyBC,IAAzB,CAA8BC,CAAC,IAAI,KAAKR,KAAL,CAAWK,KAAX,CAAiBG,CAAjB,MAAwBd,YAA3D,CAAJ,EAA8E;AAC1E,eAAKM,KAAL,CAAWd,aAAX,CAAyBK,cAAzB;AACH,SAFD,MAEO;AACH,eAAKS,KAAL,CAAWd,aAAX,CAAyBO,aAAzB;AACH;AAEJ;AACJ,KA/BiC;AAAA;;AAiClCgB,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACY,KAAKT,KAAL,CAAWC,KADvB,OAC8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAD9B,EAEK,KAAKD,KAAL,CAAWU,OAFhB,OAE0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAF1B,EAGI;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKX,SAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHJ,EAII;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKK,SAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,CADJ;AAQH;;AA1CiC;;AA4CrC;;AAED,MAAMO,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHV,IAAAA,YAAY,EAAEU,KAAK,CAACV,YADjB;AAEHC,IAAAA,cAAc,EAAES,KAAK,CAACT,cAFnB;AAGHF,IAAAA,KAAK,EAAEW,KAAK,CAACX,KAHV;AAIHI,IAAAA,KAAK,EAAEO,KAAK,CAACP,KAJV;AAKHK,IAAAA,OAAO,EAAEE,KAAK,CAACF;AALZ,GAAP;AAOH,CARD;;AAUA,eAAezB,OAAO,CAClB0B,eADkB,EAElB;AAAEzB,EAAAA,aAAF;AAAiBC,EAAAA,aAAjB;AAAgCC,EAAAA,cAAhC;AAAgDC,EAAAA,aAAhD;AAA+DC,EAAAA;AAA/D,CAFkB,CAAP,CAGbO,OAHa,CAAf","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport {  changePhaseTo, placeResource, clearSelection, placeBuilding, changeMessage } from '../actions';\r\nimport {\r\n    RESOURCE_PHASE,\r\n    BUILDING_PHASE,\r\n    FEEDING_PHASE,\r\n    EMPTY_SQUARE\r\n} from './constants';\r\nimport  { messagePlaceResource, messageShowPattern } from './messages';\r\n\r\n\r\nclass Toolbar extends React.Component {\r\n\r\n    plasePawn = () => {\r\n        if (this.props.phase === RESOURCE_PHASE && this.props.selectedPawn && this.props.selectedSquare) {\r\n            //place the resource to the grid\r\n            this.props.placeResource();\r\n            this.props.clearSelection();\r\n            this.props.changePhaseTo(BUILDING_PHASE);\r\n            this.props.changeMessage(messageShowPattern());\r\n        } else if (this.props.phase === BUILDING_PHASE && this.props.selectedPawn && this.props.selectedSquare) {\r\n            //place the building to the grid & removing the resources\r\n            if (this.props.placeBuilding())\r\n                //TODO update GRID STATE\r\n                this.props.clearSelection();\r\n\r\n\r\n        };\r\n    }\r\n    //after resource placing new round can be started\r\n    nextRound = () => {\r\n        if (this.props.phase === BUILDING_PHASE) {\r\n            this.props.clearSelection();\r\n\r\n            //check end of game\r\n            if (this.props.board.indexes.find(i => this.props.board[i] === EMPTY_SQUARE)) {\r\n                this.props.changePhaseTo(RESOURCE_PHASE);\r\n            } else {\r\n                this.props.changePhaseTo(FEEDING_PHASE);\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                Phase: {this.props.phase} <br />\r\n                {this.props.message } <br />\r\n                <button onClick={() => this.plasePawn()}>Place</button>\r\n                <button onClick={() => this.nextRound()}>NEXT</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        selectedPawn: state.selectedPawn,\r\n        selectedSquare: state.selectedSquare,\r\n        phase: state.phase,\r\n        board: state.board,\r\n        message: state.message\r\n    }\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    { changePhaseTo, placeResource, clearSelection, placeBuilding, changeMessage }\r\n)(Toolbar);\r\n"]},"metadata":{},"sourceType":"module"}