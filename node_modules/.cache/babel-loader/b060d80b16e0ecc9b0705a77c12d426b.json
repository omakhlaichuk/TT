{"ast":null,"code":"var _jsxFileName = \"D:\\\\Pro\\\\React\\\\tlt\\\\src\\\\components\\\\ResourceSelector.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Resource from './Resource';\nimport { message, RESOURCE_PHASE } from './constants';\nimport '../css/resources.css';\n\nconst renderActionHelper = (phase, selectedPawn, selectedSquare) => {\n  if (phase === RESOURCE_PHASE) {\n    if (!selectedPawn.type && !selectedSquare) {\n      return \"\\u0432\\u044B\\u0431\\u0440\\u0430\\u0442\\u044C \\u044F\\u0447\\u0435\\u0439\\u043A\\u0443 \\u0438 \\u0440\\u0435\\u0441\\u0443\\u0440\\u0441\";\n    } else if (!selectedPawn.type) {\n      return \"\\u0432\\u044B\\u0431\\u0440\\u0430\\u0442\\u044C \\u0440\\u0435\\u0441\\u0443\\u0440\\u0441\";\n    } else if (!selectedSquare) {\n      return \"\\u0432\\u044B\\u0431\\u0440\\u0430\\u0442\\u044C \\u044F\\u0447\\u0435\\u0439\\u043A\\u0443\";\n    } else {\n      return React.createElement(\"button\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, \" \\u041F\\u043E\\u0434\\u0442\\u0432\\u0435\\u0440\\u0434\\u0438\\u0442\\u044C \\u0443\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043A\\u0443 \");\n    }\n  } else {\n    return null;\n  }\n};\n\nconst ResourceSelector = props => {\n  return React.createElement(\"div\", {\n    className: \"resourceSelector\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"Select resource\", React.createElement(Resource, {\n    id: 0,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }), React.createElement(Resource, {\n    id: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }), React.createElement(Resource, {\n    id: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }), renderActionHelper(props.phase, props.selectedPawn, props.selectedSquare));\n};\n\nconst mapStateToProps = state => {\n  return {\n    selectedPawn: state.selectedPawn,\n    selectedSquare: state.selectedSquare,\n    phase: state.phase,\n    board: state.board,\n    buildings: state.buildings,\n    message: state.message\n  };\n};\n\nexport default connect(mapStateToProps, {})(ResourceSelector);\n/*\r\nplasePawn = () => {\r\n    if (this.props.phase === RESOURCE_PHASE && this.props.selectedPawn && this.props.selectedSquare) {\r\n        //place the resource to the grid\r\n        this.props.placeResource();\r\n        this.props.clearSelection();\r\n        this.props.changePhaseTo(BUILDING_PHASE);\r\n        this.props.changeMessage(message.showPattern);\r\n    }\r\n}\r\n*/","map":{"version":3,"sources":["D:\\Pro\\React\\tlt\\src\\components\\ResourceSelector.js"],"names":["React","connect","Resource","message","RESOURCE_PHASE","renderActionHelper","phase","selectedPawn","selectedSquare","type","ResourceSelector","props","mapStateToProps","state","board","buildings"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAGA,OAAOC,QAAP,MAAqB,YAArB;AACA,SACIC,OADJ,EAEIC,cAFJ,QAGO,aAHP;AAIA,OAAO,sBAAP;;AAEA,MAAMC,kBAAkB,GAAG,CAACC,KAAD,EAAQC,YAAR,EAAsBC,cAAtB,KAAyC;AAChE,MAAIF,KAAK,KAAKF,cAAd,EAA8B;AAC1B,QAAI,CAACG,YAAY,CAACE,IAAd,IAAsB,CAACD,cAA3B,EAA2C;AACvC;AACH,KAFD,MAEO,IAAI,CAACD,YAAY,CAACE,IAAlB,EAAwB;AAC3B;AAEH,KAHM,MAGA,IAAI,CAACD,cAAL,EAAqB;AACxB;AACH,KAFM,MAEA;AACH,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uIAAP;AACH;AAEJ,GAZD,MAYO;AACH,WAAO,IAAP;AACH;AACJ,CAhBD;;AAkBA,MAAME,gBAAgB,GAAGC,KAAK,IAAI;AAE9B,SACI;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAEI,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAE,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGI,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAE,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,EAII,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAE,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,EAKKN,kBAAkB,CAACM,KAAK,CAACL,KAAP,EAAaK,KAAK,CAACJ,YAAnB,EAAiCI,KAAK,CAACH,cAAvC,CALvB,CADJ;AASH,CAXD;;AAaA,MAAMI,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAO;AACHN,IAAAA,YAAY,EAAEM,KAAK,CAACN,YADjB;AAEHC,IAAAA,cAAc,EAAEK,KAAK,CAACL,cAFnB;AAGHF,IAAAA,KAAK,EAAEO,KAAK,CAACP,KAHV;AAIHQ,IAAAA,KAAK,EAAED,KAAK,CAACC,KAJV;AAKHC,IAAAA,SAAS,EAAEF,KAAK,CAACE,SALd;AAMHZ,IAAAA,OAAO,EAAEU,KAAK,CAACV;AANZ,GAAP;AAQH,CATD;;AAWA,eAAeF,OAAO,CAACW,eAAD,EAAkB,EAAlB,CAAP,CAA8BF,gBAA9B,CAAf;AAKA","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nimport Resource from './Resource';\r\nimport {\r\n    message,\r\n    RESOURCE_PHASE,\r\n} from './constants';\r\nimport '../css/resources.css';\r\n\r\nconst renderActionHelper = (phase, selectedPawn, selectedSquare) => {\r\n    if (phase === RESOURCE_PHASE) {\r\n        if (!selectedPawn.type && !selectedSquare) {\r\n            return `выбрать ячейку и ресурс`;\r\n        } else if (!selectedPawn.type) {\r\n            return `выбрать ресурс`;\r\n\r\n        } else if (!selectedSquare) {\r\n            return `выбрать ячейку`;\r\n        } else {\r\n            return <button> Подтвердить установку </button>\r\n        }\r\n\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nconst ResourceSelector = props => {\r\n\r\n    return (\r\n        <div className=\"resourceSelector\">\r\n            Select resource\r\n            <Resource id={0} />\r\n            <Resource id={1} />\r\n            <Resource id={2} />\r\n            {renderActionHelper(props.phase,props.selectedPawn, props.selectedSquare )}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        selectedPawn: state.selectedPawn,\r\n        selectedSquare: state.selectedSquare,\r\n        phase: state.phase,\r\n        board: state.board,\r\n        buildings: state.buildings,\r\n        message: state.message\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, {}) (ResourceSelector);\r\n\r\n\r\n\r\n\r\n/*\r\nplasePawn = () => {\r\n    if (this.props.phase === RESOURCE_PHASE && this.props.selectedPawn && this.props.selectedSquare) {\r\n        //place the resource to the grid\r\n        this.props.placeResource();\r\n        this.props.clearSelection();\r\n        this.props.changePhaseTo(BUILDING_PHASE);\r\n        this.props.changeMessage(message.showPattern);\r\n    }\r\n}\r\n*/"]},"metadata":{},"sourceType":"module"}