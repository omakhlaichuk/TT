{"ast":null,"code":"import _ from 'lodash';\n\nconst d = (arr, index) => Math.min(...arr.map(cell => Number(cell[index]))) - 1;\n\nexport const rotateAndMirrorPattern = pattern => {\n  //[[12,\"WOOD\"],...] -> [{x: \"1\", y: \"2\", resource: \"WOOD\"},...]\n  const indexToPoint = arr => arr.map(square => {\n    return {\n      x: square[0].toString().charAt(0),\n      y: square[0].toString().charAt(1),\n      resource: square[1]\n    };\n  }); // Move to 11, [{x: \"1\", y: \"2\", resource: \"WOOD\"},...] -> [[12,\"WOOD\"],...] and sort by index\n\n\n  const pointToIndex = arr => {\n    //move to x=1, y=1\n    const dx = d(arr, 'x');\n    const dy = Math.min(...arr.map(point => Number(point.y))) - 1;\n    arr.forEach(point => {\n      point.x -= dx;\n      point.y -= dy;\n    }); //[{x: \"1\", y: \"2\", resource: \"WOOD\"},...] -> [[12,\"WOOD\"],...]\n\n    return arr.map(point => {\n      const index = point.x.toString() + point.y.toString();\n      return [index, point.resource]; //and sort by index\n    }).sort((a, b) => {\n      return a[0] - b[0];\n    });\n  };\n\n  const rotate = arr => arr.map(point => {\n    return {\n      x: -point.y,\n      y: point.x,\n      resource: point.resource\n    };\n  });\n\n  const mirrorX = arr => arr.map(point => {\n    return {\n      x: -point.x,\n      y: point.y,\n      resource: point.resource\n    };\n  });\n\n  const mirrorY = arr => arr.map(point => {\n    return {\n      x: point.x,\n      y: -point.y,\n      resource: point.resource\n    };\n  });\n\n  const rotated0pattern = indexToPoint(pattern);\n  const rotated1pattern = rotate(rotated0pattern);\n  const rotated2pattern = rotate(rotated1pattern);\n  const rotated3pattern = rotate(rotated2pattern);\n  const rez = [rotated0pattern, mirrorY(rotated0pattern), mirrorX(rotated0pattern), rotated1pattern, mirrorX(rotated1pattern), mirrorY(rotated1pattern), rotated2pattern, mirrorX(rotated2pattern), mirrorY(rotated2pattern), rotated3pattern, mirrorX(rotated3pattern), mirrorY(rotated3pattern)].map(pointPattern => pointToIndex(pointPattern));\n  return _.uniqWith(rez, _.isEqual);\n}; ///ДУБЛИРУЕТСЯ С КОДОМ ВЫШЕ - отличие в том, что тут берется только title от объекта!!!\n\nexport const pointToIndex = arr => {\n  //move to x=1, y=1\n  const dx = Math.min(...arr.map(point => Number(point.x))) - 1;\n  const dy = Math.min(...arr.map(point => Number(point.y))) - 1;\n  arr.forEach(point => {\n    point.x -= dx;\n    point.y -= dy;\n  }); //[{x: \"1\", y: \"2\", resource: \"WOOD\"},...] -> [[12,\"WOOD\"],...]\n\n  return arr.map(point => {\n    const index = point.x.toString() + point.y.toString();\n    return [index, point.resource.title]; //and sort by index\n  }).sort((a, b) => {\n    return a[0] - b[0];\n  });\n};\nexport const preparedPattern = (pattern, board) => {\n  const preparedPattern = pattern.map(cell => {\n    return {\n      x: cell.toString().charAt(0),\n      y: cell.toString().charAt(1),\n      resource: board[cell]\n    };\n  });\n  const dx = Math.min(...preparedPattern.map(cell => Number(cell.x))) - 1;\n  const dy = Math.min(...preparedPattern.map(cell => Number(cell.y))) - 1;\n  const movedPattern = preparedPattern.map(cell => {\n    return {\n      x: cell.x - dx,\n      y: cell.y - dy,\n      resource: cell.resource\n    };\n  });\n  return movedPattern;\n};","map":{"version":3,"sources":["D:\\Pro\\React\\tlt\\src\\components\\Buildings\\patternHandler.js"],"names":["_","d","arr","index","Math","min","map","cell","Number","rotateAndMirrorPattern","pattern","indexToPoint","square","x","toString","charAt","y","resource","pointToIndex","dx","dy","point","forEach","sort","a","b","rotate","mirrorX","mirrorY","rotated0pattern","rotated1pattern","rotated2pattern","rotated3pattern","rez","pointPattern","uniqWith","isEqual","title","preparedPattern","board","movedPattern"],"mappings":"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","sourcesContent":["import _ from 'lodash';\r\n\r\nconst d = (arr, index) => Math.min(...arr.map(cell => Number(cell[index]))) - 1;\r\n\r\n\r\nexport const rotateAndMirrorPattern = pattern => {\r\n\r\n    //[[12,\"WOOD\"],...] -> [{x: \"1\", y: \"2\", resource: \"WOOD\"},...]\r\n    const indexToPoint = arr => arr.map(square => {\r\n        return {\r\n            x: square[0].toString().charAt(0),\r\n            y: square[0].toString().charAt(1),\r\n            resource: square[1]\r\n        }\r\n    });\r\n\r\n    // Move to 11, [{x: \"1\", y: \"2\", resource: \"WOOD\"},...] -> [[12,\"WOOD\"],...] and sort by index\r\n    const pointToIndex = arr => {\r\n        //move to x=1, y=1\r\n        const dx = d(arr, 'x')\r\n        const dy = Math.min(...arr.map(point => Number(point.y))) - 1;\r\n        arr.forEach(point => {\r\n            point.x -= dx;\r\n            point.y -= dy;\r\n        });\r\n        //[{x: \"1\", y: \"2\", resource: \"WOOD\"},...] -> [[12,\"WOOD\"],...]\r\n        return arr.map(point => {\r\n            const index = point.x.toString() + point.y.toString();\r\n            return [index, point.resource]\r\n            //and sort by index\r\n        }).sort((a, b) => { return a[0] - b[0] });\r\n    }\r\n\r\n    const rotate = arr => arr.map(point => { return { x: -point.y, y: point.x, resource: point.resource } });\r\n\r\n    const mirrorX = arr => arr.map(point => { return { x: -point.x, y: point.y, resource: point.resource } });\r\n\r\n    const mirrorY = arr => arr.map(point => { return { x: point.x, y: -point.y, resource: point.resource } });\r\n\r\n    const rotated0pattern = indexToPoint(pattern);\r\n    const rotated1pattern = rotate(rotated0pattern);\r\n    const rotated2pattern = rotate(rotated1pattern);\r\n    const rotated3pattern = rotate(rotated2pattern);\r\n\r\n\r\n    const rez = [\r\n        rotated0pattern,\r\n        mirrorY(rotated0pattern),\r\n\r\n        mirrorX(rotated0pattern),\r\n\r\n        rotated1pattern,\r\n        mirrorX(rotated1pattern),\r\n        mirrorY(rotated1pattern),\r\n\r\n        rotated2pattern,\r\n        mirrorX(rotated2pattern),\r\n        mirrorY(rotated2pattern),\r\n\r\n        rotated3pattern,\r\n        mirrorX(rotated3pattern),\r\n        mirrorY(rotated3pattern)\r\n    ].map(pointPattern => pointToIndex(pointPattern));\r\n\r\n    return _.uniqWith(rez, _.isEqual);\r\n}\r\n\r\n///ДУБЛИРУЕТСЯ С КОДОМ ВЫШЕ - отличие в том, что тут берется только title от объекта!!!\r\nexport const pointToIndex = arr => {\r\n    //move to x=1, y=1\r\n    const dx = Math.min(...arr.map(point => Number(point.x))) - 1;\r\n    const dy = Math.min(...arr.map(point => Number(point.y))) - 1;\r\n    arr.forEach(point => {\r\n        point.x -= dx;\r\n        point.y -= dy;\r\n    });\r\n    //[{x: \"1\", y: \"2\", resource: \"WOOD\"},...] -> [[12,\"WOOD\"],...]\r\n    return arr.map(point => {\r\n        const index = point.x.toString() + point.y.toString();\r\n        return [index, point.resource.title]\r\n        //and sort by index\r\n    }).sort((a, b) => { return a[0] - b[0] });\r\n};\r\n\r\nexport const preparedPattern = (pattern, board) => {\r\n       \r\n    const preparedPattern = pattern.map(cell => {\r\n        return {\r\n            x: cell.toString().charAt(0),\r\n            y: cell.toString().charAt(1),\r\n            resource: board[cell]\r\n        }\r\n    });\r\n\r\n    const dx = Math.min(...preparedPattern.map(cell => Number(cell.x))) - 1;\r\n    const dy = Math.min(...preparedPattern.map(cell => Number(cell.y))) - 1;\r\n\r\n    const movedPattern = preparedPattern.map(cell => {\r\n        return {\r\n            x: cell.x - dx,\r\n            y: cell.y - dy,\r\n            resource: cell.resource\r\n\r\n        }\r\n    });\r\n\r\n    return movedPattern;\r\n}"]},"metadata":{},"sourceType":"module"}