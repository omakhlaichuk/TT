{"ast":null,"code":"var _jsxFileName = \"D:\\\\Pro\\\\React\\\\tlt\\\\src\\\\components\\\\Toolbar.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { changePhaseTo, placeResource, clearSelection, placeBuilding, changeMessage, feedCottages } from '../actions';\nimport { message, RESOURCE_PHASE, BUILDING_PHASE, FEEDING_PHASE, SCORING_PHASE, EMPTY_SQUARE } from './constants';\nimport { calcFedCottages } from './Buildings/scoring';\n\nclass Toolbar extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.plasePawn = () => {\n      if (this.props.phase === RESOURCE_PHASE && this.props.selectedPawn && this.props.selectedSquare) {\n        //place the resource to the grid\n        this.props.placeResource();\n        this.props.clearSelection();\n        this.props.changePhaseTo(BUILDING_PHASE);\n        this.props.changeMessage(message.showPattern);\n      } else if (this.props.phase === BUILDING_PHASE && this.props.selectedPawn && this.props.selectedSquare) {\n        //place the building to the grid & removing the resources\n        if (\"Square for placing suitable\") {\n          this.props.placeBuilding(); // this.props.clearSelection();\n\n          this.props.changeMessage(\"вы успешно поставили здание, можете поставить еще!\");\n        } else {\n          this.props.changeMessage(\"в это место нельзя поставить здание, попробуйте другое место! - сейчас место не выбирает\");\n        }\n      }\n\n      ;\n    };\n\n    this.nextRound = () => {\n      switch (this.props.phase) {\n        case BUILDING_PHASE:\n          this.props.clearSelection(); //check is it empty squares\n\n          if (this.props.board.indexes.find(i => this.props.board[i] === EMPTY_SQUARE)) {\n            this.props.changePhaseTo(RESOURCE_PHASE);\n            this.props.changeMessage(message.selectResource());\n          } else {\n            this.props.changeMessage(\"Переходим к кормежке?\");\n            this.props.feedCottages(calcFedCottages(this.props.board, this.props.buildings));\n            this.props.changePhaseTo(FEEDING_PHASE);\n            console.log(calcFedCottages(this.props.board, this.props.buildings));\n          }\n\n          break;\n\n        case FEEDING_PHASE:\n          this.props.changePhaseTo(SCORING_PHASE);\n          this.props.changeMessage(\"Переходим к подсчету очков?\");\n          break;\n\n        default:\n          this.props.changeMessage('зачем нажимать? - нужно лочить кнопку!!!');\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"Phase: \", this.props.phase, \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), this.props.message, \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.plasePawn(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Place\"), React.createElement(\"button\", {\n      onClick: () => this.nextRound(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"NEXT\"));\n  }\n\n}\n\n;\n\nconst mapStateToProps = state => {\n  return {\n    selectedPawn: state.selectedPawn,\n    selectedSquare: state.selectedSquare,\n    phase: state.phase,\n    board: state.board,\n    buildings: state.buildings,\n    message: state.message\n  };\n};\n\nexport default connect(mapStateToProps, {\n  changePhaseTo,\n  placeResource,\n  clearSelection,\n  placeBuilding,\n  changeMessage,\n  feedCottages\n})(Toolbar);","map":{"version":3,"sources":["D:\\Pro\\React\\tlt\\src\\components\\Toolbar.js"],"names":["React","connect","changePhaseTo","placeResource","clearSelection","placeBuilding","changeMessage","feedCottages","message","RESOURCE_PHASE","BUILDING_PHASE","FEEDING_PHASE","SCORING_PHASE","EMPTY_SQUARE","calcFedCottages","Toolbar","Component","plasePawn","props","phase","selectedPawn","selectedSquare","showPattern","nextRound","board","indexes","find","i","selectResource","buildings","console","log","render","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,aAAT,EAAwBC,aAAxB,EAAuCC,cAAvC,EAAuDC,aAAvD,EAAsEC,aAAtE,EAAqFC,YAArF,QAAyG,YAAzG;AACA,SACIC,OADJ,EAEIC,cAFJ,EAGIC,cAHJ,EAIIC,aAJJ,EAKIC,aALJ,EAMIC,YANJ,QAOO,aAPP;AAQA,SAASC,eAAT,QAAgC,qBAAhC;;AAGA,MAAMC,OAAN,SAAsBf,KAAK,CAACgB,SAA5B,CAAsC;AAAA;AAAA;;AAAA,SAElCC,SAFkC,GAEtB,MAAM;AACd,UAAI,KAAKC,KAAL,CAAWC,KAAX,KAAqBV,cAArB,IAAuC,KAAKS,KAAL,CAAWE,YAAlD,IAAkE,KAAKF,KAAL,CAAWG,cAAjF,EAAiG;AAC7F;AACA,aAAKH,KAAL,CAAWf,aAAX;AACA,aAAKe,KAAL,CAAWd,cAAX;AACA,aAAKc,KAAL,CAAWhB,aAAX,CAAyBQ,cAAzB;AACA,aAAKQ,KAAL,CAAWZ,aAAX,CAAyBE,OAAO,CAACc,WAAjC;AACH,OAND,MAMO,IAAI,KAAKJ,KAAL,CAAWC,KAAX,KAAqBT,cAArB,IAAuC,KAAKQ,KAAL,CAAWE,YAAlD,IAAkE,KAAKF,KAAL,CAAWG,cAAjF,EAAiG;AACpG;AACA,YAAI,6BAAJ,EAAmC;AAC/B,eAAKH,KAAL,CAAWb,aAAX,GAD+B,CAE/B;;AACA,eAAKa,KAAL,CAAWZ,aAAX,CAAyB,oDAAzB;AACH,SAJD,MAIO;AACH,eAAKY,KAAL,CAAWZ,aAAX,CAAyB,0FAAzB;AAEH;AAEJ;;AAAA;AACJ,KArBiC;;AAAA,SAuBlCiB,SAvBkC,GAuBtB,MAAM;AACd,cAAQ,KAAKL,KAAL,CAAWC,KAAnB;AACI,aAAKT,cAAL;AACI,eAAKQ,KAAL,CAAWd,cAAX,GADJ,CAEI;;AACA,cAAI,KAAKc,KAAL,CAAWM,KAAX,CAAiBC,OAAjB,CAAyBC,IAAzB,CAA8BC,CAAC,IAAI,KAAKT,KAAL,CAAWM,KAAX,CAAiBG,CAAjB,MAAwBd,YAA3D,CAAJ,EAA8E;AAC1E,iBAAKK,KAAL,CAAWhB,aAAX,CAAyBO,cAAzB;AACA,iBAAKS,KAAL,CAAWZ,aAAX,CAAyBE,OAAO,CAACoB,cAAR,EAAzB;AACH,WAHD,MAGO;AACH,iBAAKV,KAAL,CAAWZ,aAAX,CAAyB,uBAAzB;AACA,iBAAKY,KAAL,CAAWX,YAAX,CACIO,eAAe,CAAC,KAAKI,KAAL,CAAWM,KAAZ,EAAmB,KAAKN,KAAL,CAAWW,SAA9B,CADnB;AAGA,iBAAKX,KAAL,CAAWhB,aAAX,CAAyBS,aAAzB;AACpBmB,YAAAA,OAAO,CAACC,GAAR,CAAYjB,eAAe,CAAC,KAAKI,KAAL,CAAWM,KAAZ,EAAmB,KAAKN,KAAL,CAAWW,SAA9B,CAA3B;AAGiB;;AACD;;AACJ,aAAKlB,aAAL;AACI,eAAKO,KAAL,CAAWhB,aAAX,CAAyBU,aAAzB;AACA,eAAKM,KAAL,CAAWZ,aAAX,CAAyB,6BAAzB;AACA;;AACJ;AACA,eAAKY,KAAL,CAAWZ,aAAX,CAAyB,0CAAzB;AAvBJ;AA0BH,KAlDiC;AAAA;;AAoDlC0B,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACY,KAAKd,KAAL,CAAWC,KADvB,OAC8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAD9B,EAEK,KAAKD,KAAL,CAAWV,OAFhB,OAEyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFzB,EAGI;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKS,SAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHJ,EAII;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKM,SAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,CADJ;AAQH;;AA7DiC;;AA+DrC;;AAED,MAAMU,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHd,IAAAA,YAAY,EAAEc,KAAK,CAACd,YADjB;AAEHC,IAAAA,cAAc,EAAEa,KAAK,CAACb,cAFnB;AAGHF,IAAAA,KAAK,EAAEe,KAAK,CAACf,KAHV;AAIHK,IAAAA,KAAK,EAAEU,KAAK,CAACV,KAJV;AAKHK,IAAAA,SAAS,EAAEK,KAAK,CAACL,SALd;AAMHrB,IAAAA,OAAO,EAAE0B,KAAK,CAAC1B;AANZ,GAAP;AAQH,CATD;;AAWA,eAAeP,OAAO,CAClBgC,eADkB,EAElB;AAAE/B,EAAAA,aAAF;AAAiBC,EAAAA,aAAjB;AAAgCC,EAAAA,cAAhC;AAAgDC,EAAAA,aAAhD;AAA+DC,EAAAA,aAA/D;AAA8EC,EAAAA;AAA9E,CAFkB,CAAP,CAGbQ,OAHa,CAAf","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { changePhaseTo, placeResource, clearSelection, placeBuilding, changeMessage, feedCottages } from '../actions';\r\nimport {\r\n    message,\r\n    RESOURCE_PHASE,\r\n    BUILDING_PHASE,\r\n    FEEDING_PHASE,\r\n    SCORING_PHASE,\r\n    EMPTY_SQUARE\r\n} from './constants';\r\nimport { calcFedCottages } from './Buildings/scoring';\r\n\r\n\r\nclass Toolbar extends React.Component {\r\n\r\n    plasePawn = () => {\r\n        if (this.props.phase === RESOURCE_PHASE && this.props.selectedPawn && this.props.selectedSquare) {\r\n            //place the resource to the grid\r\n            this.props.placeResource();\r\n            this.props.clearSelection();\r\n            this.props.changePhaseTo(BUILDING_PHASE);\r\n            this.props.changeMessage(message.showPattern);\r\n        } else if (this.props.phase === BUILDING_PHASE && this.props.selectedPawn && this.props.selectedSquare) {\r\n            //place the building to the grid & removing the resources\r\n            if (\"Square for placing suitable\") {\r\n                this.props.placeBuilding();\r\n                // this.props.clearSelection();\r\n                this.props.changeMessage(\"вы успешно поставили здание, можете поставить еще!\");\r\n            } else {\r\n                this.props.changeMessage(\"в это место нельзя поставить здание, попробуйте другое место! - сейчас место не выбирает\");\r\n\r\n            }\r\n\r\n        };\r\n    }\r\n    //after resource placing new round can be started\r\n    nextRound = () => {\r\n        switch (this.props.phase) {\r\n            case BUILDING_PHASE:\r\n                this.props.clearSelection();\r\n                //check is it empty squares\r\n                if (this.props.board.indexes.find(i => this.props.board[i] === EMPTY_SQUARE)) {\r\n                    this.props.changePhaseTo(RESOURCE_PHASE);\r\n                    this.props.changeMessage(message.selectResource());\r\n                } else {\r\n                    this.props.changeMessage(\"Переходим к кормежке?\");\r\n                    this.props.feedCottages(\r\n                        calcFedCottages(this.props.board, this.props.buildings)\r\n                    );\r\n                    this.props.changePhaseTo(FEEDING_PHASE);\r\nconsole.log(calcFedCottages(this.props.board, this.props.buildings));\r\n\r\n\r\n                }\r\n                break;\r\n            case FEEDING_PHASE:\r\n                this.props.changePhaseTo(SCORING_PHASE);\r\n                this.props.changeMessage(\"Переходим к подсчету очков?\");\r\n                break;\r\n            default:\r\n            this.props.changeMessage('зачем нажимать? - нужно лочить кнопку!!!');\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                Phase: {this.props.phase} <br />\r\n                {this.props.message} <br />\r\n                <button onClick={() => this.plasePawn()}>Place</button>\r\n                <button onClick={() => this.nextRound()}>NEXT</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        selectedPawn: state.selectedPawn,\r\n        selectedSquare: state.selectedSquare,\r\n        phase: state.phase,\r\n        board: state.board,\r\n        buildings: state.buildings,\r\n        message: state.message\r\n    }\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    { changePhaseTo, placeResource, clearSelection, placeBuilding, changeMessage, feedCottages }\r\n)(Toolbar);\r\n"]},"metadata":{},"sourceType":"module"}