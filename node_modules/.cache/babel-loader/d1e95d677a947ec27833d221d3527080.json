{"ast":null,"code":"var _jsxFileName = \"D:\\\\Pro\\\\React\\\\tlt\\\\src\\\\components\\\\Square.js\";\nimport React from 'react';\nimport { connect } from 'react-redux'; //import '../css/square.css';\n\nimport { selectSquare, selectPattern, changeMessage } from './../actions';\nimport { message, RESOURCE_PHASE, BUILDING_PHASE, EMPTY_SQUARE, RESOURCE } from './constants'; //import { messageConfirmResourcePlacement } from './messages';\n\nclass Square extends React.Component {\n  onCellClick(phase) {\n    const filling = this.props.cell;\n\n    if (this.props.phase === RESOURCE_PHASE) {\n      if (filling === EMPTY_SQUARE) {\n        //empty squares can be selected for resource placing\n        this.props.selectSquare(this.props.index);\n\n        if (this.props.selectedPawn.title) {\n          this.props.changeMessage(message.confirmResourcePlacement(this.props.selectedPawn.title));\n        }\n      } else {\n        this.props.selectSquare(null);\n      }\n    } else if (this.props.phase === BUILDING_PHASE) {\n      if (!this.props.selectedPawn.title && filling.type === RESOURCE) {\n        //select resorces to check pattern\n        this.props.selectPattern(this.props.index);\n      } else if (this.props.selectedPawn.title) {\n        //select square for placing building\n        //TODO: add property to build anywhere\n        if (this.props.selectedPattern.find(cell => cell === this.props.index)) {\n          this.props.selectSquare(this.props.index);\n          this.props.changeMessage(\"это подходящее место для установки этого здани, подтвердите его размещение\");\n        }\n      }\n    }\n  }\n\n  renderIcon() {\n    if (null) {\n      ;\n    }\n  }\n\n  render() {\n    //style cells\n    let squareCalss = \"\";\n\n    if (this.props.selectedSquare === this.props.index) {\n      squareCalss += \" selectedSquare \";\n    }\n\n    if (this.props.selectedPattern.find(el => el === this.props.index)) {\n      squareCalss += \" patternedCell\";\n    }\n\n    if (this.props.type === \"RESOURCE\") {\n      squareCalss += this.props.title.toLowerCase();\n    }\n\n    return React.createElement(\"li\", {\n      className: squareCalss,\n      onClick: () => {\n        this.onCellClick();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    });\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    cell: state.board[ownProps.index],\n    selectedSquare: state.selectedSquare,\n    selectedPattern: state.selectedPattern,\n    selectedPawn: state.selectedPawn,\n    phase: state.phase\n  };\n};\n\nexport default connect(mapStateToProps, {\n  selectSquare,\n  selectPattern,\n  changeMessage\n})(Square);","map":{"version":3,"sources":["D:\\Pro\\React\\tlt\\src\\components\\Square.js"],"names":["React","connect","selectSquare","selectPattern","changeMessage","message","RESOURCE_PHASE","BUILDING_PHASE","EMPTY_SQUARE","RESOURCE","Square","Component","onCellClick","phase","filling","props","cell","index","selectedPawn","title","confirmResourcePlacement","type","selectedPattern","find","renderIcon","render","squareCalss","selectedSquare","el","toLowerCase","mapStateToProps","state","ownProps","board"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\n//import '../css/square.css';\r\nimport { selectSquare, selectPattern, changeMessage } from './../actions';\r\nimport {\r\n    message,\r\n    RESOURCE_PHASE,\r\n    BUILDING_PHASE,\r\n    EMPTY_SQUARE,\r\n    RESOURCE,\r\n} from './constants';\r\n//import { messageConfirmResourcePlacement } from './messages';\r\n\r\nclass Square extends React.Component {\r\n\r\n    onCellClick(phase) {\r\n        const filling = this.props.cell;\r\n\r\n        if (this.props.phase === RESOURCE_PHASE) {\r\n            if (filling === EMPTY_SQUARE) {\r\n                //empty squares can be selected for resource placing\r\n                this.props.selectSquare(this.props.index);\r\n                if (this.props.selectedPawn.title) {\r\n                    this.props.changeMessage(\r\n                        message.confirmResourcePlacement(this.props.selectedPawn.title)\r\n                    );\r\n                }\r\n            } else { this.props.selectSquare(null) }\r\n        } else if (this.props.phase === BUILDING_PHASE) {\r\n            if (!this.props.selectedPawn.title && filling.type === RESOURCE) {\r\n                //select resorces to check pattern\r\n                this.props.selectPattern(this.props.index);\r\n            } else if (this.props.selectedPawn.title) {\r\n                //select square for placing building\r\n                //TODO: add property to build anywhere\r\n                if (this.props.selectedPattern.find(cell => cell === this.props.index)) {\r\n                    this.props.selectSquare(this.props.index);\r\n                    this.props.changeMessage(\"это подходящее место для установки этого здани, подтвердите его размещение\");\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    renderIcon() {\r\n        if(null) {;}\r\n    }\r\n\r\n    render() {\r\n        //style cells\r\n        let squareCalss = \"\";\r\n        if (this.props.selectedSquare === this.props.index) { squareCalss += \" selectedSquare \"; }\r\n        if (this.props.selectedPattern.find(el => el === this.props.index)) { squareCalss += \" patternedCell\" }\r\n        if(this.props.type === \"RESOURCE\") {squareCalss += this.props.title.toLowerCase()}\r\n\r\n        return (\r\n            <li className={squareCalss}  onClick={() => { this.onCellClick() }}>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        cell: state.board[ownProps.index],\r\n        selectedSquare: state.selectedSquare,\r\n        selectedPattern: state.selectedPattern,\r\n        selectedPawn: state.selectedPawn,\r\n        phase: state.phase\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, { selectSquare, selectPattern, changeMessage })(Square);\r\n\r\n"]},"metadata":{},"sourceType":"module"}