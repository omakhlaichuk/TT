{"ast":null,"code":"var _jsxFileName = \"D:\\\\Pro\\\\React\\\\tlt\\\\src\\\\components\\\\ToolbarWithResources.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Resource from './Resource';\nimport { changePhaseTo, placeResource, clearSelection, changeMessage, placeBuilding, feedCottages, newGame } from '../actions';\nimport { calcFedCottages } from './Buildings/scoring';\nimport { message, RESOURCE, FEEDING_PHASE, EMPTY_SQUARE, SCORING_PHASE, GAME_PHASE } from './constants';\nimport '../css/resources.css';\n\nconst placeSelectedResource = props => {\n  props.placeResource();\n  props.clearSelection();\n  props.changeMessage(message.showPattern);\n};\n\nconst placeSelectedBuilding = props => {\n  props.placeBuilding();\n  props.changeMessage(message.successfulBuildingPlacement);\n};\n\nconst nextRound = props => {\n  switch (props.phase) {\n    case GAME_PHASE:\n      props.clearSelection();\n      props.changeMessage(\"Переходим к кормежке?\");\n      props.feedCottages(calcFedCottages(props.board, props.buildings));\n      props.changePhaseTo(FEEDING_PHASE);\n      break;\n\n    case FEEDING_PHASE:\n      props.changePhaseTo(SCORING_PHASE);\n      props.changeMessage(\"Переходим к подсчету очков?\");\n      break;\n\n    case SCORING_PHASE:\n      props.changePhaseTo(GAME_PHASE);\n      props.changeMessage(\"начинаем новую игру\");\n      props.newGame();\n      break;\n\n    default:\n      props.changeMessage('зачем нажимать? - нужно лочить кнопку!!!');\n  }\n};\n\nconst renderButtons = props => {\n  //if board is full\n  if (!props.board.indexes.find(i => props.board[i] === EMPTY_SQUARE)) {\n    return React.createElement(\"button\", {\n      onClick: () => nextRound(props),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"NEXT\");\n  }\n\n  if (props.selectedSquare) {\n    if (props.selectedPawn.type === RESOURCE) {\n      return React.createElement(\"button\", {\n        onClick: () => placeSelectedResource(props),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \" PLACE RESOURCE\");\n    } else if (props.selectedPawn.type >= 0) {\n      return React.createElement(\"button\", {\n        onClick: () => placeSelectedBuilding(props),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \" PLACE BUILDING\");\n    }\n  }\n};\n\nconst ToolbarWithResources = props => {\n  return React.createElement(\"div\", {\n    className: \"resourceSelector\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"Resources\", React.createElement(Resource, {\n    id: 0,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }), React.createElement(Resource, {\n    id: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }), React.createElement(Resource, {\n    id: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), props.message, \" \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), renderButtons(props));\n};\n\nconst mapStateToProps = state => {\n  return {\n    selectedPawn: state.selectedPawn,\n    selectedSquare: state.selectedSquare,\n    phase: state.phase,\n    board: state.board,\n    buildings: state.buildings,\n    message: state.message\n  };\n};\n\nexport default connect(mapStateToProps, {\n  changePhaseTo,\n  placeResource,\n  clearSelection,\n  changeMessage,\n  placeBuilding,\n  feedCottages,\n  newGame\n})(ToolbarWithResources);","map":{"version":3,"sources":["D:\\Pro\\React\\tlt\\src\\components\\ToolbarWithResources.js"],"names":["React","connect","Resource","changePhaseTo","placeResource","clearSelection","changeMessage","placeBuilding","feedCottages","newGame","calcFedCottages","message","RESOURCE","FEEDING_PHASE","EMPTY_SQUARE","SCORING_PHASE","GAME_PHASE","placeSelectedResource","props","showPattern","placeSelectedBuilding","successfulBuildingPlacement","nextRound","phase","board","buildings","renderButtons","indexes","find","i","selectedSquare","selectedPawn","type","ToolbarWithResources","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nimport Resource from './Resource';\r\nimport { changePhaseTo, placeResource, clearSelection, changeMessage, placeBuilding, feedCottages, newGame } from '../actions';\r\nimport { calcFedCottages } from './Buildings/scoring';\r\nimport {\r\n    message,\r\n    RESOURCE,\r\n    FEEDING_PHASE,\r\n    EMPTY_SQUARE,\r\n    SCORING_PHASE,\r\n    GAME_PHASE\r\n} from './constants';\r\nimport '../css/resources.css';\r\n\r\n\r\nconst placeSelectedResource = props => {\r\n    props.placeResource();\r\n    props.clearSelection();\r\n    props.changeMessage(message.showPattern);\r\n};\r\n\r\nconst placeSelectedBuilding = props => {\r\n    props.placeBuilding();\r\n    props.changeMessage(message.successfulBuildingPlacement);\r\n}\r\n\r\nconst nextRound = (props) => {\r\n    switch (props.phase) {\r\n\r\n        case GAME_PHASE:\r\n            props.clearSelection();\r\n            props.changeMessage(\"Переходим к кормежке?\");\r\n            props.feedCottages(\r\n                calcFedCottages(props.board, props.buildings)\r\n            );\r\n            props.changePhaseTo(FEEDING_PHASE);\r\n            break;\r\n\r\n        case FEEDING_PHASE:\r\n            props.changePhaseTo(SCORING_PHASE);\r\n            props.changeMessage(\"Переходим к подсчету очков?\");\r\n            break;\r\n\r\n        case SCORING_PHASE:\r\n            props.changePhaseTo(GAME_PHASE);\r\n            props.changeMessage(\"начинаем новую игру\");\r\n            props.newGame();\r\n            break;\r\n\r\n        default:\r\n            props.changeMessage('зачем нажимать? - нужно лочить кнопку!!!');\r\n    }\r\n};\r\n\r\nconst renderButtons = props => {\r\n    //if board is full\r\n    if (!props.board.indexes.find(i => props.board[i] === EMPTY_SQUARE)) {\r\n        return <button onClick={() => nextRound(props)}>NEXT</button>;\r\n    }\r\n\r\n    if (props.selectedSquare) {\r\n        if (props.selectedPawn.type === RESOURCE) {\r\n            return <button onClick={() => placeSelectedResource(props)}> PLACE RESOURCE</button>;\r\n        } else if (props.selectedPawn.type >= 0) {\r\n            return <button onClick={() => placeSelectedBuilding(props)}> PLACE BUILDING</button>;\r\n        }\r\n    }\r\n}\r\n\r\nconst ToolbarWithResources = props => {\r\n\r\n    return (\r\n        <div className=\"resourceSelector\">\r\n            Resources\r\n            <Resource id={0} />\r\n            <Resource id={1} />\r\n            <Resource id={2} />\r\n            {props.message} <br />\r\n            {renderButtons(props)}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        selectedPawn: state.selectedPawn,\r\n        selectedSquare: state.selectedSquare,\r\n        phase: state.phase,\r\n        board: state.board,\r\n        buildings: state.buildings,\r\n        message: state.message\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, { changePhaseTo, placeResource, clearSelection, changeMessage, placeBuilding, feedCottages, newGame })(ToolbarWithResources);"]},"metadata":{},"sourceType":"module"}