{"ast":null,"code":"var _jsxFileName = \"D:\\\\Pro\\\\React\\\\tlt\\\\src\\\\components\\\\Buttons.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { selectResource, changePhaseTo, placeResource } from '../actions';\n\nclass Buttons extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.plasePawn = () => {\n      console.log(this.props.phase);\n      console.log(this.props.selectedPawn);\n\n      if (this.props.phase === \"RESOURCE_PHASE\" && this.props.selectedPawn) {\n        //place the resource to the grid\n        //TODO update GRID STATE\n        this.props.placeResource();\n        this.props.changePhaseTo(\"BUILDING_PHASE\");\n      } else if (this.props.phase === \"BUILDING_PHASE\" && this.props.selectedResource) {//place the building to the grid & removing the resources\n        //TODO update GRID STATE\n      }\n\n      ;\n    };\n\n    this.nextRound = () => {\n      if (this.props.phase === \"BUILDING_PHASE\") {\n        this.props.changePhaseTo(\"RESOURCE_PHASE\");\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => this.plasePawn(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, \"Place\"), React.createElement(\"button\", {\n      onClick: () => this.nextRound(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \"NEXT\"));\n  }\n\n}\n\n;\n\nconst mapStateToProps = state => {\n  return {\n    selectedPawn: state.selectedPawn,\n    phase: state.phase\n  };\n};\n\nexport default connect(mapStateToProps, {\n  selectResource,\n  changePhaseTo,\n  placeResource\n})(Buttons);","map":{"version":3,"sources":["D:\\Pro\\React\\tlt\\src\\components\\Buttons.js"],"names":["React","connect","selectResource","changePhaseTo","placeResource","Buttons","Component","plasePawn","console","log","props","phase","selectedPawn","selectedResource","nextRound","render","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,cAAT,EAAyBC,aAAzB,EAAwCC,aAAxC,QAA6D,YAA7D;;AAEA,MAAMC,OAAN,SAAsBL,KAAK,CAACM,SAA5B,CAAsC;AAAA;AAAA;;AAAA,SAElCC,SAFkC,GAEtB,MAAM;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWC,KAAvB;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWE,YAAvB;;AAEA,UAAI,KAAKF,KAAL,CAAWC,KAAX,KAAqB,gBAArB,IAAyC,KAAKD,KAAL,CAAWE,YAAxD,EAAsE;AAClE;AACA;AACA,aAAKF,KAAL,CAAWN,aAAX;AAEA,aAAKM,KAAL,CAAWP,aAAX,CAAyB,gBAAzB;AACH,OAND,MAMO,IAAI,KAAKO,KAAL,CAAWC,KAAX,KAAqB,gBAArB,IAAyC,KAAKD,KAAL,CAAWG,gBAAxD,EAA0E,CAC7E;AACA;AAGH;;AAAA;AACJ,KAlBiC;;AAAA,SAoBlCC,SApBkC,GAoBtB,MAAM;AACd,UAAI,KAAKJ,KAAL,CAAWC,KAAX,KAAqB,gBAAzB,EAA2C;AACvC,aAAKD,KAAL,CAAWP,aAAX,CAAyB,gBAAzB;AACH;AACJ,KAxBiC;AAAA;;AA0BlCY,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKR,SAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,EAEI;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKO,SAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,CADJ;AAMH;;AAjCiC;;AAmCrC;;AAED,MAAME,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHL,IAAAA,YAAY,EAAEK,KAAK,CAACL,YADjB;AAEHD,IAAAA,KAAK,EAAEM,KAAK,CAACN;AAFV,GAAP;AAIH,CALD;;AAOA,eAAeV,OAAO,CAACe,eAAD,EAAkB;AAAEd,EAAAA,cAAF;AAAkBC,EAAAA,aAAlB;AAAiCC,EAAAA;AAAjC,CAAlB,CAAP,CAA2EC,OAA3E,CAAf","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { selectResource, changePhaseTo, placeResource } from '../actions';\r\n\r\nclass Buttons extends React.Component {\r\n\r\n    plasePawn = () => {\r\n        console.log(this.props.phase);\r\n        console.log(this.props.selectedPawn);\r\n\r\n        if (this.props.phase === \"RESOURCE_PHASE\" && this.props.selectedPawn) {\r\n            //place the resource to the grid\r\n            //TODO update GRID STATE\r\n            this.props.placeResource();\r\n\r\n            this.props.changePhaseTo(\"BUILDING_PHASE\");\r\n        } else if (this.props.phase === \"BUILDING_PHASE\" && this.props.selectedResource) {\r\n            //place the building to the grid & removing the resources\r\n            //TODO update GRID STATE\r\n\r\n\r\n        };\r\n    }\r\n    //after resource placing new round can be started\r\n    nextRound = () => {\r\n        if (this.props.phase === \"BUILDING_PHASE\") {\r\n            this.props.changePhaseTo(\"RESOURCE_PHASE\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button onClick={() => this.plasePawn()}>Place</button>\r\n                <button onClick={() => this.nextRound()}>NEXT</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        selectedPawn: state.selectedPawn,\r\n        phase: state.phase\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, { selectResource, changePhaseTo, placeResource })(Buttons);\r\n"]},"metadata":{},"sourceType":"module"}