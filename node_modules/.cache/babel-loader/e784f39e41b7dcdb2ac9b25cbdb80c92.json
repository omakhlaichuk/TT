{"ast":null,"code":"import _ from 'lodash';\nexport const rotateAndMirrorPattern = pattern => {\n  //[[12,\"WOOD\"],...] -> [{x: \"1\", y: \"2\", resource: \"WOOD\"},...]\n  const indexToPoint = arr => arr.map(square => {\n    return {\n      x: square[0].toString().charAt(0),\n      y: square[0].toString().charAt(1),\n      resource: square[1]\n    };\n  }); // Move to 11, [{x: \"1\", y: \"2\", resource: \"WOOD\"},...] -> [[12,\"WOOD\"],...] and sort by index\n\n\n  const pointToIndex = arr => {\n    //move to x=1, y=1\n    const dx = Math.min(...arr.map(point => Number(point.x))) - 1;\n    const dy = Math.min(...arr.map(point => Number(point.y))) - 1;\n    arr.forEach(point => {\n      point.x -= dx;\n      point.y -= dy;\n    }); //[{x: \"1\", y: \"2\", resource: \"WOOD\"},...] -> [[12,\"WOOD\"],...]\n\n    return arr.map(point => {\n      const index = point.x.toString() + point.y.toString();\n      return [index, point.resource]; //and sort by index\n    }).sort((a, b) => {\n      return a[0] - b[0];\n    });\n  };\n\n  const rotate = arr => arr.map(point => {\n    return {\n      x: -point.y,\n      y: point.x,\n      resource: point.resource\n    };\n  });\n\n  const mirrorX = arr => arr.map(point => {\n    return {\n      x: -point.x,\n      y: point.y,\n      resource: point.resource\n    };\n  });\n\n  const mirrorY = arr => arr.map(point => {\n    return {\n      x: point.x,\n      y: -point.y,\n      resource: point.resource\n    };\n  });\n\n  const rotated0pattern = indexToPoint(pattern);\n  const rotated1pattern = rotate(rotated0pattern);\n  const rotated2pattern = rotate(rotated1pattern);\n  const rotated3pattern = rotate(rotated2pattern);\n  const rez = [rotated0pattern, mirrorY(rotated0pattern), mirrorX(rotated0pattern), rotated1pattern, mirrorX(rotated1pattern), mirrorY(rotated1pattern), rotated2pattern, mirrorX(rotated2pattern), mirrorY(rotated2pattern), rotated3pattern, mirrorX(rotated3pattern), mirrorY(rotated3pattern)].map(pointPattern => pointToIndex(pointPattern));\n  return _.uniqWith(rez, _.isEqual);\n};","map":{"version":3,"sources":["D:\\Pro\\React\\tlt\\src\\components\\Buildings\\patternHandler.js"],"names":["_","rotateAndMirrorPattern","pattern","indexToPoint","arr","map","square","x","toString","charAt","y","resource","pointToIndex","dx","Math","min","point","Number","dy","forEach","index","sort","a","b","rotate","mirrorX","mirrorY","rotated0pattern","rotated1pattern","rotated2pattern","rotated3pattern","rez","pointPattern","uniqWith","isEqual"],"mappings":"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","sourcesContent":["import _ from 'lodash';\r\n\r\n\r\nexport const rotateAndMirrorPattern = pattern => {\r\n\r\n    //[[12,\"WOOD\"],...] -> [{x: \"1\", y: \"2\", resource: \"WOOD\"},...]\r\n    const indexToPoint = arr => arr.map(square => {\r\n        return {\r\n            x: square[0].toString().charAt(0),\r\n            y: square[0].toString().charAt(1),\r\n            resource: square[1]\r\n        }\r\n    });\r\n\r\n    // Move to 11, [{x: \"1\", y: \"2\", resource: \"WOOD\"},...] -> [[12,\"WOOD\"],...] and sort by index\r\n    const pointToIndex = arr => {\r\n        //move to x=1, y=1\r\n        const dx = Math.min(...arr.map(point => Number(point.x))) - 1;\r\n        const dy = Math.min(...arr.map(point => Number(point.y))) - 1;\r\n        arr.forEach(point => {\r\n            point.x -= dx;\r\n            point.y -= dy;\r\n        });\r\n        //[{x: \"1\", y: \"2\", resource: \"WOOD\"},...] -> [[12,\"WOOD\"],...]\r\n        return arr.map(point => {\r\n            const index = point.x.toString() + point.y.toString();\r\n            return [index, point.resource]\r\n            //and sort by index\r\n        }).sort((a, b) => { return a[0] - b[0] });\r\n\r\n\r\n    }\r\n\r\n    const rotate = arr => arr.map(point => { return { x: -point.y, y: point.x, resource: point.resource } });\r\n\r\n    const mirrorX = arr => arr.map(point => { return { x: -point.x, y: point.y, resource: point.resource } });\r\n\r\n    const mirrorY = arr => arr.map(point => { return { x: point.x, y: -point.y, resource: point.resource } });\r\n\r\n    const rotated0pattern = indexToPoint(pattern);\r\n    const rotated1pattern = rotate(rotated0pattern);\r\n    const rotated2pattern = rotate(rotated1pattern);\r\n    const rotated3pattern = rotate(rotated2pattern);\r\n\r\n\r\n    const rez = [\r\n        rotated0pattern,\r\n        mirrorY(rotated0pattern),\r\n\r\n        mirrorX(rotated0pattern),\r\n\r\n        rotated1pattern,\r\n        mirrorX(rotated1pattern),\r\n        mirrorY(rotated1pattern),\r\n\r\n        rotated2pattern,\r\n        mirrorX(rotated2pattern),\r\n        mirrorY(rotated2pattern),\r\n\r\n        rotated3pattern,\r\n        mirrorX(rotated3pattern),\r\n        mirrorY(rotated3pattern)\r\n    ].map(pointPattern => pointToIndex(pointPattern));\r\n\r\n    return _.uniqWith(rez, _.isEqual);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}