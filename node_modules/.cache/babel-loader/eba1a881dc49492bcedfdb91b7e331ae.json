{"ast":null,"code":"var _jsxFileName = \"D:\\\\Pro\\\\React\\\\tt\\\\src\\\\components\\\\ToolbarWithResources.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Resource from './Resource';\nimport { changePhaseTo, placeResource, clearSelection, changeMessage, placeBuilding, feedCottages, newGame, scoreTotal } from '../actions';\nimport { calcFedCottages } from './Buildings/scoring';\nimport { message, RESOURCE, FEEDING_PHASE, SCORING_PHASE, GAME_PHASE } from './constants';\nimport '../css/resources.css';\n\nconst placeSelectedResource = props => {\n  props.placeResource();\n  props.clearSelection();\n  props.changeMessage(message.showPattern);\n};\n\nconst placeSelectedBuilding = props => {\n  props.placeBuilding();\n  props.changeMessage(message.successfulBuildingPlacement);\n};\n\nconst nextRound = props => {\n  switch (props.phase) {\n    case GAME_PHASE:\n      props.changePhaseTo(FEEDING_PHASE);\n      props.clearSelection();\n      const fedCottages = calcFedCottages(props.board, props.buildings);\n      props.feedCottages(fedCottages);\n      props.changeMessage(message.goToFeedingPhase(fedCottages));\n      break;\n\n    case FEEDING_PHASE:\n      props.changePhaseTo(SCORING_PHASE);\n      let totalScore = 0;\n      console.log(props.buildings[4]);\n      console.log(props.buildings[4].title);\n      console.log(props.buildings[4].score);\n      props.buildings.forEach(building => {\n        if (building.score) {\n          totalScore += building.score;\n        }\n\n        ;\n      });\n      props.scoreTotal(totalScore);\n      props.changeMessage(message.goToGamePhase(totalScore));\n      break;\n\n    case SCORING_PHASE:\n      props.changePhaseTo(GAME_PHASE);\n      props.newGame();\n      break;\n\n    default:\n      props.changeMessage('зачем нажимать? - нужно лочить кнопку!!!');\n  }\n};\n\nconst renderPlacingButtons = props => {\n  if (props.selectedSquare) {\n    if (props.selectedPawn.type === RESOURCE) {\n      return React.createElement(\"button\", {\n        onClick: () => placeSelectedResource(props),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \" PLACE RESOURCE\");\n    } else if (props.selectedPawn.type >= 0) {\n      return React.createElement(\"button\", {\n        onClick: () => placeSelectedBuilding(props),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, \" PLACE BUILDING\");\n    }\n  }\n};\n\nconst ToolbarWithResources = props => {\n  return React.createElement(\"div\", {\n    className: \"resourceSelector\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"Resources\", React.createElement(Resource, {\n    id: 0,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), React.createElement(Resource, {\n    id: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }), React.createElement(Resource, {\n    id: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }), props.message, \" \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }), renderPlacingButtons(props), React.createElement(\"button\", {\n    onClick: () => nextRound(props),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"Scoring\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, \"SCORE: \", props.score));\n};\n\nconst mapStateToProps = state => {\n  return {\n    selectedPawn: state.selectedPawn,\n    selectedSquare: state.selectedSquare,\n    phase: state.phase,\n    board: state.board,\n    buildings: state.buildings,\n    message: state.message,\n    score: state.score\n  };\n};\n\nexport default connect(mapStateToProps, {\n  changePhaseTo,\n  placeResource,\n  clearSelection,\n  changeMessage,\n  placeBuilding,\n  feedCottages,\n  newGame,\n  scoreTotal\n})(ToolbarWithResources);","map":{"version":3,"sources":["D:\\Pro\\React\\tt\\src\\components\\ToolbarWithResources.js"],"names":["React","connect","Resource","changePhaseTo","placeResource","clearSelection","changeMessage","placeBuilding","feedCottages","newGame","scoreTotal","calcFedCottages","message","RESOURCE","FEEDING_PHASE","SCORING_PHASE","GAME_PHASE","placeSelectedResource","props","showPattern","placeSelectedBuilding","successfulBuildingPlacement","nextRound","phase","fedCottages","board","buildings","goToFeedingPhase","totalScore","console","log","title","score","forEach","building","goToGamePhase","renderPlacingButtons","selectedSquare","selectedPawn","type","ToolbarWithResources","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nimport Resource from './Resource';\r\nimport {\r\n    changePhaseTo,\r\n    placeResource,\r\n    clearSelection,\r\n    changeMessage,\r\n    placeBuilding,\r\n    feedCottages,\r\n    newGame,\r\n    scoreTotal\r\n} from '../actions';\r\nimport { calcFedCottages } from './Buildings/scoring';\r\nimport {\r\n    message,\r\n    RESOURCE,\r\n    FEEDING_PHASE,\r\n    SCORING_PHASE,\r\n    GAME_PHASE\r\n} from './constants';\r\nimport '../css/resources.css';\r\n\r\n\r\nconst placeSelectedResource = props => {\r\n    props.placeResource();\r\n    props.clearSelection();\r\n    props.changeMessage(message.showPattern);\r\n};\r\n\r\nconst placeSelectedBuilding = props => {\r\n    props.placeBuilding();\r\n    props.changeMessage(message.successfulBuildingPlacement);\r\n}\r\n\r\nconst nextRound = (props) => {\r\n    switch (props.phase) {\r\n\r\n        case GAME_PHASE:\r\n            props.changePhaseTo(FEEDING_PHASE);\r\n            props.clearSelection();\r\n            const fedCottages = calcFedCottages(props.board, props.buildings);\r\n            props.feedCottages(fedCottages);\r\n            props.changeMessage(message.goToFeedingPhase(fedCottages));\r\n            break;\r\n\r\n        case FEEDING_PHASE:\r\n            props.changePhaseTo(SCORING_PHASE);\r\n            let totalScore = 0;\r\n            console.log(props.buildings[4]);\r\n            console.log(props.buildings[4].title);\r\n\r\n            console.log(props.buildings[4].score);\r\n            props.buildings.forEach(building => {\r\n                if (building.score) {totalScore += building.score};\r\n            });\r\n            props.scoreTotal(totalScore);\r\n            props.changeMessage(message.goToGamePhase(totalScore));\r\n            break;\r\n\r\n        case SCORING_PHASE:\r\n            props.changePhaseTo(GAME_PHASE);\r\n            props.newGame();\r\n            break;\r\n\r\n        default:\r\n            props.changeMessage('зачем нажимать? - нужно лочить кнопку!!!');\r\n    }\r\n};\r\n\r\nconst renderPlacingButtons = props => {\r\n    if (props.selectedSquare) {\r\n        if (props.selectedPawn.type === RESOURCE) {\r\n            return <button onClick={() => placeSelectedResource(props)}> PLACE RESOURCE</button>;\r\n        } else if (props.selectedPawn.type >= 0) {\r\n            return <button onClick={() => placeSelectedBuilding(props)}> PLACE BUILDING</button>;\r\n        }\r\n    }\r\n}\r\n\r\nconst ToolbarWithResources = props => {\r\n\r\n    return (\r\n        <div className=\"resourceSelector\">\r\n            Resources\r\n            <Resource id={0} />\r\n            <Resource id={1} />\r\n            <Resource id={2} />\r\n            {props.message} <br />\r\n            {renderPlacingButtons(props)}\r\n            <button onClick={() => nextRound(props)}>Scoring</button>\r\n            <p>SCORE: {props.score}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        selectedPawn: state.selectedPawn,\r\n        selectedSquare: state.selectedSquare,\r\n        phase: state.phase,\r\n        board: state.board,\r\n        buildings: state.buildings,\r\n        message: state.message,\r\n        score: state.score,\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps,\r\n    {\r\n        changePhaseTo,\r\n        placeResource,\r\n        clearSelection,\r\n        changeMessage,\r\n        placeBuilding,\r\n        feedCottages,\r\n        newGame,\r\n        scoreTotal\r\n    })(ToolbarWithResources);"]},"metadata":{},"sourceType":"module"}